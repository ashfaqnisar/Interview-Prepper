[
  {
    "id": "1681302415536-1",
    "date": "2023-04-12T12:26:55.536Z",
    "question": "What are the possible ways to create objects in JavaScript",
    "answer": [
      "There are many ways to create objects in javascript as below",
      "**Object constructor:**",
      "The simplest way to create an empty object is using the Object constructor. Currently this approach is not\nrecommended.",
      "```javascript\nvar object = new Object();\n\n```",
      "**Object's create method:**",
      "The create method of Object creates a new object by passing the prototype object as a parameter",
      "```javascript\nvar object = Object.create(null);\n\n```",
      "**Object literal syntax:**",
      "The object literal syntax (or object initializer), is a comma-separated set of name-value pairs wrapped in curly\nbraces.",
      "```javascript\nvar object = {\n     name: \"Sudheer\",\n     age: 34\n};\n\nObject literal property values can be of any data type, including array, function, and nested object.\n\n```",
      "**Note:** This is an easiest way to create an object",
      "**Function constructor:**",
      "Create any function and apply the new operator to create object instances,",
      "```javascript\nfunction Person(name) {\n  this.name = name;\n  this.age = 21;\n}\nvar object = new Person(\"Sudheer\");\n\n```",
      "**Function constructor with prototype:**",
      "This is similar to function constructor but it uses prototype for their properties and methods,",
      "```javascript\nfunction Person() {}\nPerson.prototype.name = \"Sudheer\";\nvar object = new Person();\n\n```",
      "This is equivalent to an instance created with an object create method with a function prototype and then call\nthat function with an instance and parameters as arguments.",
      "```javascript\nfunction func() {};\n\nnew func(x, y, z);\n\n```",
      "**(OR)**",
      "```javascript\n// Create a new instance using function prototype.\nvar newInstance = Object.create(func.prototype)\n\n// Call the function\nvar result = func.call(newInstance, x, y, z),\n\n// If the result is a non-null object then use it otherwise just use the new instance.\nconsole.log(result && typeof result === 'object' ? result : newInstance);\n\n```",
      "**ES6 Class syntax:**",
      "ES6 introduces class feature to create the objects",
      "```javascript\nclass Person {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nvar object = new Person(\"Sudheer\");\n\n```",
      "**Singleton pattern:**",
      "A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the\nsame instance and this way one can ensure that they don't accidentally create multiple instances.",
      "```javascript\nvar object = new (function () {\n  this.name = \"Sudheer\";\n})();\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-2",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a prototype chain",
    "answer": [
      "**Prototype chaining** is used to build new types of objects based on existing ones. It is similar to inheritance in\na class based language.",
      "The prototype on object instance is available through **Object.getPrototypeOf(object)** or **\\_\\_proto__** property\nwhereas prototype on constructors function is available through **Object.prototype**.",
      "![Screenshot](images/prototype_chain.png)"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-3",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is the difference between Call, Apply and Bind",
    "answer": [
      "The difference between Call, Apply and Bind can be explained with below examples,",
      "**Call:** The call() method invokes a function with a given `this` value and arguments provided one by one",
      "```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.call(employee1, \"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninvite.call(employee2, \"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\n\n```",
      "**Apply:** Invokes the function with a given `this` value and allows you to pass in arguments as an array",
      "```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\ninvite.apply(employee1, [\"Hello\", \"How are you?\"]); // Hello John Rodson, How are you?\ninvite.apply(employee2, [\"Hello\", \"How are you?\"]); // Hello Jimmy Baily, How are you?\n\n```",
      "**bind:** returns a new function, allowing you to pass any number of arguments",
      "```javascript\nvar employee1 = { firstName: \"John\", lastName: \"Rodson\" };\nvar employee2 = { firstName: \"Jimmy\", lastName: \"Baily\" };\n\nfunction invite(greeting1, greeting2) {\n  console.log(\n    greeting1 + \" \" + this.firstName + \" \" + this.lastName + \", \" + greeting2\n  );\n}\n\nvar inviteEmployee1 = invite.bind(employee1);\nvar inviteEmployee2 = invite.bind(employee2);\ninviteEmployee1(\"Hello\", \"How are you?\"); // Hello John Rodson, How are you?\ninviteEmployee2(\"Hello\", \"How are you?\"); // Hello Jimmy Baily, How are you?\n\n```",
      "Call and apply are pretty interchangeable. Both execute the current function immediately. You need to decide whether\nit’s easier to send in an array or a comma separated list of arguments. You can remember by treating Call is for *\n*comma** (separated list) and Apply is for **Array**.",
      "Whereas Bind creates a new function that will have `this` set to the first parameter passed to bind()."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-4",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is JSON and its common operations",
    "answer": [
      "**JSON** is a text-based data format following JavaScript object syntax, which was popularized\nby `Douglas Crockford`. It is useful when you want to transmit data across a network and it is basically just a text\nfile with an extension of .json, and a MIME type of application/json",
      "**Parsing:** Converting a string to a native object",
      "```javascript\nJSON.parse(text);\n\n```",
      "**Stringification:** converting a native object to a string so it can be transmitted across the network",
      "```javascript\nJSON.stringify(object);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-5",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is the purpose of the array slice method",
    "answer": [
      "The **slice()** method returns the selected elements in an array as a new array object. It selects the elements\nstarting at the given start argument, and ends at the given optional end argument without including the last element.\nIf you omit the second argument then it selects till the end.",
      "Some of the examples of this method are,",
      "```javascript\nlet arrayIntegers = [1, 2, 3, 4, 5];\nlet arrayIntegers1 = arrayIntegers.slice(0, 2); // returns [1,2]\nlet arrayIntegers2 = arrayIntegers.slice(2, 3); // returns [3]\nlet arrayIntegers3 = arrayIntegers.slice(4); //returns [5]\n\n```",
      "**Note:** Slice method won't mutate the original array but it returns the subset as a new array."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-6",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is the purpose of the array splice method",
    "answer": [
      "The **splice()** method is used either adds/removes items to/from an array, and then returns the removed item. The\nfirst argument specifies the array position for insertion or deletion whereas the optional second argument indicates\nthe number of elements to be deleted. Each additional argument is added to the array.",
      "Some of the examples of this method are,",
      "```javascript\nlet arrayIntegersOriginal1 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal2 = [1, 2, 3, 4, 5];\nlet arrayIntegersOriginal3 = [1, 2, 3, 4, 5];\n\nlet arrayIntegers1 = arrayIntegersOriginal1.splice(0, 2); // returns [1, 2]; original array: [3, 4, 5]\nlet arrayIntegers2 = arrayIntegersOriginal2.splice(3); // returns [4, 5]; original array: [1, 2, 3]\nlet arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, \"a\", \"b\", \"c\"); //returns [4]; original array: [1, 2, 3, \"a\", \"b\", \"c\", 5]\n\n```",
      "**Note:** Splice method modifies the original array and returns the deleted array."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-7",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is the difference between slice and splice",
    "answer": [
      "Some of the major difference in a tabular form",
      "| Slice                                        | Splice                                          |\n      | -------------------------------------------- | ----------------------------------------------- |\n| Doesn't modify the original array(immutable) | Modifies the original array(mutable)            |\n| Returns the subset of original array         | Returns the deleted elements as array           |\n| Used to pick the elements from array         | Used to insert or delete elements to/from array |"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-8",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "How do you compare Object and Map",
    "answer": [
      "**Objects** are similar to **Maps** in that both let you set keys to values, retrieve those values, delete keys, and\ndetect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But\nthere are important differences that make using a Map preferable in certain cases.",
      "The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions,\nobjects, and any primitive.",
      "The keys in Map are ordered while keys added to Object are not. Thus, when iterating over it, a Map object\nreturns keys in order of insertion.",
      "You can get the size of a Map easily with the size property, while the number of properties in an Object must be\ndetermined manually.",
      "A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its\nkeys in some fashion and iterating over them.",
      "An Object has a prototype, so there are default keys in the map that could collide with your keys if you're not\ncareful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done.",
      "A Map may perform better in scenarios involving frequent addition and removal of key pairs."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-9",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is the difference between == and === operators",
    "answer": [
      "JavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. The strict operators take\ntype of variable in consideration, while non-strict operators make type correction/conversion based upon values of\nvariables. The strict operators follow the below conditions for different types,",
      "Two strings are strictly equal when they have the same sequence of characters, same length, and same characters\nin corresponding positions.",
      "Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value.\nThere are two special cases in this,",
      "NaN is not equal to anything, including NaN.",
      "Positive and negative zeros are equal to one another.",
      "Two Boolean operands are strictly equal if both are true or both are false.",
      "Two objects are strictly equal if they refer to the same Object.",
      "Null and Undefined types are not equal with ===, but equal with ==. i.e,\nnull===undefined --> false but null==undefined --> true",
      "Some of the example which covers the above cases,",
      "```javascript\n0 == false   // true\n0 === false  // false\n1 == \"1\"     // true\n1 === \"1\"    // false\nnull == undefined // true\nnull === undefined // false\n'0' == false // true\n'0' === false // false\n[]==[] or []===[] //false, refer different objects in memory\n{}=={} or {}==={} //false, refer different objects in memory\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-10",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What are lambda or arrow functions",
    "answer": [
      "An arrow function is a shorter syntax for a function expression and does not have its own **this, arguments, super,\nor new.target**. These functions are best suited for non-method functions, and they cannot be used as constructors."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-11",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a first class function",
    "answer": [
      "In Javascript, functions are first class objects. First-class functions means when functions in that language are\ntreated like any other variable.",
      "For example, in such a language, a function can be passed as an argument to other functions, can be returned by\nanother function and can be assigned as a value to a variable. For example, in the below example, handler functions\nassigned to a listener",
      "```javascript\nconst handler = () => console.log(\"This is a click handler function\");\ndocument.addEventListener(\"click\", handler);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-12",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a first order function",
    "answer": [
      "First-order function is a function that doesn’t accept another function as an argument and doesn’t return a function\nas its return value.",
      "```javascript\nconst firstOrder = () => console.log(\"I am a first order function!\");\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-13",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a higher order function",
    "answer": [
      "Higher-order function is a function that accepts another function as an argument or returns a function as a return\nvalue or both.",
      "```javascript\nconst firstOrderFunc = () =>\n  console.log(\"Hello, I am a First order function\");\nconst higherOrder = (ReturnFirstOrderFunc) => ReturnFirstOrderFunc();\nhigherOrder(firstOrderFunc);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-14",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a unary function",
    "answer": [
      "Unary function (i.e. monadic) is a function that accepts exactly one argument. It stands for a single argument\naccepted by a function.",
      "Let us take an example of unary function,",
      "```javascript\nconst unaryFunction = (a) => console.log(a + 10); // Add 10 to the given argument and display the value\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-15",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is the currying function",
    "answer": [
      "Currying is the process of taking a function with multiple arguments and turning it into a sequence of functions\neach with only a single argument. Currying is named after a mathematician **Haskell Curry**. By applying currying, a\nn-ary function turns it into a unary function.",
      "Let's take an example of n-ary function and how it turns into a currying function,",
      "```javascript\nconst multiArgFunction = (a, b, c) => a + b + c;\nconsole.log(multiArgFunction(1, 2, 3)); // 6\n\nconst curryUnaryFunction = (a) => (b) => (c) => a + b + c;\ncurryUnaryFunction(1); // returns a function: b => c =>  1 + b + c\ncurryUnaryFunction(1)(2); // returns a function: c => 3 + c\ncurryUnaryFunction(1)(2)(3); // returns the number 6\n\n```",
      "Curried functions are great to improve **code reusability** and **functional composition**."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-16",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a pure function",
    "answer": [
      "A **Pure function** is a function where the return value is only determined by its arguments without any side\neffects. i.e, If you call a function with the same arguments 'n' number of times and 'n' number of places in the\napplication then it will always return the same value.",
      "Let's take an example to see the difference between pure and impure functions,",
      "```javascript\n//Impure\nlet numberArray = [];\nconst impureAddNumber = (number) => numberArray.push(number);\n//Pure\nconst pureAddNumber = (number) => (argNumberArray) =>\n  argNumberArray.concat([number]);\n\n//Display the results\nconsole.log(impureAddNumber(6)); // returns 1\nconsole.log(numberArray); // returns [6]\nconsole.log(pureAddNumber(7)(numberArray)); // returns [6, 7]\nconsole.log(numberArray); // returns [6]\n\n```",
      "As per the above code snippets, the **Push** function is impure itself by altering the array and returning a push\nnumber index independent of the parameter value. . Whereas **Concat** on the other hand takes the array and\nconcatenates it with the other array producing a whole new array without side effects. Also, the return value is a\nconcatenation of the previous array.",
      "Remember that Pure functions are important as they simplify unit testing without any side effects and no need for\ndependency injection. They also avoid tight coupling and make it harder to break your application by not having any\nside effects. These principles are coming together with **Immutability** concept of ES6 by giving preference to *\n*const** over **let** usage."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-17",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is the purpose of the let keyword",
    "answer": [
      "The `let` statement declares a **block scope local variable**. Hence the variables defined with let keyword are\nlimited in scope to the block, statement, or expression on which it is used. Whereas variables declared with\nthe `var` keyword used to define a variable globally, or locally to an entire function regardless of block scope.",
      "Let's take an example to demonstrate the usage,",
      "```javascript\nlet counter = 30;\nif (counter === 30) {\n  let counter = 31;\n  console.log(counter); // 31\n}\nconsole.log(counter); // 30 (because the variable in if block won't exist here)\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-18",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is the difference between let and var",
    "answer": [
      "You can list out the differences in a tabular format",
      "| var                                                   | let                         |\n        | ----------------------------------------------------- | --------------------------- |\n| It is been available from the beginning of JavaScript | Introduced as part of ES6   |\n| It has function scope                                 | It has block scope          |\n| Variables will be hoisted                             | Hoisted but not initialized |",
      "Let's take an example to see the difference,",
      "```javascript\nfunction userDetails(username) {\n  if (username) {\n    console.log(salary); // undefined due to hoisting\n    console.log(age); // ReferenceError: Cannot access 'age' before initialization\n    let age = 30;\n    var salary = 10000;\n  }\n  console.log(salary); //10000 (accessible to due function scope)\n  console.log(age); //error: age is not defined(due to block scope)\n}\nuserDetails(\"John\");\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-19",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is the reason to choose the name let as a keyword",
    "answer": [
      "`let` is a mathematical statement that was adopted by early programming languages like **Scheme** and **Basic**. It\nhas been borrowed from dozens of other languages that use `let` already as a traditional keyword as close to `var`as\npossible."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-20",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "How do you redeclare variables in switch block without an error",
    "answer": [
      "If you try to redeclare variables in a `switch block` then it will cause errors because there is only one block. For\nexample, the below code block throws a syntax error as below,",
      "```javascript\nlet counter = 1;\nswitch (x) {\n  case 0:\n    let name;\n    break;\n\n  case 1:\n    let name; // SyntaxError for redeclaration.\n    break;\n}\n\n```",
      "To avoid this error, you can create a nested block inside a case clause and create a new block scoped lexical\nenvironment.",
      "```javascript\nlet counter = 1;\nswitch (x) {\n  case 0: {\n    let name;\n    break;\n  }\n  case 1: {\n    let name; // No SyntaxError for redeclaration.\n    break;\n  }\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-21",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is the Temporal Dead Zone",
    "answer": [
      "The Temporal Dead Zone is a behavior in JavaScript that occurs when declaring a variable with the let and const\nkeywords, but not with var. In ECMAScript 6, accessing a `let` or `const` variable before its declaration (within\nits scope) causes a ReferenceError. The time span when that happens, between the creation of a variable’s binding\nand its declaration, is called the temporal dead zone.",
      "Let's see this behavior with an example,",
      "```javascript\nfunction somemethod() {\n  console.log(counter1); // undefined\n  console.log(counter2); // ReferenceError\n  var counter1 = 1;\n  let counter2 = 2;\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-22",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is IIFE(Immediately Invoked Function Expression)",
    "answer": [
      "IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The\nsignature of it would be as below,",
      "```javascript\n(function () {\n  // logic here\n})();\n\n```",
      "The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be\naccessed by the outside world. i.e, If you try to access variables with IIFE then it throws an error as below,",
      "```javascript\n(function () {\n  var message = \"IIFE\";\n  console.log(message);\n})();\nconsole.log(message); //Error: message is not defined\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-23",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "How do you decode or encode a URL in JavaScript?",
    "answer": [
      "`encodeURI()` function is used to encode an URL. This function requires a URL string as a parameter and return that\nencoded string.\n`decodeURI()` function is used to decode an URL. This function requires an encoded URL string as parameter and\nreturn that decoded string.",
      "**Note:** If you want to encode characters such as `/ ? : @ & = + $ #` then you need to use `encodeURIComponent()`.",
      "```javascript\nlet uri = \"employeeDetails?name=john&occupation=manager\";\nlet encoded_uri = encodeURI(uri);\nlet decoded_uri = decodeURI(encoded_uri);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-24",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is memoization",
    "answer": [
      "Memoization is a programming technique which attempts to increase a function’s performance by caching its previously\ncomputed results. Each time a memoized function is called, its parameters are used to index the cache. If the data\nis present, then it can be returned, without executing the entire function. Otherwise the function is executed and\nthen the result is added to the cache.\nLet's take an example of adding function with memoization,",
      "```javascript\nconst memoizAddition = () => {\n  let cache = {};\n  return (value) => {\n    if (value in cache) {\n      console.log(\"Fetching from cache\");\n      return cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.\n    } else {\n      console.log(\"Calculating result\");\n      let result = value + 20;\n      cache[value] = result;\n      return result;\n    }\n  };\n};\n// returned function from memoizAddition\nconst addition = memoizAddition();\nconsole.log(addition(20)); //output: 40 calculated\nconsole.log(addition(20)); //output: 40 cached\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-25",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is Hoisting",
    "answer": [
      "Hoisting is a JavaScript mechanism where variables, function declarations and classes are moved to the top of their\nscope before code execution. Remember that JavaScript only hoists declarations, not initialisation.\nLet's take a simple example of variable hoisting,",
      "```javascript\nconsole.log(message); //output : undefined\nvar message = \"The variable Has been hoisted\";\n\n```",
      "The above code looks like as below to the interpreter,",
      "```javascript\nvar message;\nconsole.log(message);\nmessage = \"The variable Has been hoisted\";\n\n```",
      "In the same fashion, function declarations are hoisted too",
      "```javascript\nmessage(\"Good morning\"); //Good morning\n\nfunction message(name) {\n  console.log(name);\n}\n\n```",
      "This hoisting makes functions to be safely used in code before they are declared."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-26",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What are classes in ES6",
    "answer": [
      "In ES6, Javascript classes are primarily syntactic sugar over JavaScript’s existing prototype-based inheritance.\nFor example, the prototype based inheritance written in function expression as below,",
      "```javascript\nfunction Bike(model, color) {\n  this.model = model;\n  this.color = color;\n}\n\nBike.prototype.getDetails = function () {\n  return this.model + \" bike has\" + this.color + \" color\";\n};\n\n```",
      "Whereas ES6 classes can be defined as an alternative",
      "```javascript\nclass Bike {\n  constructor(color, model) {\n    this.color = color;\n    this.model = model;\n  }\n\n  getDetails() {\n    return this.model + \" bike has\" + this.color + \" color\";\n  }\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-27",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What are closures",
    "answer": [
      "A closure is the combination of a function and the lexical environment within which that function was declared. i.e,\nIt is an inner function that has access to the outer or enclosing function’s variables. The closure has three scope\nchains",
      "Own scope where variables defined between its curly brackets",
      "Outer function’s variables",
      "Global variables",
      "Let's take an example of closure concept,",
      "```javascript\nfunction Welcome(name) {\n  var greetingInfo = function (message) {\n    console.log(message + \" \" + name);\n  };\n  return greetingInfo;\n}\nvar myFunction = Welcome(\"John\");\nmyFunction(\"Welcome \"); //Output: Welcome John\nmyFunction(\"Hello Mr.\"); //output: Hello Mr.John\n\n```",
      "As per the above code, the inner function(i.e, greetingInfo) has access to the variables in the outer function\nscope(i.e, Welcome) even after the outer function has returned."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-28",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What are modules",
    "answer": [
      "Modules refer to small units of independent, reusable code and also act as the foundation of many JavaScript design\npatterns. Most of the JavaScript modules export an object literal, a function, or a constructor"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-29",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "Why do you need modules",
    "answer": [
      "Below are the list of benefits using modules in javascript ecosystem",
      "Maintainability",
      "Reusability",
      "Namespacing"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-30",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is scope in javascript",
    "answer": [
      "Scope is the accessibility of variables, functions, and objects in some particular part of your code during runtime.\nIn other words, scope determines the visibility of variables and other resources in areas of your code."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-31",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a service worker",
    "answer": [
      "A Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page and\nprovides features that don't need a web page or user interaction. Some of the major features of service workers are\nRich offline experiences(offline first web application development), periodic background syncs, push notifications,\nintercept and handle network requests and programmatically managing a cache of responses."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-32",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "How do you manipulate DOM using a service worker",
    "answer": [
      "Service worker can't access the DOM directly. But it can communicate with the pages it controls by responding to\nmessages sent via the `postMessage` interface, and those pages can manipulate the DOM."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-33",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "How do you reuse information across service worker restarts",
    "answer": [
      "The problem with service worker is that it gets terminated when not in use, and restarted when it's next needed, so\nyou cannot rely on global state within a service worker's `onfetch` and `onmessage` handlers. In this case, service\nworkers will have access to IndexedDB API in order to persist and reuse across restarts."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-34",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is IndexedDB",
    "answer": [
      "IndexedDB is a low-level API for client-side storage of larger amounts of structured data, including files/blobs.\nThis API uses indexes to enable high-performance searches of this data."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-35",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is web storage",
    "answer": [
      "Web storage is an API that provides a mechanism by which browsers can store key/value pairs locally within the\nuser's browser, in a much more intuitive fashion than using cookies. The web storage provides two mechanisms for\nstoring data on the client.",
      "**Local storage:** It stores data for current origin with no expiration date.",
      "**Session storage:** It stores data for one session and the data is lost when the browser tab is closed."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-36",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a post message",
    "answer": [
      "Post message is a method that enables cross-origin communication between Window objects.(i.e, between a page and a\npop-up that it spawned, or between a page and an iframe embedded within it). Generally, scripts on different pages\nare allowed to access each other if and only if the pages follow same-origin policy(i.e, pages share the same\nprotocol, port number, and host)."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-37",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a Cookie",
    "answer": [
      "A cookie is a piece of data that is stored on your computer to be accessed by your browser. Cookies are saved as\nkey/value pairs.\nFor example, you can create a cookie named username as below,",
      "```javascript\ndocument.cookie = \"username=John\";\n\n```",
      "![Screenshot](images/cookie.png)"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-38",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "Why do you need a Cookie",
    "answer": [
      "Cookies are used to remember information about the user profile(such as username). It basically involves two steps,",
      "When a user visits a web page, the user profile can be stored in a cookie.",
      "Next time the user visits the page, the cookie remembers the user profile."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-39",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What are the options in a cookie",
    "answer": [
      "There are few below options available for a cookie,",
      "By default, the cookie is deleted when the browser is closed but you can change this behavior by setting expiry\ndate (in UTC time).",
      "```javascript\ndocument.cookie = \"username=John; expires=Sat, 8 Jun 2019 12:00:00 UTC\";\n\n```",
      "By default, the cookie belongs to a current page. But you can tell the browser what path the cookie belongs to\nusing a path parameter.",
      "```javascript\ndocument.cookie = \"username=John; path=/services\";\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-40",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "How do you delete a cookie",
    "answer": [
      "You can delete a cookie by setting the expiry date as a passed date. You don't need to specify a cookie value in\nthis case.\nFor example, you can delete a username cookie in the current page as below.",
      "```javascript\ndocument.cookie =\n  \"username=; expires=Fri, 07 Jun 2019 00:00:00 UTC; path=/;\";\n\n```",
      "**Note:** You should define the cookie path option to ensure that you delete the right cookie. Some browsers doesn't\nallow to delete a cookie unless you specify a path parameter."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-41",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What are the differences between cookie, local storage and session storage",
    "answer": [
      "Below are some of the differences between cookie, local storage and session storage,",
      "| Feature                           | Cookie                             | Local storage    | Session storage     |\n        | --------------------------------- | ---------------------------------- | ---------------- | ------------------- |\n| Accessed on client or server side | Both server-side & client-side     | client-side only | client-side only    |\n| Lifetime                          | As configured using Expires option | until deleted    | until tab is closed |\n| SSL support                       | Supported                          | Not supported    | Not supported       |\n| Maximum data size                 | 4KB                                | 5 MB             | 5MB                 |"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-42",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is the main difference between localStorage and sessionStorage",
    "answer": [
      "LocalStorage is the same as SessionStorage but it persists the data even when the browser is closed and reopened(i.e\nit has no expiration time) whereas in sessionStorage data gets cleared when the page session ends."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-43",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "How do you access web storage",
    "answer": [
      "The Window object implements the `WindowLocalStorage` and `WindowSessionStorage` objects which has `localStorage`(\nwindow.localStorage) and `sessionStorage`(window.sessionStorage) properties respectively. These properties create an\ninstance of the Storage object, through which data items can be set, retrieved and removed for a specific domain and\nstorage type (session or local).\nFor example, you can read and write on local storage objects as below",
      "```javascript\nlocalStorage.setItem(\"logo\", document.getElementById(\"logo\").value);\nlocalStorage.getItem(\"logo\");\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-44",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What are the methods available on session storage",
    "answer": [
      "The session storage provided methods for reading, writing and clearing the session data",
      "```javascript\n// Save data to sessionStorage\nsessionStorage.setItem(\"key\", \"value\");\n\n// Get saved data from sessionStorage\nlet data = sessionStorage.getItem(\"key\");\n\n// Remove saved data from sessionStorage\nsessionStorage.removeItem(\"key\");\n\n// Remove all saved data from sessionStorage\nsessionStorage.clear();\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-45",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a storage event and its event handler",
    "answer": [
      "The StorageEvent is an event that fires when a storage area has been changed in the context of another document.\nWhereas onstorage property is an EventHandler for processing storage events.\nThe syntax would be as below",
      "```javascript\nwindow.onstorage = functionRef;\n\n```",
      "Let's take the example usage of onstorage event handler which logs the storage key and it's values",
      "```javascript\nwindow.onstorage = function (e) {\n  console.log(\n    \"The \" +\n      e.key +\n      \" key has been changed from \" +\n      e.oldValue +\n      \" to \" +\n      e.newValue +\n      \".\"\n  );\n};\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-46",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "Why do you need web storage",
    "answer": [
      "Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.\nAlso, the information is never transferred to the server. Hence this is a more recommended approach than Cookies."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-47",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "How do you check web storage browser support",
    "answer": [
      "You need to check browser support for localStorage and sessionStorage before using web storage,",
      "```javascript\nif (typeof Storage !== \"undefined\") {\n  // Code for localStorage/sessionStorage.\n} else {\n  // Sorry! No Web Storage support..\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-48",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "How do you check web workers browser support",
    "answer": [
      "You need to check browser support for web workers before using it",
      "```javascript\nif (typeof Worker !== \"undefined\") {\n  // code for Web worker support.\n} else {\n  // Sorry! No Web Worker support..\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-49",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "Give an example of a web worker",
    "answer": [
      "You need to follow below steps to start using web workers for counting example",
      "Create a Web Worker File: You need to write a script to increment the count value. Let's name it as counter.js",
      "```javascript\nlet i = 0;\n\nfunction timedCount() {\n  i = i + 1;\n  postMessage(i);\n  setTimeout(\"timedCount()\", 500);\n}\n\ntimedCount();\n\n```",
      "Here postMessage() method is used to post a message back to the HTML page",
      "Create a Web Worker Object: You can create a web worker object by checking for browser support. Let's name this\nfile as web_worker_example.js",
      "```javascript\nif (typeof w == \"undefined\") {\n  w = new Worker(\"counter.js\");\n}\n\n```",
      "and we can receive messages from web worker",
      "```javascript\nw.onmessage = function (event) {\n  document.getElementById(\"message\").innerHTML = event.data;\n};\n\n```",
      "Terminate a Web Worker:\nWeb workers will continue to listen for messages (even after the external script is finished) until it is\nterminated. You can use the terminate() method to terminate listening to the messages.",
      "```javascript\nw.terminate();\n\n```",
      "Reuse the Web Worker: If you set the worker variable to undefined you can reuse the code",
      "```javascript\nw = undefined;\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-50",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What are the restrictions of web workers on DOM",
    "answer": [
      "WebWorkers don't have access to below javascript objects since they are defined in an external files",
      "Window object",
      "Document object",
      "Parent object"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-51",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a promise",
    "answer": [
      "A promise is an object that may produce a single value some time in the future with either a resolved value or a\nreason that it’s not resolved(for example, network error). It will be in one of the 3 possible states: fulfilled,\nrejected, or pending.",
      "The syntax of Promise creation looks like below,",
      "```javascript\nconst promise = new Promise(function (resolve, reject) {\n  // promise description\n});\n\n```",
      "The usage of a promise would be as below,",
      "```javascript\nconst promise = new Promise(\n  (resolve) => {\n    setTimeout(() => {\n      resolve(\"I'm a Promise!\");\n    }, 5000);\n  },\n  (reject) => {}\n);\n\npromise.then((value) => console.log(value));\n\n```",
      "The action flow of a promise will be as below,",
      "![Screenshot](images/promises.png)"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-52",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "Why do you need a promise",
    "answer": [
      "Promises are used to handle asynchronous operations. They provide an alternative approach for callbacks by reducing\nthe callback hell and writing the cleaner code."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-53",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What are the three states of promise",
    "answer": [
      "Promises have three states:",
      "**Pending:** This is an initial state of the Promise before an operation begins",
      "**Fulfilled:** This state indicates that the specified operation was completed.",
      "**Rejected:** This state indicates that the operation did not complete. In this case an error value will be\nthrown."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-54",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a callback function",
    "answer": [
      "A callback function is a function passed into another function as an argument. This function is invoked inside the\nouter function to complete an action.\nLet's take a simple example of how to use callback function",
      "```javascript\nfunction callbackFunction(name) {\n  console.log(\"Hello \" + name);\n}\n\nfunction outerFunction(callback) {\n  let name = prompt(\"Please enter your name.\");\n  callback(name);\n}\n\nouterFunction(callbackFunction);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-55",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "Why do we need callbacks",
    "answer": [
      "The callbacks are needed because javascript is an event driven language. That means instead of waiting for a\nresponse javascript will keep executing while listening for other events.\nLet's take an example with the first function invoking an API call(simulated by setTimeout) and the next function\nwhich logs the message.",
      "```javascript\nfunction firstFunction() {\n  // Simulate a code delay\n  setTimeout(function () {\n    console.log(\"First function called\");\n  }, 1000);\n}\nfunction secondFunction() {\n  console.log(\"Second function called\");\n}\nfirstFunction();\nsecondFunction();\n\nOutput;\n// Second function called\n// First function called\n\n```",
      "As observed from the output, javascript didn't wait for the response of the first function and the remaining code\nblock got executed. So callbacks are used in a way to make sure that certain code doesn’t execute until the other\ncode finishes execution."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-56",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What is a callback hell",
    "answer": [
      "Callback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing\nwith asynchronous logic. The callback hell looks like below,",
      "```javascript\nasync1(function(){\n    async2(function(){\n        async3(function(){\n            async4(function(){\n                ....\n            });\n        });\n    });\n});\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-57",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "What are server-sent events",
    "answer": [
      "Server-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server\nvia HTTP connection without resorting to polling. These are a one way communications channel - events flow from\nserver to client only. This has been used in Facebook/Twitter updates, stock price updates, news feeds etc."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415537-58",
    "date": "2023-04-12T12:26:55.537Z",
    "question": "How do you receive server-sent event notifications",
    "answer": [
      "The EventSource object is used to receive server-sent event notifications. For example, you can receive messages\nfrom server as below,",
      "```javascript\nif (typeof EventSource !== \"undefined\") {\n  var source = new EventSource(\"sse_generator.js\");\n  source.onmessage = function (event) {\n    document.getElementById(\"output\").innerHTML += event.data + \"<br>\";\n  };\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-59",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you check browser support for server-sent events",
    "answer": [
      "You can perform browser support for server-sent events before using it as below,",
      "```javascript\nif (typeof EventSource !== \"undefined\") {\n  // Server-sent events supported. Let's have some code here!\n} else {\n  // No server-sent events supported\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-60",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are the events available for server sent events",
    "answer": [
      "Below are the list of events available for server sent events",
      "Event"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-61",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are the main rules of promise",
    "answer": [
      "A promise must follow a specific set of rules:",
      "A promise is an object that supplies a standard-compliant `.then()` method",
      "A pending promise may transition into either fulfilled or rejected state",
      "A fulfilled or rejected promise is settled and it must not transition into any other state.",
      "Once a promise is settled, the value must not change."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-62",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is callback in callback",
    "answer": [
      "You can nest one callback inside in another callback to execute the actions sequentially one by one. This is known\nas callbacks in callbacks.",
      "```javascript\nloadScript(\"/script1.js\", function (script) {\n  console.log(\"first script is loaded\");\n\n  loadScript(\"/script2.js\", function (script) {\n    console.log(\"second script is loaded\");\n\n    loadScript(\"/script3.js\", function (script) {\n      console.log(\"third script is loaded\");\n      // after all scripts are loaded\n    });\n  });\n});\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-63",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is promise chaining",
    "answer": [
      "The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise\nchaining. Let's take an example of promise chaining for calculating the final result,",
      "```javascript\nnew Promise(function (resolve, reject) {\n  setTimeout(() => resolve(1), 1000);\n})\n  .then(function (result) {\n    console.log(result); // 1\n    return result * 2;\n  })\n  .then(function (result) {\n    console.log(result); // 2\n    return result * 3;\n  })\n  .then(function (result) {\n    console.log(result); // 6\n    return result * 4;\n  });\n\n```",
      "In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,",
      "The initial promise resolves in 1 second,",
      "After that `.then` handler is called by logging the result(1) and then return a promise with the value of\nresult \\* 2.",
      "After that the value passed to the next `.then` handler by logging the result(2) and return a promise with\nresult \\* 3.",
      "Finally the value passed to the last `.then` handler by logging the result(6) and return a promise with result \\*\n4."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-64",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is promise.all",
    "answer": [
      "Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all\nthe promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,",
      "```javascript\nPromise.all([Promise1, Promise2, Promise3]) .then(result) => {   console.log(result) }) .catch(error => console.log(`Error in promises ${error}`))\n\n```",
      "**Note:** Remember that the order of the promises(output the result) is maintained as per input order."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-65",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the purpose of the race method in promise",
    "answer": [
      "Promise.race() method will return the promise instance which is firstly resolved or rejected. Let's take an example\nof race() method where promise2 is resolved first",
      "```javascript\nvar promise1 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 500, \"one\");\n});\nvar promise2 = new Promise(function (resolve, reject) {\n  setTimeout(resolve, 100, \"two\");\n});\n\nPromise.race([promise1, promise2]).then(function (value) {\n  console.log(value); // \"two\" // Both promises will resolve, but promise2 is faster\n});\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-66",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is a strict mode in javascript",
    "answer": [
      "Strict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a “strict”\noperating context. This way it prevents certain actions from being taken and throws more exceptions. The literal\nexpression `\"use strict\";` instructs the browser to use the javascript code in the Strict mode."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-67",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "Why do you need strict mode",
    "answer": [
      "Strict mode is useful to write \"secure\" JavaScript by notifying \"bad syntax\" into real errors. For example, it\neliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a\nnon-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing\nobject."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-68",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you declare strict mode",
    "answer": [
      "The strict mode is declared by adding \"use strict\"; to the beginning of a script or a function.\nIf declared at the beginning of a script, it has global scope.",
      "```javascript\n\"use strict\";\nx = 3.14; // This will cause an error because x is not declared\n\n```",
      "and if you declare inside a function, it has local scope",
      "```javascript\nx = 3.14; // This will not cause an error.\nmyFunction();\n\nfunction myFunction() {\n  \"use strict\";\n  y = 3.14; // This will cause an error\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-69",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the purpose of double exclamation",
    "answer": [
      "The double exclamation or negation(!!) ensures the resulting type is a boolean. If it was falsey (e.g. 0, null,\nundefined, etc.), it will be false, otherwise, it will be true.\nFor example, you can test IE version using this expression as below,",
      "```javascript\nlet isIE8 = false;\nisIE8 = !!navigator.userAgent.match(/MSIE 8.0/);\nconsole.log(isIE8); // returns true or false\n\n```",
      "If you don't use this expression then it returns the original value.",
      "```javascript\nconsole.log(navigator.userAgent.match(/MSIE 8.0/)); // returns either an Array or null\n\n```",
      "**Note:** The expression !! is not an operator, but it is just twice of ! operator."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-70",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the purpose of the delete operator",
    "answer": [
      "The delete keyword is used to delete the property as well as its value.",
      "```javascript\nvar user = { name: \"John\", age: 20 };\ndelete user.age;\n\nconsole.log(user); // {name: \"John\"}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-71",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is typeof operator",
    "answer": [
      "You can use the JavaScript typeof operator to find the type of a JavaScript variable. It returns the type of a\nvariable or an expression.",
      "```javascript\ntypeof \"John Abraham\"; // Returns \"string\"\ntypeof (1 + 2); // Returns \"number\"\ntypeof [1, 2, 3] // Returns \"object\" because all arrays are also objects\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-72",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is undefined property",
    "answer": [
      "The undefined property indicates that a variable has not been assigned a value, or declared but not initialized at\nall. The type of undefined value is undefined too.",
      "```javascript\nvar user; // Value is undefined, type is undefined\nconsole.log(typeof user); //undefined\n\n```",
      "Any variable can be emptied by setting the value to undefined.",
      "```javascript\nuser = undefined;\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-73",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is null value",
    "answer": [
      "The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values.\nThe type of null value is object.\nYou can empty the variable by setting the value to null.",
      "```javascript\nvar user = null;\nconsole.log(typeof user); //object\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-74",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the difference between null and undefined",
    "answer": [
      "Below are the main differences between null and undefined,",
      "| Null                                                                                            | Undefined                                                                                               |\n        | ----------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------- |\n| It is an assignment value which indicates that variable points to no object.                    | It is not an assignment value where a variable has been declared but has not yet been assigned a value. |\n| Type of null is object                                                                          | Type of undefined is undefined                                                                          |\n| The null value is a primitive value that represents the null, empty, or non-existent reference. | The undefined value is a primitive value used when a variable has not been assigned a value.            |\n| Indicates the absence of a value for a variable                                                 | Indicates absence of variable itself                                                                    |\n| Converted to zero (0) while performing primitive operations                                     | Converted to NaN while performing primitive operations                                                  |"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-75",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is eval",
    "answer": [
      "The eval() function evaluates JavaScript code represented as a string. The string can be a JavaScript expression,\nvariable, statement, or sequence of statements.",
      "```javascript\nconsole.log(eval(\"1 + 2\")); //  3\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-76",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the difference between window and document",
    "answer": [
      "Below are the main differences between window and document,",
      "| Window                                                                        | Document                                                                                      |\n        | ----------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------- |\n| It is the root level element in any web page                                  | It is the direct child of the window object. This is also known as Document Object Model(DOM) |\n| By default window object is available implicitly in the page                  | You can access it via window.document or document.                                            |\n| It has methods like alert(), confirm() and properties like document, location | It provides methods like getElementById, getElementsByTagName, createElement etc              |"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-77",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you access history in javascript",
    "answer": [
      "The window.history object contains the browser's history. You can load previous and next URLs in the history using\nback() and next() methods.",
      "```javascript\nfunction goBack() {\n  window.history.back();\n}\nfunction goForward() {\n  window.history.forward();\n}\n\n```",
      "**Note:** You can also access history without window prefix."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-78",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you detect caps lock key turned on or not",
    "answer": [
      "The `mouseEvent getModifierState()` is used to return a boolean value that indicates whether the specified modifier\nkey is activated or not. The modifiers such as CapsLock, ScrollLock and NumLock are activated when they are clicked,\nand deactivated when they are clicked again.",
      "Let's take an input element to detect the CapsLock on/off behavior with an example,",
      "```html\n<input type=\"password\" onmousedown=\"enterInput(event)\" />\n\n<p id=\"feedback\"></p>\n\n<script>\n  function enterInput(e) {\n    var flag = e.getModifierState(\"CapsLock\");\n    if (flag) {\n      document.getElementById(\"feedback\").innerHTML = \"CapsLock activated\";\n    } else {\n      document.getElementById(\"feedback\").innerHTML =\n        \"CapsLock not activated\";\n    }\n  }\n</script>\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-79",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is isNaN",
    "answer": [
      "The isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This\nfunction returns true if the value equates to NaN. Otherwise it returns false.",
      "```javascript\nisNaN(\"Hello\"); //true\nisNaN(\"100\"); //false\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-80",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are the differences between undeclared and undefined variables",
    "answer": [
      "Below are the major differences between undeclared(not defined) and undefined variables,",
      "| undeclared                                                                                  | undefined                                                                              |\n        | ------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------- |\n| These variables do not exist in a program and are not declared                              | These variables declared in the program but have not assigned any value                |\n| If you try to read the value of an undeclared variable, then a runtime error is encountered | If you try to read the value of an undefined variable, an undefined value is returned. |"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-81",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are global variables",
    "answer": [
      "Global variables are those that are available throughout the length of the code without any scope. The var keyword\nis used to declare a local variable but if you omit it then it will become global variable",
      "```javascript\nmsg = \"Hello\"; // var is missing, it becomes global variable\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-82",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are the problems with global variables",
    "answer": [
      "The problem with global variables is the conflict of variable names of local and global scope. It is also difficult\nto debug and test the code that relies on global variables."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-83",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is NaN property",
    "answer": [
      "The NaN property is a global property that represents \"Not-a-Number\" value. i.e, It indicates that a value is not a\nlegal number. It is very rare to use NaN in a program but it can be used as return value for few cases",
      "```javascript\nMath.sqrt(-1);\nparseInt(\"Hello\");\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-84",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the purpose of isFinite function",
    "answer": [
      "The isFinite() function is used to determine whether a number is a finite, legal number. It returns false if the\nvalue is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.",
      "```javascript\nisFinite(Infinity); // false\nisFinite(NaN); // false\nisFinite(-Infinity); // false\n\nisFinite(100); // true\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-85",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is an event flow",
    "answer": [
      "Event flow is the order in which event is received on the web page. When you click an element that is nested in\nvarious other elements, before your click actually reaches its destination, or target element, it must trigger the\nclick event for each of its parent elements first, starting at the top with the global window object.\nThere are two ways of event flow",
      "Top to Bottom(Event Capturing)",
      "Bottom to Top (Event Bubbling)"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-86",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is event bubbling",
    "answer": [
      "Event bubbling is a type of event propagation where the event first triggers on the innermost target element, and\nthen successively triggers on the ancestors (parents) of the target element in the same nesting hierarchy till it\nreaches the outermost DOM element."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-87",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is event capturing",
    "answer": [
      "Event capturing is a type of event propagation where the event is first captured by the outermost element, and then\nsuccessively triggers on the descendants (children) of the target element in the same nesting hierarchy till it\nreaches the innermost DOM element."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-88",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you submit a form using JavaScript",
    "answer": [
      "You can submit a form using `document.forms[0].submit()`. All the form input's information is submitted using\nonsubmit event handler",
      "```javascript\nfunction submit() {\n  document.forms[0].submit();\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-89",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you find operating system details",
    "answer": [
      "The window.navigator object contains information about the visitor's browser OS details. Some of the OS properties\nare available under platform property,",
      "```javascript\nconsole.log(navigator.platform);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-90",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the difference between document load and DOMContentLoaded events",
    "answer": [
      "The `DOMContentLoaded` event is fired when the initial HTML document has been completely loaded and parsed, without\nwaiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The load event is fired when the\nwhole page has loaded, including all dependent resources(stylesheets, images)."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-91",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the difference between native, host and user objects",
    "answer": [
      "`Native objects` are objects that are part of the JavaScript language defined by the ECMAScript specification. For\nexample, String, Math, RegExp, Object, Function etc core objects defined in the ECMAScript spec.\n`Host objects` are objects provided by the browser or runtime environment (Node). For example, window,\nXmlHttpRequest, DOM nodes etc are considered as host objects.\n`User objects` are objects defined in the javascript code. For example, User objects created for profile\ninformation."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-92",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are the tools or techniques used for debugging JavaScript code",
    "answer": [
      "You can use below tools or techniques for debugging javascript",
      "Chrome Devtools",
      "debugger statement",
      "Good old console.log statement"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-93",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are the pros and cons of promises over callbacks",
    "answer": [
      "Below are the list of pros and cons of promises over callbacks,",
      "**Pros:**",
      "It avoids callback hell which is unreadable",
      "Easy to write sequential asynchronous code with .then()",
      "Easy to write parallel asynchronous code with Promise.all()",
      "Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow\nerrors/exceptions)",
      "**Cons:**",
      "It makes little complex code",
      "You need to load a polyfill if ES6 is not supported"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-94",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the difference between an attribute and a property",
    "answer": [
      "Attributes are defined on the HTML markup whereas properties are defined on the DOM. For example, the below HTML\nelement has 2 attributes type and value,",
      "```javascript\n<input type=\"text\" value=\"Name:\">\n\n```",
      "You can retrieve the attribute value as below,",
      "```javascript\nconst input = document.querySelector(\"input\");\nconsole.log(input.getAttribute(\"value\")); // Good morning\nconsole.log(input.value); // Good morning\n\n```",
      "And after you change the value of the text field to \"Good evening\", it becomes like",
      "```javascript\nconsole.log(input.getAttribute(\"value\")); // Good evening\nconsole.log(input.value); // Good evening\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-95",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is same-origin policy",
    "answer": [
      "The same-origin policy is a policy that prevents JavaScript from making requests across domain boundaries. An origin\nis defined as a combination of URI scheme, hostname, and port number. If you enable this policy then it prevents a\nmalicious script on one page from obtaining access to sensitive data on another web page using Document Object\nModel(DOM)."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-96",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the purpose of void 0",
    "answer": [
      "Void(0) is used to prevent the page from refreshing. This will be helpful to eliminate the unwanted side-effect,\nbecause it will return the undefined primitive value. It is commonly used for HTML documents that use href=\"\nJavaScript:Void(0);\" within an `<a>` element. i.e, when you click a link, the browser loads a new page or refreshes\nthe same page. But this behavior will be prevented using this expression.\nFor example, the below link notify the message without reloading the page",
      "```javascript\n<a href=\"JavaScript:void(0);\" onclick=\"alert('Well done!')\">\n  Click Me!\n</a>\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-97",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "Is JavaScript a compiled or interpreted language",
    "answer": [
      "JavaScript is an interpreted language, not a compiled language. An interpreter in the browser reads over the\nJavaScript code, interprets each line, and runs it. Nowadays modern browsers use a technology known as\nJust-In-Time (JIT) compilation, which compiles JavaScript to executable bytecode just as it is about to run."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-98",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "Is JavaScript a case-sensitive language",
    "answer": [
      "Yes, JavaScript is a case sensitive language. The language keywords, variables, function & object names, and any\nother identifiers must always be typed with a consistent capitalization of letters."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-99",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "Is there any relation between Java and JavaScript",
    "answer": [
      "No, they are entirely two different programming languages and have nothing to do with each other. But both of them\nare Object Oriented Programming languages and like many other languages, they follow similar syntax for basic\nfeatures(if, else, for, switch, break, continue etc)."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-100",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are events",
    "answer": [
      "Events are \"things\" that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can `react` on\nthese events. Some of the examples of HTML events are,",
      "Web page has finished loading",
      "Input field was changed",
      "Button was clicked",
      "Let's describe the behavior of click event for button element,",
      "```javascript\n<!doctype html>\n<html>\n <head>\n   <script>\n     function greeting() {\n       alert('Hello! Good morning');\n     }\n   </script>\n </head>\n <body>\n   <button type=\"button\" onclick=\"greeting()\">Click me</button>\n </body>\n</html>\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-101",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "Who created javascript",
    "answer": [
      "JavaScript was created by Brendan Eich in 1995 during his time at Netscape Communications. Initially it was\ndeveloped under the name `Mocha`, but later the language was officially called `LiveScript` when it first shipped\nin beta releases of Netscape."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-102",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the use of preventDefault method",
    "answer": [
      "The preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour\nthat belongs to the event will not occur. For example, prevent form submission when clicking on submit button and\nprevent opening the page URL when clicking on hyperlink are some common use cases.",
      "```javascript\ndocument\n  .getElementById(\"link\")\n  .addEventListener(\"click\", function (event) {\n    event.preventDefault();\n  });\n\n```",
      "**Note:** Remember that not all events are cancelable."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-103",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the use of stopPropagation method",
    "answer": [
      "The stopPropagation method is used to stop the event from bubbling up the event chain. For example, the below\nnested divs with stopPropagation method prevents default event propagation when clicking on nested div(Div1)",
      "```javascript\n<p>Click DIV1 Element</p>\n<div onclick=\"secondFunc()\">DIV 2\n  <div onclick=\"firstFunc(event)\">DIV 1</div>\n</div>\n\n<script>\nfunction firstFunc(event) {\n  alert(\"DIV 1\");\n  event.stopPropagation();\n}\n\nfunction secondFunc() {\n  alert(\"DIV 2\");\n}\n</script>\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-104",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are the steps involved in return false usage",
    "answer": [
      "The return false statement in event handlers performs the below steps,",
      "First it stops the browser's default action or behaviour.",
      "It prevents the event from propagating the DOM",
      "Stops callback execution and returns immediately when called."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-105",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is BOM",
    "answer": [
      "The Browser Object Model (BOM) allows JavaScript to \"talk to\" the browser. It consists of the objects navigator,\nhistory, screen, location and document which are children of the window. The Browser Object Model is not\nstandardized and can change based on different browsers.",
      "![Screenshot](images/bom.png)"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-106",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the use of setTimeout",
    "answer": [
      "The setTimeout() method is used to call a function or evaluate an expression after a specified number of\nmilliseconds. For example, let's log a message after 2 seconds using setTimeout method,",
      "```javascript\nsetTimeout(function () {\n  console.log(\"Good morning\");\n}, 2000);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-107",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the use of setInterval",
    "answer": [
      "The setInterval() method is used to call a function or evaluate an expression at specified intervals (in\nmilliseconds). For example, let's log a message after 2 seconds using setInterval method,",
      "```javascript\nsetInterval(function () {\n  console.log(\"Good morning\");\n}, 2000);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-108",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "Why is JavaScript treated as Single threaded",
    "answer": [
      "JavaScript is a single-threaded language. Because the language specification does not allow the programmer to write\ncode so that the interpreter can run parts of it in parallel in multiple threads or processes. Whereas languages\nlike java, go, C++ can make multi-threaded and multi-process programs."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-109",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is an event delegation",
    "answer": [
      "Event delegation is a technique for listening to events where you delegate a parent element as the listener for all\nof the events that happen inside it.",
      "For example, if you wanted to detect field changes in inside a specific form, you can use event delegation\ntechnique,",
      "```javascript\nvar form = document.querySelector(\"#registration-form\");\n\n// Listen for changes to fields inside the form\nform.addEventListener(\n  \"input\",\n  function (event) {\n    // Log the field that was changed\n    console.log(event.target);\n  },\n  false\n);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-110",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is ECMAScript",
    "answer": [
      "ECMAScript is the scripting language that forms the basis of JavaScript. ECMAScript standardized by the ECMA\nInternational standards organization in the ECMA-262 and ECMA-402 specifications. The first edition of ECMAScript\nwas released in 1997."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-111",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is JSON",
    "answer": [
      "JSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a\nsubset of JavaScript language in the way objects are built in JavaScript."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-112",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are the syntax rules of JSON",
    "answer": [
      "Below are the list of syntax rules of JSON",
      "The data is in name/value pairs",
      "The data is separated by commas",
      "Curly braces hold objects",
      "Square brackets hold arrays"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-113",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the purpose JSON stringify",
    "answer": [
      "When sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON\nobject into a string using stringify() method.",
      "```javascript\nvar userJSON = { name: \"John\", age: 31 };\nvar userString = JSON.stringify(userJSON);\nconsole.log(userString); //\"{\"name\":\"John\",\"age\":31}\"\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-114",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you parse JSON string",
    "answer": [
      "When receiving the data from a web server, the data is always in a string format. But you can convert this string\nvalue to a javascript object using parse() method.",
      "```javascript\nvar userString = '{\"name\":\"John\",\"age\":31}';\nvar userJSON = JSON.parse(userString);\nconsole.log(userJSON); // {name: \"John\", age: 31}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-115",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "Why do you need JSON",
    "answer": [
      "When exchanging data between a browser and a server, the data can only be text. Since JSON is text only, it can\neasily be sent to and from a server, and used as a data format by any programming language."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-116",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are PWAs",
    "answer": [
      "Progressive web applications (PWAs) are a type of mobile app delivered through the web, built using common web\ntechnologies including HTML, CSS and JavaScript. These PWAs are deployed to servers, accessible through URLs, and\nindexed by search engines."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-117",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the purpose of clearTimeout method",
    "answer": [
      "The clearTimeout() function is used in javascript to clear the timeout which has been set by setTimeout()function\nbefore that. i.e, The return value of setTimeout() function is stored in a variable and it’s passed into the\nclearTimeout() function to clear the timer.",
      "For example, the below setTimeout method is used to display the message after 3 seconds. This timeout can be\ncleared by the clearTimeout() method.",
      "```javascript\n<script>\nvar msg;\nfunction greeting() {\n   alert('Good morning');\n}\nfunction start() {\n  msg =setTimeout(greeting, 3000);\n\n}\n\nfunction stop() {\n    clearTimeout(msg);\n}\n</script>\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-118",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is the purpose of clearInterval method",
    "answer": [
      "The clearInterval() function is used in javascript to clear the interval which has been set by setInterval()\nfunction. i.e, The return value returned by setInterval() function is stored in a variable and it’s passed into the\nclearInterval() function to clear the interval.",
      "For example, the below setInterval method is used to display the message for every 3 seconds. This interval can be\ncleared by the clearInterval() method.",
      "```javascript\n<script>\nvar msg;\nfunction greeting() {\n   alert('Good morning');\n}\nfunction start() {\n  msg = setInterval(greeting, 3000);\n\n}\n\nfunction stop() {\n    clearInterval(msg);\n}\n</script>\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-119",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you redirect new page in javascript",
    "answer": [
      "In vanilla javascript, you can redirect to a new page using the `location` property of window object. The syntax\nwould be as follows,",
      "```javascript\nfunction redirect() {\n  window.location.href = \"newPage.html\";\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-120",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you check whether a string contains a substring",
    "answer": [
      "There are 3 possible ways to check whether a string contains a substring or not,",
      "**Using includes:** ES6 provided `String.prototype.includes` method to test a string contains a substring",
      "```javascript\nvar mainString = \"hello\",\n  subString = \"hell\";\nmainString.includes(subString);\n\n```",
      "**Using indexOf:** In an ES5 or older environment, you can use `String.prototype.indexOf` which returns the index of\na substring. If the index value is not equal to -1 then it means the substring exists in the main string.",
      "```javascript\nvar mainString = \"hello\",\n  subString = \"hell\";\nmainString.indexOf(subString) !== -1;\n\n```",
      "**Using RegEx:** The advanced solution is using Regular expression's test method(`RegExp.test`), which allows for\ntesting for against regular expressions",
      "```javascript\nvar mainString = \"hello\",\n  regex = /hell/;\nregex.test(mainString);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-121",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you validate an email in javascript",
    "answer": [
      "You can validate an email in javascript using regular expressions. It is recommended to do validations on the\nserver side instead of the client side. Because the javascript can be disabled on the client side.",
      "```javascript\nfunction validateEmail(email) {\n  var re =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\n```",
      "The above regular expression accepts unicode characters."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-122",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you get the current url with javascript",
    "answer": [
      "You can use `window.location.href` expression to get the current url path and you can use the same expression for\nupdating the URL too. You can also use `document.URL` for read-only purposes but this solution has issues in FF.",
      "```javascript\nconsole.log(\"location.href\", window.location.href); // Returns full URL\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-123",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What are the various url properties of location object",
    "answer": [
      "The below `Location` object properties can be used to access URL components of the page,",
      "href - The entire URL",
      "protocol - The protocol of the URL",
      "host - The hostname and port of the URL",
      "hostname - The hostname of the URL",
      "port - The port number in the URL",
      "pathname - The path name of the URL",
      "search - The query portion of the URL",
      "hash - The anchor portion of the URL"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-124",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do get query string values in javascript",
    "answer": [
      "You can use URLSearchParams to get query string values in javascript. Let's see an example to get the client code\nvalue from URL query string,",
      "```javascript\nconst urlParams = new URLSearchParams(window.location.search);\nconst clientCode = urlParams.get(\"clientCode\");\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-125",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you check if a key exists in an object",
    "answer": [
      "You can check whether a key exists in an object or not using three approaches,",
      "**Using in operator:** You can use the in operator whether a key exists in an object or not",
      "```javascript\n\"key\" in obj;\n\n```",
      "and If you want to check if a key doesn't exist, remember to use parenthesis,",
      "```javascript\n!(\"key\" in obj);\n\n```",
      "**Using hasOwnProperty method:** You can use `hasOwnProperty` to particularly test for properties of the object\ninstance (and not inherited properties)",
      "```javascript\nobj.hasOwnProperty(\"key\"); // true\n\n```",
      "**Using undefined comparison:** If you access a non-existing property from an object, the result is undefined. Let’s\ncompare the properties against undefined to determine the existence of the property.",
      "```javascript\nconst user = {\n  name: \"John\",\n};\n\nconsole.log(user.name !== undefined); // true\nconsole.log(user.nickName !== undefined); // false\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-126",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you loop through or enumerate javascript object",
    "answer": [
      "You can use the `for-in` loop to loop through javascript object. You can also make sure that the key you get is an\nactual property of an object, and doesn't come from the prototype using `hasOwnProperty` method.",
      "```javascript\nvar object = {\n  k1: \"value1\",\n  k2: \"value2\",\n  k3: \"value3\",\n};\n\nfor (var key in object) {\n  if (object.hasOwnProperty(key)) {\n    console.log(key + \" -> \" + object[key]); // k1 -> value1 ...\n  }\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-127",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "How do you test for an empty object",
    "answer": [
      "There are different solutions based on ECMAScript versions",
      "**Using Object entries(ECMA 7+):** You can use object entries length along with constructor type.",
      "```javascript\nObject.entries(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as well\n\n```",
      "**Using Object keys(ECMA 5+):** You can use object keys length along with constructor type.",
      "```javascript\nObject.keys(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as well\n\n```",
      "**Using for-in with hasOwnProperty(Pre-ECMA 5):** You can use a for-in loop along with hasOwnProperty.",
      "```javascript\nfunction isEmpty(obj) {\n  for (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n\n  return JSON.stringify(obj) === JSON.stringify({});\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415538-128",
    "date": "2023-04-12T12:26:55.538Z",
    "question": "What is an arguments object",
    "answer": [
      "The arguments object is an Array-like object accessible inside functions that contains the values of the arguments\npassed to that function. For example, let's see how to use arguments object inside sum function,",
      "```javascript\nfunction sum() {\n  var total = 0;\n  for (var i = 0, len = arguments.length; i < len; ++i) {\n    total += arguments[i];\n  }\n  return total;\n}\n\nsum(1, 2, 3); // returns 6\n\n```",
      "**Note:** You can't apply array methods on arguments object. But you can convert into a regular array as below.",
      "```javascript\nvar argsArray = Array.prototype.slice.call(arguments);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-129",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you make first letter of the string in an uppercase",
    "answer": [
      "You can create a function which uses a chain of string methods such as charAt, toUpperCase and slice methods to\ngenerate a string with the first letter in uppercase.",
      "```javascript\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-130",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are the pros and cons of for loop",
    "answer": [
      "The for-loop is a commonly used iteration syntax in javascript. It has both pros and cons",
      "Pros",
      "Works on every environment",
      "You can use break and continue flow control statements",
      "Cons",
      "Too verbose",
      "Imperative",
      "You might face one-by-off errors"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-131",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you display the current date in javascript",
    "answer": [
      "You can use `new Date()` to generate a new Date object containing the current date and time. For example, let's\ndisplay the current date in mm/dd/yyyy",
      "```javascript\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, \"0\");\nvar mm = String(today.getMonth() + 1).padStart(2, \"0\"); //January is 0!\nvar yyyy = today.getFullYear();\n\ntoday = mm + \"/\" + dd + \"/\" + yyyy;\ndocument.write(today);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-132",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you compare two date objects",
    "answer": [
      "You need to use date.getTime() method to compare date values instead of comparison operators (==, !=, ===, and !==\noperators)",
      "```javascript\nvar d1 = new Date();\nvar d2 = new Date(d1);\nconsole.log(d1.getTime() === d2.getTime()); //True\nconsole.log(d1 === d2); // False\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-133",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you check if a string starts with another string",
    "answer": [
      "You can use ECMAScript 6's `String.prototype.startsWith()` method to check if a string starts with another string\nor not. But it is not yet supported in all browsers. Let's see an example to see this usage,",
      "```javascript\n\"Good morning\".startsWith(\"Good\"); // true\n\"Good morning\".startsWith(\"morning\"); // false\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-134",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you trim a string in javascript",
    "answer": [
      "JavaScript provided a trim method on string types to trim any whitespaces present at the beginning or ending of the\nstring.",
      "```javascript\n\"  Hello World   \".trim(); //Hello World\n\n```",
      "If your browser(<IE9) doesn't support this method then you can use below polyfill.",
      "```javascript\nif (!String.prototype.trim) {\n  (function () {\n    // Make sure we trim BOM and NBSP\n    var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n    String.prototype.trim = function () {\n      return this.replace(rtrim, \"\");\n    };\n  })();\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-135",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you add a key value pair in javascript",
    "answer": [
      "There are two possible solutions to add new properties to an object. Let's take a simple object to explain these\nsolutions.",
      "```javascript\nvar object = {\n  key1: value1,\n  key2: value2,\n};\n\n```",
      "**Using dot notation:** This solution is useful when you know the name of the property",
      "```javascript\nobject.key3 = \"value3\";\n\n```",
      "**Using square bracket notation:** This solution is useful when the name of the property is dynamically determined.",
      "```javascript\nobj[\"key3\"] = \"value3\";\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-136",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "Is the !-- notation represents a special operator",
    "answer": [
      "No,that's not a special operator. But it is a combination of 2 standard operators one after the other,",
      "A logical not (!)",
      "A prefix decrement (--)",
      "At first, the value decremented by one and then tested to see if it is equal to zero or not for determining the\ntruthy/falsy value."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-137",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you assign default values to variables",
    "answer": [
      "You can use the logical or operator `||` in an assignment expression to provide a default value. The syntax looks\nlike as below,",
      "```javascript\nvar a = b || c;\n\n```",
      "As per the above expression, variable 'a 'will get the value of 'c' only if 'b' is falsy (if is null, false,\nundefined, 0, empty string, or NaN), otherwise 'a' will get the value of 'b'."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-138",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you define multiline strings",
    "answer": [
      "You can define multiline string literals using the '\\\\' character followed by line terminator.",
      "```javascript\nvar str =\n  \"This is a \\\nvery lengthy \\\nsentence!\";\n\n```",
      "But if you have a space after the '\\\\' character, the code will look exactly the same, but it will raise a\nSyntaxError."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-139",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is an app shell model",
    "answer": [
      "An application shell (or app shell) architecture is one way to build a Progressive Web App that reliably and\ninstantly loads on your users' screens, similar to what you see in native applications. It is useful for getting\nsome initial HTML to the screen fast without a network."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-140",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "Can we define properties for functions",
    "answer": [
      "Yes, We can define properties for functions because functions are also objects.",
      "```javascript\nfn = function (x) {\n  //Function code goes here\n};\n\nfn.name = \"John\";\n\nfn.profile = function (y) {\n  //Profile code goes here\n};\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-141",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is the way to find the number of parameters expected by a function",
    "answer": [
      "You can use `function.length` syntax to find the number of parameters expected by a function. Let's take an example\nof `sum` function to calculate the sum of numbers,",
      "```javascript\nfunction sum(num1, num2, num3, num4) {\n  return num1 + num2 + num3 + num4;\n}\nsum.length; // 4 is the number of parameters expected.\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-142",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is a polyfill",
    "answer": [
      "A polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively\nsupport it. For example, Silverlight plugin polyfill can be used to mimic the functionality of an HTML Canvas\nelement on Microsoft Internet Explorer 7."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-143",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are break and continue statements",
    "answer": [
      "The break statement is used to \"jump out\" of a loop. i.e, It breaks the loop and continues executing the code after\nthe loop.",
      "```javascript\nfor (i = 0; i < 10; i++) {\n  if (i === 5) {\n    break;\n  }\n  text += \"Number: \" + i + \"<br>\";\n}\n\n```",
      "The continue statement is used to \"jump over\" one iteration in the loop. i.e, It breaks one iteration (in the\nloop), if a specified condition occurs, and continues with the next iteration in the loop.",
      "```javascript\nfor (i = 0; i < 10; i++) {\n  if (i === 5) {\n    continue;\n  }\n  text += \"Number: \" + i + \"<br>\";\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-144",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are js labels",
    "answer": [
      "The label statement allows us to name loops and blocks in JavaScript. We can then use these labels to refer back to\nthe code later. For example, the below code with labels avoids printing the numbers when they are same,",
      "```javascript\nvar i, j;\n\nloop1: for (i = 0; i < 3; i++) {\n  loop2: for (j = 0; j < 3; j++) {\n    if (i === j) {\n      continue loop1;\n    }\n    console.log(\"i = \" + i + \", j = \" + j);\n  }\n}\n\n// Output is:\n//   \"i = 1, j = 0\"\n//   \"i = 2, j = 0\"\n//   \"i = 2, j = 1\"\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-145",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are the benefits of keeping declarations at the top",
    "answer": [
      "It is recommended to keep all declarations at the top of each script or function. The benefits of doing this are,",
      "Gives cleaner code",
      "It provides a single place to look for local variables",
      "Easy to avoid unwanted global variables",
      "It reduces the possibility of unwanted re-declarations"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-146",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are the benefits of initializing variables",
    "answer": [
      "It is recommended to initialize variables because of the below benefits,",
      "It gives cleaner code",
      "It provides a single place to initialize variables",
      "Avoid undefined values in the code"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-147",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are the recommendations to create new object",
    "answer": [
      "It is recommended to avoid creating new objects using `new Object()`. Instead you can initialize values based on\nit's type to create the objects.",
      "Assign {} instead of new Object()",
      "Assign \"\" instead of new String()",
      "Assign 0 instead of new Number()",
      "Assign false instead of new Boolean()",
      "Assign [] instead of new Array()",
      "Assign /()/ instead of new RegExp()",
      "Assign function (){} instead of new Function()",
      "You can define them as an example,",
      "```javascript\nvar v1 = {};\nvar v2 = \"\";\nvar v3 = 0;\nvar v4 = false;\nvar v5 = [];\nvar v6 = /()/;\nvar v7 = function () {};\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-148",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you define JSON arrays",
    "answer": [
      "JSON arrays are written inside square brackets and arrays contain javascript objects. For example, the JSON array\nof users would be as below,",
      "```javascript\n\"users\":[\n  {\"firstName\":\"John\", \"lastName\":\"Abrahm\"},\n  {\"firstName\":\"Anna\", \"lastName\":\"Smith\"},\n  {\"firstName\":\"Shane\", \"lastName\":\"Warn\"}\n]\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-149",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you generate random integers",
    "answer": [
      "You can use Math.random() with Math.floor() to return random integers. For example, if you want generate random\nintegers between 1 to 10, the multiplication factor should be 10,",
      "```javascript\nMath.floor(Math.random() * 10) + 1; // returns a random integer from 1 to 10\nMath.floor(Math.random() * 100) + 1; // returns a random integer from 1 to 100\n\n```",
      "**Note:** Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-150",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "Can you write a random integers function to print integers with in a range",
    "answer": [
      "Yes, you can create a proper random function to return a random number between min and max (both included)",
      "```javascript\nfunction randomInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nrandomInteger(1, 100); // returns a random integer from 1 to 100\nrandomInteger(1, 1000); // returns a random integer from 1 to 1000\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-151",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is tree shaking",
    "answer": [
      "Tree shaking is a form of dead code elimination. It means that unused modules will not be included in the bundle\nduring the build process and for that it relies on the static structure of ES2015 module syntax,( i.e. import and\nexport). Initially this has been popularized by the ES2015 module bundler `rollup`."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-152",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is the need of tree shaking",
    "answer": [
      "Tree Shaking can significantly reduce the code size in any application. i.e, The less code we send over the wire\nthe more performant the application will be. For example, if we just want to create a “Hello World” Application\nusing SPA frameworks then it will take around a few MBs, but by tree shaking it can bring down the size to just a\nfew hundred KBs. Tree shaking is implemented in Rollup and Webpack bundlers."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-153",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "Is it recommended to use eval",
    "answer": [
      "No, it allows arbitrary code to be run which causes a security problem. As we know that the eval() function is used\nto run text as code. In most of the cases, it should not be necessary to use it."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-154",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is a Regular Expression",
    "answer": [
      "A regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for\nsearching data in a text. These can be used to perform all types of text search and text replace operations. Let's\nsee the syntax format now,",
      "```javascript\n/pattern/modifiers;\n\n```",
      "For example, the regular expression or search pattern with case-insensitive username would be,",
      "```javascript\n/John/i;\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-155",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are the string methods available in Regular expression",
    "answer": [
      "Regular Expressions has two string methods: search() and replace().\nThe search() method uses an expression to search for a match, and returns the position of the match.",
      "```javascript\nvar msg = \"Hello John\";\nvar n = msg.search(/John/i); // 6\n\n```",
      "The replace() method is used to return a modified string where the pattern is replaced.",
      "```javascript\nvar msg = \"Hello John\";\nvar n = msg.replace(/John/i, \"Buttler\"); // Hello Buttler\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-156",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are modifiers in regular expression",
    "answer": [
      "Modifiers can be used to perform case-insensitive and global searches. Let's list down some of the modifiers,",
      "| Modifier | Description                                             |\n          | -------- | ------------------------------------------------------- |\n| i        | Perform case-insensitive matching                       |\n| g        | Perform a global match rather than stops at first match |\n| m        | Perform multiline matching                              |",
      "Let's take an example of global modifier,",
      "```javascript\nvar text = \"Learn JS one by one\";\nvar pattern = /one/g;\nvar result = text.match(pattern); // one,one\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-157",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are regular expression patterns",
    "answer": [
      "Regular Expressions provide a group of patterns in order to match characters. Basically they are categorized into 3\ntypes,",
      "**Brackets:** These are used to find a range of characters.\nFor example, below are some use cases,",
      "[abc]: Used to find any of the characters between the brackets(a,b,c)",
      "[0-9]: Used to find any of the digits between the brackets",
      "(a|b): Used to find any of the alternatives separated with |",
      "**Metacharacters:** These are characters with a special meaning\nFor example, below are some use cases,",
      "\\\\d: Used to find a digit",
      "\\\\s: Used to find a whitespace character",
      "\\\\b: Used to find a match at the beginning or ending of a word",
      "**Quantifiers:** These are useful to define quantities\nFor example, below are some use cases,",
      "n+: Used to find matches for any string that contains at least one n",
      "n\\*: Used to find matches for any string that contains zero or more occurrences of n",
      "n?: Used to find matches for any string that contains zero or one occurrences of n"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-158",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is a RegExp object",
    "answer": [
      "RegExp object is a regular expression object with predefined properties and methods. Let's see the simple usage of\nRegExp object,",
      "```javascript\nvar regexp = new RegExp(\"\\\\w+\");\nconsole.log(regexp);\n// expected output: /\\w+/\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-159",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you search a string for a pattern",
    "answer": [
      "You can use the test() method of regular expression in order to search a string for a pattern, and return true or\nfalse depending on the result.",
      "```javascript\nvar pattern = /you/;\nconsole.log(pattern.test(\"How are you?\")); //true\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-160",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is the purpose of exec method",
    "answer": [
      "The purpose of exec method is similar to test method but it executes a search for a match in a specified string and\nreturns a result array, or null instead of returning true/false.",
      "```javascript\nvar pattern = /you/;\nconsole.log(pattern.exec(\"How are you?\")); //[\"you\", index: 8, input: \"How are you?\", groups: undefined]\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-161",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you change the style of a HTML element",
    "answer": [
      "You can change inline style or classname of a HTML element using javascript",
      "**Using style property:** You can modify inline style using style property",
      "```javascript\ndocument.getElementById(\"title\").style.fontSize = \"30px\";\n\n```",
      "**Using ClassName property:** It is easy to modify element class using className property",
      "```javascript\ndocument.getElementById(\"title\").className = \"custom-title\";\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-162",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What would be the result of 1+2+'3'",
    "answer": [
      "The output is going to be `33`. Since `1` and `2` are numeric values, the result of the first two digits is going\nto be a numeric value `3`. The next digit is a string type value because of that the addition of numeric value `3`\nand string type value `3` is just going to be a concatenation value `33`."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-163",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is a debugger statement",
    "answer": [
      "The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging\nfunctionality is available, this statement has no effect.\nFor example, in the below function a debugger statement has been inserted. So\nexecution is paused at the debugger statement just like a breakpoint in the script source.",
      "```javascript\nfunction getProfile() {\n  // code goes here\n  debugger;\n  // code goes here\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-164",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is the purpose of breakpoints in debugging",
    "answer": [
      "You can set breakpoints in the javascript code once the debugger statement is executed and the debugger window pops\nup. At each breakpoint, javascript will stop executing, and let you examine the JavaScript values. After examining\nvalues, you can resume the execution of code using the play button."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-165",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "Can I use reserved words as identifiers",
    "answer": [
      "No, you cannot use the reserved words as variables, labels, object or function names. Let's see one simple example,",
      "```javascript\nvar else = \"hello\"; // Uncaught SyntaxError: Unexpected token else\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-166",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you detect a mobile browser",
    "answer": [
      "You can use regex which returns a true or false value depending on whether or not the user is browsing with a\nmobile.",
      "```javascript\nwindow.mobilecheck = function () {\n  var mobileCheck = false;\n  (function (a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      mobileCheck = true;\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return mobileCheck;\n};\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-167",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you detect a mobile browser without regexp",
    "answer": [
      "You can detect mobile browsers by simply running through a list of devices and checking if the useragent matches\nanything. This is an alternative solution for RegExp usage,",
      "```javascript\nfunction detectmob() {\n  if (\n    navigator.userAgent.match(/Android/i) ||\n    navigator.userAgent.match(/webOS/i) ||\n    navigator.userAgent.match(/iPhone/i) ||\n    navigator.userAgent.match(/iPad/i) ||\n    navigator.userAgent.match(/iPod/i) ||\n    navigator.userAgent.match(/BlackBerry/i) ||\n    navigator.userAgent.match(/Windows Phone/i)\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-168",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you get the image width and height using JS",
    "answer": [
      "You can programmatically get the image and check the dimensions(width and height) using Javascript.",
      "```javascript\nvar img = new Image();\nimg.onload = function () {\n  console.log(this.width + \"x\" + this.height);\n};\nimg.src = \"http://www.google.com/intl/en_ALL/images/logo.gif\";\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-169",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you make synchronous HTTP request",
    "answer": [
      "Browsers provide an XMLHttpRequest object which can be used to make synchronous HTTP requests from JavaScript",
      "```javascript\nfunction httpGet(theUrl) {\n  var xmlHttpReq = new XMLHttpRequest();\n  xmlHttpReq.open(\"GET\", theUrl, false); // false for synchronous request\n  xmlHttpReq.send(null);\n  return xmlHttpReq.responseText;\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-170",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you make asynchronous HTTP request",
    "answer": [
      "Browsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by\npassing the 3rd parameter as true.",
      "```javascript\nfunction httpGetAsync(theUrl, callback) {\n  var xmlHttpReq = new XMLHttpRequest();\n  xmlHttpReq.onreadystatechange = function () {\n    if (xmlHttpReq.readyState == 4 && xmlHttpReq.status == 200)\n      callback(xmlHttpReq.responseText);\n  };\n  xmlHttp.open(\"GET\", theUrl, true); // true for asynchronous\n  xmlHttp.send(null);\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-171",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you convert date to another timezone in javascript",
    "answer": [
      "You can use the toLocaleString() method to convert dates in one timezone to another. For example, let's convert\ncurrent date to British English timezone as below,",
      "```javascript\nconsole.log(event.toLocaleString(\"en-GB\", { timeZone: \"UTC\" })); //29/06/2019, 09:56:00\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-172",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are the properties used to get size of window",
    "answer": [
      "You can use innerWidth, innerHeight, clientWidth, clientHeight properties of windows, document element and document\nbody objects to find the size of a window. Let's use them combination of these properties to calculate the size of\na window or document,",
      "```javascript\nvar width =\n  window.innerWidth ||\n  document.documentElement.clientWidth ||\n  document.body.clientWidth;\n\nvar height =\n  window.innerHeight ||\n  document.documentElement.clientHeight ||\n  document.body.clientHeight;\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-173",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is a conditional operator in javascript",
    "answer": [
      "The conditional (ternary) operator is the only JavaScript operator that takes three operands which acts as a\nshortcut for if statements.",
      "```javascript\nvar isAuthenticated = false;\nconsole.log(\n  isAuthenticated ? \"Hello, welcome\" : \"Sorry, you are not authenticated\"\n); //Sorry, you are not authenticated\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-174",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "Can you apply chaining on conditional operator",
    "answer": [
      "Yes, you can apply chaining on conditional operators similar to if … else if … else if … else chain. The syntax is\ngoing to be as below,",
      "```javascript\nfunction traceValue(someParam) {\n  return condition1\n    ? value1\n    : condition2\n    ? value2\n    : condition3\n    ? value3\n    : value4;\n}\n\n// The above conditional operator is equivalent to:\n\nfunction traceValue(someParam) {\n  if (condition1) {\n    return value1;\n  } else if (condition2) {\n    return value2;\n  } else if (condition3) {\n    return value3;\n  } else {\n    return value4;\n  }\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-175",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are the ways to execute javascript after page load",
    "answer": [
      "You can execute javascript after page load in many different ways,",
      "**window.onload:**",
      "```javascript\nwindow.onload = function ...\n\n```",
      "**document.onload:**",
      "```javascript\ndocument.onload = function ...\n\n```",
      "**body onload:**",
      "```javascript\n<body onload=\"script();\">\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-176",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is the difference between proto and prototype",
    "answer": [
      "The `__proto__` object is the actual object that is used in the lookup chain to resolve methods, etc.\nWhereas `prototype` is the object that is used to build `__proto__` when you create an object with new.",
      "```javascript\nnew Employee().__proto__ === Employee.prototype;\nnew Employee().prototype === undefined;\n\n```",
      "There are few more differences,",
      "| feature             | Prototype                            | proto                                      |\n          | ------------------- | ------------------------------------- | ----------------------------------------------- |\n| Access   | All the function constructors have prototype properties.  |   All the objects have \\_\\_proto__ property                      |\n| Purpose      | Used to reduce memory wastage with a single copy of function               | Used in lookup chain to resolve methods, constructors etc.                        |\n| ECMAScript      | Introduced in ES6               | Introduced in ES5                          |\n| Usage             | Frequently used                             | Rarely used                                 |"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-177",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "Give an example where do you really need semicolon",
    "answer": [
      "It is recommended to use semicolons after every statement in JavaScript. For example, in the below case it throws\nan error \".. is not a function\" at runtime due to missing semicolon.",
      "```javascript\n// define a function\nvar fn = (function () {\n  //...\n})(\n  // semicolon missing at this line\n\n  // then execute some code inside a closure\n  function () {\n    //...\n  }\n)();\n\n```",
      "and it will be interpreted as",
      "```javascript\nvar fn = (function () {\n  //...\n})(function () {\n  //...\n})();\n\n```",
      "In this case, we are passing the second function as an argument to the first function and then trying to call the\nresult of the first function call as a function. Hence, the second function will fail with a \"... is not a\nfunction\" error at runtime."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-178",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is a freeze method",
    "answer": [
      "The **freeze()** method is used to freeze an object. Freezing an object does not allow adding new properties to an\nobject,prevents from removing and prevents changing the enumerability, configurability, or writability of existing\nproperties. i.e, It returns the passed object and does not create a frozen copy.",
      "```javascript\nconst obj = {\n  prop: 100,\n};\n\nObject.freeze(obj);\nobj.prop = 200; // Throws an error in strict mode\n\nconsole.log(obj.prop); //100\n\n```",
      "Remember freezing is only applied to the top-level properties in objects but not for nested objects.\nFor example, let's try to freeze user object which has employment details as nested object and observe that details\nhave been changed.",
      "```javascript\nconst user = {\n  name: 'John',\n  employment: {\n    department: 'IT'\n  }\n};\n\nObject.freeze(user);\nuser.employment.department = 'HR';\n\n```",
      "**Note:** It causes a TypeError if the argument passed is not an object."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-179",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is the purpose of freeze method",
    "answer": [
      "Below are the main benefits of using freeze method,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-180",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "Why do I need to use freeze method",
    "answer": [
      "In the Object-oriented paradigm, an existing API contains certain elements that are not intended to be extended,\nmodified, or re-used outside of their current context. Hence it works as the `final` keyword which is used in\nvarious languages."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-181",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you detect a browser language preference",
    "answer": [
      "You can use navigator object to detect a browser language preference as below,",
      "```javascript\nvar language =\n  (navigator.languages && navigator.languages[0]) || // Chrome / Firefox\n  navigator.language || // All browsers\n  navigator.userLanguage; // IE <= 10\n\nconsole.log(language);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-182",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How to convert string to title case with javascript",
    "answer": [
      "Title case means that the first letter of each word is capitalized. You can convert a string to title case using\nthe below function,",
      "```javascript\nfunction toTitleCase(str) {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();\n  });\n}\ntoTitleCase(\"good morning john\"); // Good Morning John\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-183",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "How do you detect javascript disabled in the page",
    "answer": [
      "You can use the `<noscript>` tag to detect javascript disabled or not. The code block inside `<noscript>` gets\nexecuted when JavaScript is disabled, and is typically used to display alternative content when the page generated\nin JavaScript.",
      "```javascript\n<script type=\"javascript\">\n    // JS related code goes here\n</script>\n<noscript>\n    <a href=\"next_page.html?noJS=true\">JavaScript is disabled in the page. Please click Next Page</a>\n</noscript>\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-184",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What are various operators supported by javascript",
    "answer": [
      "An operator is capable of manipulating(mathematical and logical computations) a certain value or operand. There are\nvarious operators supported by JavaScript as below,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415539-185",
    "date": "2023-04-12T12:26:55.539Z",
    "question": "What is a rest parameter",
    "answer": [
      "Rest parameter is an improved way to handle function parameters which allows us to represent an indefinite number\nof arguments as an array. The syntax would be as below,",
      "```javascript\nfunction f(a, b, ...theArgs) {\n  // ...\n}\n\n```",
      "For example, let's take a sum example to calculate on dynamic number of parameters,",
      "```javascript\nfunction total(…args){\nlet sum = 0;\nfor(let i of args){\nsum+=i;\n}\nreturn sum;\n}\nconsole.log(fun(1,2)); //3\nconsole.log(fun(1,2,3)); //6\nconsole.log(fun(1,2,3,4)); //13\nconsole.log(fun(1,2,3,4,5)); //15\n\n```",
      "**Note:** Rest parameter is added in ES2015 or ES6"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-186",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What happens if you do not use rest parameter as a last argument",
    "answer": [
      "The rest parameter should be the last argument, as its job is to collect all the remaining arguments into an array.\nFor example, if you define a function like below it doesn’t make any sense and will throw an error.",
      "```javascript\nfunction someFunc(a,…b,c){\n//You code goes here\nreturn;\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-187",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the bitwise operators available in javascript",
    "answer": [
      "Below are the list of bitwise logical operators used in JavaScript"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-188",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is a spread operator",
    "answer": [
      "Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. Let's\ntake an example to see this behavior,",
      "```javascript\nfunction calculateSum(x, y, z) {\n  return x + y + z;\n}\n\nconst numbers = [1, 2, 3];\n\nconsole.log(calculateSum(...numbers)); // 6\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-189",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you determine whether object is frozen or not",
    "answer": [
      "Object.isFrozen() method is used to determine if an object is frozen or not.An object is frozen if all of the below\nconditions hold true,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-190",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you determine two values same or not using object",
    "answer": [
      "The Object.is() method determines whether two values are the same value. For example, the usage with different\ntypes of values would be,",
      "```javascript\nObject.is(\"hello\", \"hello\"); // true\nObject.is(window, window); // true\nObject.is([], []); // false\n\n```",
      "Two values are the same if one of the following holds:"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-191",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is the purpose of using object is method",
    "answer": [
      "Some of the applications of Object's `is` method are follows,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-192",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you copy properties from one object to other",
    "answer": [
      "You can use the Object.assign() method which is used to copy the values and properties from one or more source\nobjects to a target object. It returns the target object which has properties and values copied from the source\nobjects. The syntax would be as below,",
      "```javascript\nObject.assign(target, ...sources);\n\n```",
      "Let's take example with one source and one target object,",
      "```javascript\nconst target = { a: 1, b: 2 };\nconst source = { b: 3, c: 4 };\n\nconst returnedTarget = Object.assign(target, source);\n\nconsole.log(target); // { a: 1, b: 3, c: 4 }\n\nconsole.log(returnedTarget); // { a: 1, b: 3, c: 4 }\n\n```",
      "As observed in the above code, there is a common property(`b`) from source to target so it's value has been\noverwritten."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-193",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the applications of assign method",
    "answer": [
      "Below are the some of main applications of Object.assign() method,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-194",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is a proxy object",
    "answer": [
      "The Proxy object is used to define custom behavior for fundamental operations such as property lookup, assignment,\nenumeration, function invocation, etc. The syntax would be as follows,",
      "```javascript\nvar p = new Proxy(target, handler);\n\n```",
      "Let's take an example of proxy object,",
      "```javascript\nvar handler = {\n  get: function (obj, prop) {\n    return prop in obj ? obj[prop] : 100;\n  },\n};\n\nvar p = new Proxy({}, handler);\np.a = 10;\np.b = null;\n\nconsole.log(p.a, p.b); // 10, null\nconsole.log(\"c\" in p, p.c); // false, 100\n\n```",
      "In the above code, it uses `get` handler which define the behavior of the proxy when an operation is performed on\nit"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-195",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is the purpose of seal method",
    "answer": [
      "The **Object.seal()** method is used to seal an object, by preventing new properties from being added to it and\nmarking all existing properties as non-configurable. But values of present properties can still be changed as long\nas they are writable. Let's see the below example to understand more about seal() method",
      "```javascript\nconst object = {\n  property: \"Welcome JS world\",\n};\nObject.seal(object);\nobject.property = \"Welcome to object world\";\nconsole.log(Object.isSealed(object)); // true\ndelete object.property; // You cannot delete when sealed\nconsole.log(object.property); //Welcome to object world\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-196",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the applications of seal method",
    "answer": [
      "Below are the main applications of Object.seal() method,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-197",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the differences between freeze and seal methods",
    "answer": [
      "If an object is frozen using the Object.freeze() method then its properties become immutable and no changes can be\nmade in them whereas if an object is sealed using the Object.seal() method then the changes can be made in the\nexisting properties of the object."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-198",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you determine if an object is sealed or not",
    "answer": [
      "The Object.isSealed() method is used to determine if an object is sealed or not. An object is sealed if all of the\nbelow conditions hold true"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-199",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you get enumerable key and value pairs",
    "answer": [
      "The Object.entries() method is used to return an array of a given object's own enumerable string-keyed\nproperty [key, value] pairs, in the same order as that provided by a for...in loop. Let's see the functionality of\nobject.entries() method in an example,",
      "```javascript\nconst object = {\n  a: \"Good morning\",\n  b: 100,\n};\n\nfor (let [key, value] of Object.entries(object)) {\n  console.log(`${key}: ${value}`); // a: 'Good morning'\n  // b: 100\n}\n\n```",
      "**Note:** The order is not guaranteed as object defined."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-200",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is the main difference between Object.values and Object.entries method",
    "answer": [
      "The Object.values() method's behavior is similar to Object.entries() method but it returns an array of values\ninstead [key,value] pairs.",
      "```javascript\nconst object = {\n  a: \"Good morning\",\n  b: 100,\n};\n\nfor (let value of Object.values(object)) {\n  console.log(`${value}`); // 'Good morning'\n  100;\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-201",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How can you get the list of keys of any object",
    "answer": [
      "You can use the `Object.keys()` method which is used to return an array of a given object's own property names, in\nthe same order as we get with a normal loop. For example, you can get the keys of a user object,",
      "```javascript\nconst user = {\n  name: \"John\",\n  gender: \"male\",\n  age: 40,\n};\n\nconsole.log(Object.keys(user)); //['name', 'gender', 'age']\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-202",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you create an object with prototype",
    "answer": [
      "The Object.create() method is used to create a new object with the specified prototype object and properties. i.e,\nIt uses an existing object as the prototype of the newly created object. It returns a new object with the specified\nprototype object and properties.",
      "```javascript\nconst user = {\n  name: \"John\",\n  printInfo: function () {\n    console.log(`My name is ${this.name}.`);\n  },\n};\n\nconst admin = Object.create(user);\n\nadmin.name = \"Nick\"; // Remember that \"name\" is a property set on \"admin\" but not on \"user\" object\n\nadmin.printInfo(); // My name is Nick\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-203",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is a WeakSet",
    "answer": [
      "WeakSet is used to store a collection of weakly(weak references) held objects. The syntax would be as follows,",
      "```javascript\nnew WeakSet([iterable]);\n\n```",
      "Let's see the below example to explain it's behavior,",
      "```javascript\nvar ws = new WeakSet();\nvar user = {};\nws.add(user);\nws.has(user); // true\nws.delete(user); // removes user from the set\nws.has(user); // false, user has been removed\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-204",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the differences between WeakSet and Set",
    "answer": [
      "The main difference is that references to objects in Set are strong while references to objects in WeakSet are\nweak. i.e, An object in WeakSet can be garbage collected if there is no other reference to it.\nOther differences are,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-205",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "List down the collection of methods available on WeakSet",
    "answer": [
      "Below are the list of methods available on WeakSet,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-206",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is a WeakMap",
    "answer": [
      "The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. In this case, keys\nmust be objects and the values can be arbitrary values. The syntax is looking like as below,",
      "```javascript\nnew WeakMap([iterable]);\n\n```",
      "Let's see the below example to explain it's behavior,",
      "```javascript\nvar ws = new WeakMap();\nvar user = {};\nws.set(user);\nws.has(user); // true\nws.delete(user); // removes user from the map\nws.has(user); // false, user has been removed\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-207",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the differences between WeakMap and Map",
    "answer": [
      "The main difference is that references to key objects in Map are strong while references to key objects in WeakMap\nare weak. i.e, A key object in WeakMap can be garbage collected if there is no other reference to it.\nOther differences are,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-208",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "List down the collection of methods available on WeakMap",
    "answer": [
      "Below are the list of methods available on WeakMap,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-209",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is the purpose of uneval",
    "answer": [
      "The uneval() is an inbuilt function which is used to create a string representation of the source code of an\nObject. It is a top-level function and is not associated with any object. Let's see the below example to know more\nabout it's functionality,",
      "```javascript\nvar a = 1;\nuneval(a); // returns a String containing 1\nuneval(function user() {}); // returns \"(function user(){})\"\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-210",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you encode an URL",
    "answer": [
      "The encodeURI() function is used to encode complete URI which has special characters except (, / ? : @ & = + $ #)\ncharacters.",
      "```javascript\nvar uri = \"https://mozilla.org/?x=шеллы\";\nvar encoded = encodeURI(uri);\nconsole.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-211",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you decode an URL",
    "answer": [
      "The decodeURI() function is used to decode a Uniform Resource Identifier (URI) previously created by encodeURI().",
      "```javascript\nvar uri = \"https://mozilla.org/?x=шеллы\";\nvar encoded = encodeURI(uri);\nconsole.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\ntry {\n  console.log(decodeURI(encoded)); // \"https://mozilla.org/?x=шеллы\"\n} catch (e) {\n  // catches a malformed URI\n  console.error(e);\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-212",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you print the contents of web page",
    "answer": [
      "The window object provided a print() method which is used to print the contents of the current window. It opens a\nPrint dialog box which lets you choose between various printing options. Let's see the usage of print method in an\nexample,",
      "```html\n<input type=\"button\" value=\"Print\" onclick=\"window.print()\" />\n\n```",
      "**Note:** In most browsers, it will block while the print dialog is open."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-213",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is the difference between uneval and eval",
    "answer": [
      "The `uneval` function returns the source of a given object; whereas the `eval` function does the opposite, by\nevaluating that source code in a different memory area. Let's see an example to clarify the difference,",
      "```javascript\nvar msg = uneval(function greeting() {\n  return \"Hello, Good morning\";\n});\nvar greeting = eval(msg);\ngreeting(); // returns \"Hello, Good morning\"\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-214",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is an anonymous function",
    "answer": [
      "An anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or\nused as a callback function. The syntax would be as below,",
      "```javascript\nfunction (optionalParameters) {\n  //do something\n}\n\nconst myFunction = function(){ //Anonymous function assigned to a variable\n  //do something\n};\n\n[1, 2, 3].map(function(element){ //Anonymous function used as a callback function\n  //do something\n});\n\n```",
      "Let's see the above anonymous function in an example,",
      "```javascript\nvar x = function (a, b) {\n  return a * b;\n};\nvar z = x(5, 10);\nconsole.log(z); // 50\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-215",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is the precedence order between local and global variables",
    "answer": [
      "A local variable takes precedence over a global variable with the same name. Let's see this behavior in an example.",
      "```javascript\nvar msg = \"Good morning\";\nfunction greeting() {\n  msg = \"Good Evening\";\n  console.log(msg); // Good Evening\n}\ngreeting();\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-216",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are javascript accessors",
    "answer": [
      "ECMAScript 5 introduced javascript object accessors or computed properties through getters and setters. Getters\nuses the `get` keyword whereas Setters uses the `set` keyword.",
      "```javascript\nvar user = {\n  firstName: \"John\",\n  lastName : \"Abraham\",\n  language : \"en\",\n  get lang() {\n    return this.language;\n  },\n  set lang(lang) {\n  this.language = lang;\n  }\n};\nconsole.log(user.lang); // getter access lang as en\nuser.lang = 'fr';\nconsole.log(user.lang); // setter used to set lang as fr\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-217",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you define property on Object constructor",
    "answer": [
      "The Object.defineProperty() static method is used to define a new property directly on an object, or modify an\nexisting property on an object, and returns the object. Let's see an example to know how to define property,",
      "```javascript\nconst newObject = {};\n\nObject.defineProperty(newObject, \"newProperty\", {\n  value: 100,\n  writable: false,\n});\n\nconsole.log(newObject.newProperty); // 100\n\nnewObject.newProperty = 200; // It throws an error in strict mode due to writable setting\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-218",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is the difference between get and defineProperty",
    "answer": [
      "Both have similar results until unless you use classes. If you use `get` the property will be defined on the\nprototype of the object whereas using `Object.defineProperty()` the property will be defined on the instance it is\napplied to."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-219",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the advantages of Getters and Setters",
    "answer": [
      "Below are the list of benefits of Getters and Setters,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-220",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "Can I add getters and setters using defineProperty method",
    "answer": [
      "Yes, You can use the `Object.defineProperty()` method to add Getters and Setters. For example, the below counter\nobject uses increment, decrement, add and subtract properties,",
      "```javascript\nvar obj = { counter: 0 };\n\n// Define getters\nObject.defineProperty(obj, \"increment\", {\n  get: function () {\n    this.counter++;\n  },\n});\nObject.defineProperty(obj, \"decrement\", {\n  get: function () {\n    this.counter--;\n  },\n});\n\n// Define setters\nObject.defineProperty(obj, \"add\", {\n  set: function (value) {\n    this.counter += value;\n  },\n});\nObject.defineProperty(obj, \"subtract\", {\n  set: function (value) {\n    this.counter -= value;\n  },\n});\n\nobj.add = 10;\nobj.subtract = 5;\nconsole.log(obj.increment); //6\nconsole.log(obj.decrement); //5\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-221",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is the purpose of switch-case",
    "answer": [
      "The switch case statement in JavaScript is used for decision making purposes. In a few cases, using the switch case\nstatement is going to be more convenient than if-else statements. The syntax would be as below,",
      "```javascript\nswitch (expression)\n{\n    case value1:\n        statement1;\n        break;\n    case value2:\n        statement2;\n        break;\n    .\n    .\n    case valueN:\n        statementN;\n        break;\n    default:\n        statementDefault;\n}\n\n```",
      "The above multi-way branch statement provides an easy way to dispatch execution to different parts of code based on\nthe value of the expression."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-222",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the conventions to be followed for the usage of switch case",
    "answer": [
      "Below are the list of conventions should be taken care,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-223",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are primitive data types",
    "answer": [
      "A primitive data type is data that has a primitive value (which has no properties or methods). There are 7 types of\nprimitive data types."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-224",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the different ways to access object properties",
    "answer": [
      "There are 3 possible ways for accessing the property of an object."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-225",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the function parameter rules",
    "answer": [
      "JavaScript functions follow below rules for parameters,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-226",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is an error object",
    "answer": [
      "An error object is a built in error object that provides error information when an error occurs. It has two\nproperties: name and message. For example, the below function logs error details,",
      "```javascript\ntry {\n  greeting(\"Welcome\");\n} catch (err) {\n  console.log(err.name + \"<br>\" + err.message);\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-227",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "When you get a syntax error",
    "answer": [
      "A SyntaxError is thrown if you try to evaluate code with a syntax error. For example, the below missing quote for\nthe function parameter throws a syntax error",
      "```javascript\ntry {\n  eval(\"greeting('welcome)\"); // Missing ' will produce an error\n} catch (err) {\n  console.log(err.name);\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-228",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the different error names from error object",
    "answer": [
      "There are 6 different types of error names returned from error object,",
      "Error Name"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-229",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the various statements in error handling",
    "answer": [
      "Below are the list of statements used in an error handling,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-230",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the two types of loops in javascript",
    "answer": [],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-231",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is nodejs",
    "answer": [
      "Node.js is a server-side platform built on Chrome's JavaScript runtime for easily building fast and scalable\nnetwork applications. It is an event-based, non-blocking, asynchronous I/O runtime that uses Google's V8 JavaScript\nengine and libuv library."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-232",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is an Intl object",
    "answer": [
      "The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive\nstring comparison, number formatting, and date and time formatting. It provides access to several constructors and\nlanguage sensitive functions."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-233",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you perform language specific date and time formatting",
    "answer": [
      "You can use the `Intl.DateTimeFormat` object which is a constructor for objects that enable language-sensitive date\nand time formatting. Let's see this behavior with an example,",
      "```javascript\nvar date = new Date(Date.UTC(2019, 07, 07, 3, 0, 0));\nconsole.log(new Intl.DateTimeFormat(\"en-GB\").format(date)); // 07/08/2019\nconsole.log(new Intl.DateTimeFormat(\"en-AU\").format(date)); // 07/08/2019\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-234",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is an Iterator",
    "answer": [
      "An iterator is an object which defines a sequence and a return value upon its termination. It implements the\nIterator protocol with a `next()` method which returns an object with two properties: `value` (the next value in\nthe sequence) and `done` (which is true if the last value in the sequence has been consumed)."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-235",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How does synchronous iteration works",
    "answer": [
      "Synchronous iteration was introduced in ES6 and it works with below set of components,",
      "**Iterable:** It is an object which can be iterated over via a method whose key is Symbol.iterator.\n**Iterator:** It is an object returned by invoking `[Symbol.iterator]()` on an iterable. This iterator object wraps\neach iterated element in an object and returns it via `next()` method one by one.\n**IteratorResult:** It is an object returned by `next()` method. The object contains two properties; the `value`\nproperty contains an iterated element and the `done` property determines whether the element is the last element or\nnot.",
      "Let's demonstrate synchronous iteration with an array as below,",
      "```javascript\nconst iterable = [\"one\", \"two\", \"three\"];\nconst iterator = iterable[Symbol.iterator]();\nconsole.log(iterator.next()); // { value: 'one', done: false }\nconsole.log(iterator.next()); // { value: 'two', done: false }\nconsole.log(iterator.next()); // { value: 'three', done: false }\nconsole.log(iterator.next()); // { value: 'undefined, done: true }\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-236",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is an event loop",
    "answer": [
      "The Event Loop is a queue of callback functions. When an async function executes, the callback function is pushed\ninto the queue. The JavaScript engine doesn't start processing the event loop until the async function has finished\nexecuting the code.\n**Note:** It allows Node.js to perform non-blocking I/O operations even though JavaScript is single-threaded."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-237",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is call stack",
    "answer": [
      "Call Stack is a data structure for javascript interpreters to keep track of function calls(creates execution\ncontext) in the program. It has two major actions,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-238",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is an event queue",
    "answer": [
      "The event queue follows the queue data structure. It stores async callbacks to be added to the call stack. It is\nalso known as the Callback Queue or Macrotask Queue.",
      "Whenever the call stack receives an async function, it is moved into the Web API. Based on the function, Web API\nexecutes it and awaits the result. Once it is finished, it moves the callback into the event queue (the callback of\nthe promise is moved into the microtask queue).",
      "The event queue constantly checks whether or not the call stack is empty. Once the call stack is empty and there is\na callback in the event queue, the event queue moves the callback into the call stack. If there is a callback in\nthe microtask queue as well, it is moved first. The microtask queue has a higher priority than the event queue."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-239",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is a decorator",
    "answer": [
      "A decorator is an expression that evaluates to a function and that takes the target, name, and decorator descriptor\nas arguments. Also, it optionally returns a decorator descriptor to install on the target object. Let's define\nadmin decorator for user class at design time,",
      "```javascript\nfunction admin(isAdmin) {\n   return function(target) {\n       target.isAdmin = isAdmin;\n   }\n}\n\n@admin(true)\nclass User() {\n}\nconsole.log(User.isAdmin); //true\n\n @admin(false)\n class User() {\n }\n console.log(User.isAdmin); //false\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-240",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the properties of Intl object",
    "answer": [
      "Below are the list of properties available on Intl object,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-241",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is an Unary operator",
    "answer": [
      "The unary(+) operator is used to convert a variable to a number.If the variable cannot be converted, it will still\nbecome a number but with the value NaN. Let's see this behavior in an action.",
      "```javascript\nvar x = \"100\";\nvar y = +x;\nconsole.log(typeof x, typeof y); // string, number\n\nvar a = \"Hello\";\nvar b = +a;\nconsole.log(typeof a, typeof b, b); // string, number, NaN\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-242",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you sort elements in an array",
    "answer": [
      "The sort() method is used to sort the elements of an array in place and returns the sorted array. The example usage\nwould be as below,",
      "```javascript\nvar months = [\"Aug\", \"Sep\", \"Jan\", \"June\"];\nmonths.sort();\nconsole.log(months); //  [\"Aug\", \"Jan\", \"June\", \"Sep\"]\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-243",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is the purpose of compareFunction while sorting arrays",
    "answer": [
      "The compareFunction is used to define the sort order. If omitted, the array elements are converted to strings, then\nsorted according to each character's Unicode code point value. Let's take an example to see the usage of\ncompareFunction,",
      "```javascript\nlet numbers = [1, 2, 5, 3, 4];\nnumbers.sort((a, b) => b - a);\nconsole.log(numbers); // [5, 4, 3, 2, 1]\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-244",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you reversing an array",
    "answer": [
      "You can use the reverse() method to reverse the elements in an array. This method is useful to sort an array in\ndescending order. Let's see the usage of reverse() method in an example,",
      "```javascript\nlet numbers = [1, 2, 5, 3, 4];\nnumbers.sort((a, b) => b - a);\nnumbers.reverse();\nconsole.log(numbers); // [1, 2, 3, 4 ,5]\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-245",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you find min and max value in an array",
    "answer": [
      "You can use `Math.min` and `Math.max` methods on array variables to find the minimum and maximum elements within an\narray. Let's create two functions to find the min and max value with in an array,",
      "```javascript\nvar marks = [50, 20, 70, 60, 45, 30];\nfunction findMin(arr) {\n  return Math.min.apply(null, arr);\n}\nfunction findMax(arr) {\n  return Math.max.apply(null, arr);\n}\n\nconsole.log(findMin(marks));\nconsole.log(findMax(marks));\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-246",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you find min and max values without Math functions",
    "answer": [
      "You can write functions which loop through an array comparing each value with the lowest value or highest value to\nfind the min and max values. Let's create those functions to find min and max values,",
      "```javascript\nvar marks = [50, 20, 70, 60, 45, 30];\nfunction findMin(arr) {\n  var length = arr.length;\n  var min = Infinity;\n  while (length--) {\n    if (arr[length] < min) {\n      min = arr[length];\n    }\n  }\n  return min;\n}\n\nfunction findMax(arr) {\n  var length = arr.length;\n  var max = -Infinity;\n  while (length--) {\n    if (arr[length] > max) {\n      max = arr[length];\n    }\n  }\n  return max;\n}\n\nconsole.log(findMin(marks));\nconsole.log(findMax(marks));\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-247",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is an empty statement and purpose of it",
    "answer": [
      "The empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax\nrequires one. Since there is no action with an empty statement you might think that it's usage is quite less, but\nthe empty statement is occasionally useful when you want to create a loop that has an empty body. For example, you\ncan initialize an array with zero values as below,",
      "```javascript\n// Initialize an array a\nfor(let i=0; i < a.length; a[i++] = 0) ;\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-248",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you get metadata of a module",
    "answer": [
      "You can use the `import.meta` object which is a meta-property exposing context-specific meta data to a JavaScript\nmodule. It contains information about the current module, such as the module's URL. In browsers, you might get\ndifferent meta data than NodeJS.",
      "```javascript\n<script type=\"module\" src=\"welcome-module.js\"></script>;\nconsole.log(import.meta); // { url: \"file:///home/user/welcome-module.js\" }\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-249",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is a comma operator",
    "answer": [
      "The comma operator is used to evaluate each of its operands from left to right and returns the value of the last\noperand. This is totally different from comma usage within arrays, objects, and function arguments and parameters.\nFor example, the usage for numeric expressions would be as below,",
      "```javascript\nvar x = 1;\nx = (x++, x);\n\nconsole.log(x); // 2\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-250",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is the advantage of a comma operator",
    "answer": [
      "It is normally used to include multiple expressions in a location that requires a single expression. One of the\ncommon usages of this comma operator is to supply multiple parameters in a `for` loop. For example, the below for\nloop uses multiple expressions in a single location using comma operator,",
      "```javascript\nfor (var a = 0, b =10; a <= 10; a++, b--)\n\n```",
      "You can also use the comma operator in a return statement where it processes before returning.",
      "```javascript\nfunction myFunction() {\n  var a = 1;\n  return (a += 10), a; // 11\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-251",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is typescript",
    "answer": [
      "TypeScript is a typed superset of JavaScript created by Microsoft that adds optional types, classes, async/await,\nand many other features, and compiles to plain JavaScript. Angular built entirely in TypeScript and used as a\nprimary language. You can install it globally as",
      "```bash\nnpm install -g typescript\n\n```",
      "Let's see a simple example of TypeScript usage,",
      "```typescript\nfunction greeting(name: string): string {\n  return \"Hello, \" + name;\n}\n\nlet user = \"Sudheer\";\n\nconsole.log(greeting(user));\n\n```",
      "The greeting method allows only string type as argument."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-252",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the differences between javascript and typescript",
    "answer": [
      "Below are the list of differences between javascript and typescript,",
      "| feature             | typescript                            | javascript                                      |\n          | ------------------- | ------------------------------------- | ----------------------------------------------- |\n| Language paradigm   | Object oriented programming language  | Scripting language                              |\n| Typing support      | Supports static typing                | It has dynamic typing                           |\n| Modules             | Supported                             | Not supported                                   |\n| Interface           | It has interfaces concept             | Doesn't support interfaces                      |\n| Optional parameters | Functions support optional parameters | No support of optional parameters for functions |"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-253",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What are the advantages of typescript over javascript",
    "answer": [
      "Below are some of the advantages of typescript over javascript,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-254",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is an object initializer",
    "answer": [
      "An object initializer is an expression that describes the initialization of an Object. The syntax for this\nexpression is represented as a comma-delimited list of zero or more pairs of property names and associated values\nof an object, enclosed in curly braces ({}). This is also known as literal notation. It is one of the ways to\ncreate an object.",
      "```javascript\nvar initObject = { a: \"John\", b: 50, c: {} };\n\nconsole.log(initObject.a); // John\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-255",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What is a constructor method",
    "answer": [
      "The constructor method is a special method for creating and initializing an object created within a class. If you\ndo not specify a constructor method, a default constructor is used. The example usage of constructor would be as\nbelow,",
      "```javascript\nclass Employee {\n  constructor() {\n    this.name = \"John\";\n  }\n}\n\nvar employeeObject = new Employee();\n\nconsole.log(employeeObject.name); // John\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-256",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What happens if you write constructor more than once in a class",
    "answer": [
      "The \"constructor\" in a class is a special method and it should be defined only once in a class. i.e, If you write a\nconstructor method more than once in a class it will throw a `SyntaxError` error.",
      "```javascript\n class Employee {\n   constructor() {\n     this.name = \"John\";\n   }\n   constructor() {   //  Uncaught SyntaxError: A class may only have one constructor\n     this.age = 30;\n   }\n }\n\n var employeeObject = new Employee();\n\n console.log(employeeObject.name);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-257",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you call the constructor of a parent class",
    "answer": [
      "You can use the `super` keyword to call the constructor of a parent class. Remember that `super()` must be called\nbefore using 'this' reference. Otherwise it will cause a reference error. Let's the usage of it,",
      "```javascript\nclass Square extends Rectangle {\n  constructor(length) {\n    super(length, length);\n    this.name = \"Square\";\n  }\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  set area(value) {\n    this.area = value;\n  }\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-258",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you get the prototype of an object",
    "answer": [
      "You can use the `Object.getPrototypeOf(obj)` method to return the prototype of the specified object. i.e. The value\nof the internal `prototype` property. If there are no inherited properties then `null` value is returned.",
      "```javascript\nconst newPrototype = {};\nconst newObject = Object.create(newPrototype);\n\nconsole.log(Object.getPrototypeOf(newObject) === newPrototype); // true\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-259",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "What happens If I pass string type for getPrototype method",
    "answer": [
      "In ES5, it will throw a TypeError exception if the obj parameter isn't an object. Whereas in ES2015, the parameter\nwill be coerced to an `Object`.",
      "```javascript\n// ES5\nObject.getPrototypeOf(\"James\"); // TypeError: \"James\" is not an object\n// ES2015\nObject.getPrototypeOf(\"James\"); // String.prototype\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415540-260",
    "date": "2023-04-12T12:26:55.540Z",
    "question": "How do you set prototype of one object to another",
    "answer": [
      "You can use the `Object.setPrototypeOf()` method that sets the prototype (i.e., the internal `Prototype` property)\nof a specified object to another object or null. For example, if you want to set prototype of a square object to\nrectangle object would be as follows,",
      "```javascript\nObject.setPrototypeOf(Square.prototype, Rectangle.prototype);\nObject.setPrototypeOf({}, null);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-261",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you check whether an object can be extendable or not",
    "answer": [
      "The `Object.isExtensible()` method is used to determine if an object is extendable or not. i.e, Whether it can have\nnew properties added to it or not.",
      "```javascript\nconst newObject = {};\nconsole.log(Object.isExtensible(newObject)); //true\n\n```",
      "**Note:** By default, all the objects are extendable. i.e, The new properties can be added or modified."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-262",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you prevent an object to extend",
    "answer": [
      "The `Object.preventExtensions()` method is used to prevent new properties from ever being added to an object. In\nother words, it prevents future extensions to the object. Let's see the usage of this property,",
      "```javascript\nconst newObject = {};\nObject.preventExtensions(newObject); // NOT extendable\n\ntry {\n  Object.defineProperty(newObject, \"newProperty\", {\n    // Adding new property\n    value: 100,\n  });\n} catch (e) {\n  console.log(e); // TypeError: Cannot define property newProperty, object is not extensible\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-263",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What are the different ways to make an object non-extensible",
    "answer": [
      "You can mark an object non-extensible in 3 ways,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-264",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you define multiple properties on an object",
    "answer": [
      "The `Object.defineProperties()` method is used to define new or modify existing properties directly on an object\nand returning the object. Let's define multiple properties on an empty object,",
      "```javascript\nconst newObject = {};\n\nObject.defineProperties(newObject, {\n  newProperty1: {\n    value: \"John\",\n    writable: true,\n  },\n  newProperty2: {},\n});\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-265",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What is MEAN in javascript",
    "answer": [
      "The MEAN (MongoDB, Express, AngularJS, and Node.js) stack is the most popular open-source JavaScript software tech\nstack available for building dynamic web apps where you can write both the server-side and client-side halves of\nthe web project entirely in JavaScript."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-266",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What Is Obfuscation in javascript",
    "answer": [
      "Obfuscation is the deliberate act of creating obfuscated javascript code(i.e, source or machine code) that is\ndifficult for humans to understand. It is something similar to encryption, but a machine can understand the code\nand execute it.\nLet's see the below function before Obfuscation,",
      "```javascript\nfunction greeting() {\n  console.log(\"Hello, welcome to JS world\");\n}\n\n```",
      "And after the code Obfuscation, it would be appeared as below,",
      "```javascript\neval(\n  (function (p, a, c, k, e, d) {\n    e = function (c) {\n      return c;\n    };\n    if (!\"\".replace(/^/, String)) {\n      while (c--) {\n        d[c] = k[c] || c;\n      }\n      k = [\n        function (e) {\n          return d[e];\n        },\n      ];\n      e = function () {\n        return \"\\\\w+\";\n      };\n      c = 1;\n    }\n    while (c--) {\n      if (k[c]) {\n        p = p.replace(new RegExp(\"\\\\b\" + e(c) + \"\\\\b\", \"g\"), k[c]);\n      }\n    }\n    return p;\n  })(\n    \"2 1(){0.3('4, 7 6 5 8')}\",\n    9,\n    9,\n    \"console|greeting|function|log|Hello|JS|to|welcome|world\".split(\"|\"),\n    0,\n    {}\n  )\n);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-267",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "Why do you need Obfuscation",
    "answer": [
      "Below are the few reasons for Obfuscation,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-268",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What is Minification",
    "answer": [
      "Minification is the process of removing all unnecessary characters(empty spaces are removed) and variables will be\nrenamed without changing it's functionality. It is also a type of obfuscation ."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-269",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What are the advantages of minification",
    "answer": [
      "Normally it is recommended to use minification for heavy traffic and intensive requirements of resources. It\nreduces file sizes with below benefits,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-270",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What are the differences between Obfuscation and Encryption",
    "answer": [
      "Below are the main differences between Obfuscation and Encryption,",
      "| Feature            | Obfuscation                                     | Encryption                                                              |\n          | ------------------ | ----------------------------------------------- | ----------------------------------------------------------------------- |\n| Definition         | Changing the form of any data in any other form | Changing the form of information to an unreadable format by using a key |\n| A key to decode    | It can be decoded without any key               | It is required                                                          |\n| Target data format | It will be converted to a complex form          | Converted into an unreadable format                                     |"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-271",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What are the common tools used for minification",
    "answer": [
      "There are many online/offline tools to minify the javascript files,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-272",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you perform form validation using javascript",
    "answer": [
      "JavaScript can be used to perform HTML form validation. For example, if the form field is empty, the function needs\nto notify, and return false, to prevent the form being submitted.\nLets' perform user login in an html form,",
      "```html\n<form name=\"myForm\" onsubmit=\"return validateForm()\" method=\"post\">\n  User name: <input type=\"text\" name=\"uname\" />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n\n```",
      "And the validation on user login is below,",
      "```javascript\nfunction validateForm() {\n  var x = document.forms[\"myForm\"][\"uname\"].value;\n  if (x == \"\") {\n    alert(\"The username shouldn't be empty\");\n    return false;\n  }\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-273",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you perform form validation without javascript",
    "answer": [
      "You can perform HTML form validation automatically without using javascript. The validation enabled by applying\nthe `required` attribute to prevent form submission when the input is empty.",
      "```html\n<form method=\"post\">\n  <input type=\"text\" name=\"uname\" required />\n  <input type=\"submit\" value=\"Submit\" />\n</form>\n\n```",
      "**Note:** Automatic form validation does not work in Internet Explorer 9 or earlier."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-274",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What are the DOM methods available for constraint validation",
    "answer": [
      "The below DOM methods are available for constraint validation on an invalid input,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-275",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What are the available constraint validation DOM properties",
    "answer": [
      "Below are the list of some of the constraint validation DOM properties available,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-276",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What are the list of validity properties",
    "answer": [
      "The validity property of an input element provides a set of properties related to the validity of data."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-277",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "Give an example usage of rangeOverflow property",
    "answer": [
      "If an element's value is greater than its max attribute then rangeOverflow property returns true. For example, the\nbelow form submission throws an error if the value is more than 100,",
      "```html\n<input id=\"age\" type=\"number\" max=\"100\" />\n<button onclick=\"myOverflowFunction()\">OK</button>\n\n```",
      "```javascript\nfunction myOverflowFunction() {\n  if (document.getElementById(\"age\").validity.rangeOverflow) {\n    alert(\"The mentioned age is not allowed\");\n  }\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-278",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "Is enums feature available in javascript",
    "answer": [
      "No, javascript does not natively support enums. But there are different kinds of solutions to simulate them even\nthough they may not provide exact equivalents. For example, you can use freeze or seal on object,",
      "```javascript\nvar DaysEnum = Object.freeze({\"monday\":1, \"tuesday\":2, \"wednesday\":3, ...})\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-279",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What is an enum",
    "answer": [
      "An enum is a type restricting variables to one value from a predefined set of constants. JavaScript has no enums\nbut typescript provides built-in enum support.",
      "```javascript\nenum Color {\n RED, GREEN, BLUE\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-280",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you list all properties of an object",
    "answer": [
      "You can use the `Object.getOwnPropertyNames()` method which returns an array of all properties found directly in a\ngiven object. Let's the usage of it in an example,",
      "```javascript\nconst newObject = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\n\nconsole.log(Object.getOwnPropertyNames(newObject));\n[\"a\", \"b\", \"c\"];\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-281",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you get property descriptors of an object",
    "answer": [
      "You can use the `Object.getOwnPropertyDescriptors()` method which returns all own property descriptors of a given\nobject. The example usage of this method is below,",
      "```javascript\nconst newObject = {\n  a: 1,\n  b: 2,\n  c: 3,\n};\nconst descriptorsObject = Object.getOwnPropertyDescriptors(newObject);\nconsole.log(descriptorsObject.a.writable); //true\nconsole.log(descriptorsObject.a.configurable); //true\nconsole.log(descriptorsObject.a.enumerable); //true\nconsole.log(descriptorsObject.a.value); // 1\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-282",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What are the attributes provided by a property descriptor",
    "answer": [
      "A property descriptor is a record which has the following attributes"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-283",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you extend classes",
    "answer": [
      "The `extends` keyword is used in class declarations/expressions to create a class which is a child of another\nclass. It can be used to subclass custom classes as well as built-in objects. The syntax would be as below,",
      "```javascript\nclass ChildClass extends ParentClass { ... }\n\n```",
      "Let's take an example of Square subclass from Polygon parent class,",
      "```javascript\nclass Square extends Rectangle {\n  constructor(length) {\n    super(length, length);\n    this.name = \"Square\";\n  }\n\n  get area() {\n    return this.width * this.height;\n  }\n\n  set area(value) {\n    this.area = value;\n  }\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-284",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do I modify the url without reloading the page",
    "answer": [
      "The `window.location.href` property will be helpful to modify the url but it reloads the page. HTML5 introduced\nthe `history.pushState()` and `history.replaceState()` methods, which allow you to add and modify history entries,\nrespectively. For example, you can use pushState as below,",
      "```javascript\nwindow.history.pushState(\"page2\", \"Title\", \"/page2.html\");\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-285",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you check whether an array includes a particular value or not",
    "answer": [
      "The `Array#includes()` method is used to determine whether an array includes a particular value among its entries\nby returning either true or false. Let's see an example to find an element(numeric and string) within an array.",
      "```javascript\nvar numericArray = [1, 2, 3, 4];\nconsole.log(numericArray.includes(3)); // true\n\nvar stringArray = [\"green\", \"yellow\", \"blue\"];\nconsole.log(stringArray.includes(\"blue\")); //true\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-286",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you compare scalar arrays",
    "answer": [
      "You can use length and every method of arrays to compare two scalar(compared directly using ===) arrays. The\ncombination of these expressions can give the expected result,",
      "```javascript\nconst arrayFirst = [1, 2, 3, 4, 5];\nconst arraySecond = [1, 2, 3, 4, 5];\nconsole.log(\n  arrayFirst.length === arraySecond.length &&\n    arrayFirst.every((value, index) => value === arraySecond[index])\n); // true\n\n```",
      "If you would like to compare arrays irrespective of order then you should sort them before,",
      "```javascript\nconst arrayFirst = [2, 3, 1, 4, 5];\nconst arraySecond = [1, 2, 3, 4, 5];\nconsole.log(\n  arrayFirst.length === arraySecond.length &&\n    arrayFirst.sort().every((value, index) => value === arraySecond[index])\n); //true\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-287",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How to get the value from get parameters",
    "answer": [
      "The `new URL()` object accepts the url string and `searchParams` property of this object can be used to access the\nget parameters. Remember that you may need to use polyfill or `window.location` to access the URL in older\nbrowsers(including IE).",
      "```javascript\nlet urlString = \"http://www.some-domain.com/about.html?x=1&y=2&z=3\"; //window.location.href\nlet url = new URL(urlString);\nlet parameterZ = url.searchParams.get(\"z\");\nconsole.log(parameterZ); // 3\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-288",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you print numbers with commas as thousand separators",
    "answer": [
      "You can use the `Number.prototype.toLocaleString()` method which returns a string with a language-sensitive\nrepresentation such as thousand separator,currency etc of this number.",
      "```javascript\nfunction convertToThousandFormat(x) {\n  return x.toLocaleString(); // 12,345.679\n}\n\nconsole.log(convertToThousandFormat(12345.6789));\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-289",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What is the difference between java and javascript",
    "answer": [
      "Both are totally unrelated programming languages and no relation between them. Java is statically typed, compiled,\nruns on its own VM. Whereas Javascript is dynamically typed, interpreted, and runs in a browser and nodejs\nenvironments. Let's see the major differences in a tabular format,",
      "Feature"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-290",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "Does JavaScript supports namespace",
    "answer": [
      "JavaScript doesn’t support namespace by default. So if you create any element(function, method, object, variable)\nthen it becomes global and pollutes the global namespace. Let's take an example of defining two functions without\nany namespace,",
      "```javascript\nfunction func1() {\n  console.log(\"This is a first definition\");\n}\nfunction func1() {\n  console.log(\"This is a second definition\");\n}\nfunc1(); // This is a second definition\n\n```",
      "It always calls the second function definition. In this case, namespace will solve the name collision problem."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-291",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you declare namespace",
    "answer": [
      "Even though JavaScript lacks namespaces, we can use Objects , IIFE to create namespaces."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-292",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you invoke javascript code in an iframe from parent page",
    "answer": [
      "Initially iFrame needs to be accessed using either `document.getElementBy` or `window.frames`. After\nthat `contentWindow` property of iFrame gives the access for targetFunction",
      "```javascript\ndocument.getElementById(\"targetFrame\").contentWindow.targetFunction();\nwindow.frames[0].frameElement.contentWindow.targetFunction(); // Accessing iframe this way may not work in latest versions chrome and firefox\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-293",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do get the timezone offset from date",
    "answer": [
      "You can use the `getTimezoneOffset` method of the date object. This method returns the time zone difference, in\nminutes, from current locale (host system settings) to UTC",
      "```javascript\nvar offset = new Date().getTimezoneOffset();\nconsole.log(offset); // -480\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-294",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "How do you load CSS and JS files dynamically",
    "answer": [
      "You can create both link and script elements in the DOM and append them as child to head tag. Let's create a\nfunction to add script and style resources as below,",
      "```javascript\nfunction loadAssets(filename, filetype) {\n  if (filetype == \"css\") {\n    // External CSS file\n    var fileReference = document.createElement(\"link\");\n    fileReference.setAttribute(\"rel\", \"stylesheet\");\n    fileReference.setAttribute(\"type\", \"text/css\");\n    fileReference.setAttribute(\"href\", filename);\n  } else if (filetype == \"js\") {\n    // External JavaScript file\n    var fileReference = document.createElement(\"script\");\n    fileReference.setAttribute(\"type\", \"text/javascript\");\n    fileReference.setAttribute(\"src\", filename);\n  }\n  if (typeof fileReference != \"undefined\")\n    document.getElementsByTagName(\"head\")[0].appendChild(fileReference);\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-295",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What are the different methods to find HTML elements in DOM",
    "answer": [
      "If you want to access any element in an HTML page, you need to start with accessing the document object. Later you\ncan use any of the below methods to find the HTML element,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415541-296",
    "date": "2023-04-12T12:26:55.541Z",
    "question": "What is jQuery",
    "answer": [
      "jQuery is a popular cross-browser JavaScript library that provides Document Object Model (DOM) traversal, event\nhandling, animations and AJAX interactions by minimizing the discrepancies across browsers. It is widely famous\nwith its philosophy of “Write less, do more”. For example, you can display welcome message on the page load using\njQuery as below,",
      "```javascript\n$(document).ready(function () {\n  // It selects the document and apply the function on page load\n  alert(\"Welcome to jQuery world\");\n});\n\n```",
      "**Note:** You can download it from jquery's official site or install it from CDNs, like google."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-297",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is V8 JavaScript engine",
    "answer": [
      "V8 is an open source high-performance JavaScript engine used by the Google Chrome browser, written in C++. It is\nalso being used in the node.js project. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later,\nmacOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors.\n**Note:** It can run standalone, or can be embedded into any C++ application."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-298",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "Why do we call javascript as dynamic language",
    "answer": [
      "JavaScript is a loosely typed or a dynamic language because variables in JavaScript are not directly associated\nwith any particular value type, and any variable can be assigned/reassigned with values of all types.",
      "```javascript\nlet age = 50; // age is a number now\nage = \"old\"; // age is a string now\nage = true; // age is a boolean\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-299",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is a void operator",
    "answer": [
      "The `void` operator evaluates the given expression and then returns undefined(i.e, without returning value). The\nsyntax would be as below,",
      "```javascript\nvoid expression;\nvoid expression;\n\n```",
      "Let's display a message without any redirection or reload",
      "```javascript\n<a href=\"javascript:void(alert('Welcome to JS world'))\">\n  Click here to see a message\n</a>\n\n```",
      "**Note:** This operator is often used to obtain the undefined primitive value, using \"void(0)\"."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-300",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "How to set the cursor to wait",
    "answer": [
      "The cursor can be set to wait in JavaScript by using the property \"cursor\". Let's perform this behavior on page\nload using the below function.",
      "```javascript\nfunction myFunction() {\n  window.document.body.style.cursor = \"wait\";\n}\n\n```",
      "and this function invoked on page load",
      "```html\n<body onload=\"myFunction()\"></body>\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-301",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "How do you create an infinite loop",
    "answer": [
      "You can create infinite loops using for and while loops without using any expressions. The for loop construct or\nsyntax is better approach in terms of ESLint and code optimizer tools,",
      "```javascript\nfor (;;) {}\nwhile (true) {}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-302",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "Why do you need to avoid with statement",
    "answer": [
      "JavaScript's with statement was intended to provide a shorthand for writing recurring accesses to objects. So it\ncan help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty.\nLet's take an example where it is used to avoid redundancy when accessing an object several times.",
      "```javascript\na.b.c.greeting = \"welcome\";\na.b.c.age = 32;\n\n```",
      "Using `with` it turns this into:",
      "```javascript\nwith (a.b.c) {\n  greeting = \"welcome\";\n  age = 32;\n}\n\n```",
      "But this `with` statement creates performance problems since one cannot predict whether an argument will refer to a\nreal variable or to a property inside the with argument."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-303",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is the output of below for loops",
    "answer": [
      "```javascript\nfor (var i = 0; i < 4; i++) {\n  // global scope\n  setTimeout(() => console.log(i));\n}\n\nfor (let i = 0; i < 4; i++) {\n  // block scope\n  setTimeout(() => console.log(i));\n}\n\n```",
      "The output of the above for loops is 4 4 4 4 and 0 1 2 3",
      "**Explanation:** Due to the event queue/loop of javascript, the `setTimeout` callback function is called after the\nloop has been executed. Since the variable i is declared with the `var` keyword it became a global variable and the\nvalue was equal to 4 using iteration when the time `setTimeout` function is invoked. Hence, the output of the first\nloop is `4 4 4 4`.",
      "Whereas in the second loop, the variable i is declared as the `let` keyword it becomes a block scoped variable and\nit holds a new value(0, 1 ,2 3) for each iteration. Hence, the output of the first loop is `0 1 2 3`."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-304",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "List down some of the features of ES6",
    "answer": [
      "Below are the list of some new features of ES6,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-305",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is ES6",
    "answer": [
      "ES6 is the sixth edition of the javascript language and it was released in June 2015. It was initially known as\nECMAScript 6 (ES6) and later renamed to ECMAScript 2015. Almost all the modern browsers support ES6 but for the old\nbrowsers there are many transpilers, like Babel.js etc."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-306",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "Can I redeclare let and const variables",
    "answer": [
      "No, you cannot redeclare let and const variables. If you do, it throws below error",
      "```bash\nUncaught SyntaxError: Identifier 'someVariable' has already been declared\n\n```",
      "**Explanation:** The variable declaration with `var` keyword refers to a function scope and the variable is treated\nas if it were declared at the top of the enclosing scope due to hoisting feature. So all the multiple declarations\ncontributing to the same hoisted variable without any error. Let's take an example of re-declaring variables in the\nsame scope for both var and let/const variables.",
      "```javascript\nvar name = \"John\";\nfunction myFunc() {\n  var name = \"Nick\";\n  var name = \"Abraham\"; // Re-assigned in the same function block\n  alert(name); // Abraham\n}\nmyFunc();\nalert(name); // John\n\n```",
      "The block-scoped multi-declaration throws syntax error,",
      "```javascript\nlet name = \"John\";\nfunction myFunc() {\n  let name = \"Nick\";\n  let name = \"Abraham\"; // Uncaught SyntaxError: Identifier 'name' has already been declared\n  alert(name);\n}\n\nmyFunc();\nalert(name);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-307",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "Is const variable makes the value immutable",
    "answer": [
      "No, the const variable doesn't make the value immutable. But it disallows subsequent assignments(i.e, You can\ndeclare with assignment but can't assign another value later)",
      "```javascript\nconst userList = [];\nuserList.push(\"John\"); // Can mutate even though it can't re-assign\nconsole.log(userList); // ['John']\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-308",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are default parameters",
    "answer": [
      "In E5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6,\nDefault function parameters feature allows parameters to be initialized with default values if no value or\nundefined is passed. Let's compare the behavior with an examples,",
      "```javascript\n//ES5\nvar calculateArea = function (height, width) {\n  height = height || 50;\n  width = width || 60;\n\n  return width * height;\n};\nconsole.log(calculateArea()); //300\n\n```",
      "The default parameters makes the initialization more simpler,",
      "```javascript\n//ES6\nvar calculateArea = function (height = 50, width = 60) {\n  return width * height;\n};\n\nconsole.log(calculateArea()); //300\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-309",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are template literals",
    "answer": [
      "Template literals or template strings are string literals allowing embedded expressions. These are enclosed by the\nback-tick (`) character instead of double or single quotes.\nIn E6, this feature enables using dynamic expressions as below,",
      "```javascript\nvar greeting = `Welcome to JS World, Mr. ${firstName} ${lastName}.`;\n\n```",
      "In ES5, you need break string like below,",
      "```javascript\nvar greeting = 'Welcome to JS World, Mr. ' + firstName + ' ' + lastName.`\n\n```",
      "**Note:** You can use multi-line strings and string interpolation features with template literals."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-310",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "How do you write multi-line strings in template literals",
    "answer": [
      "In ES5, you would have to use newline escape characters('\\\\n') and concatenation symbols(+) in order to get\nmulti-line strings.",
      "```javascript\nconsole.log(\"This is string sentence 1\\n\" + \"This is string sentence 2\");\n\n```",
      "Whereas in ES6, You don't need to mention any newline sequence character,",
      "```javascript\nconsole.log(`This is string sentence\n'This is string sentence 2`);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-311",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are nesting templates",
    "answer": [
      "The nesting template is a feature supported within template literals syntax to allow inner backticks inside a\nplaceholder ${ } within the template. For example, the below nesting template is used to display the icons based on\nuser permissions whereas outer template checks for platform type,",
      "```javascript\nconst iconStyles = `icon ${\n  isMobilePlatform()\n    ? \"\"\n    : `icon-${user.isAuthorized ? \"submit\" : \"disabled\"}`\n}`;\n\n```",
      "You can write the above use case without nesting template features as well. However, the nesting template feature\nis more compact and readable.",
      "```javascript\n//Without nesting templates\n const iconStyles = `icon ${ isMobilePlatform() ? '' :\n   user.isAuthorized ? 'icon-submit' : 'icon-disabled'}`;\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-312",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are tagged templates",
    "answer": [
      "Tagged templates are the advanced form of templates in which tags allow you to parse template literals with a\nfunction. The tag function accepts the first parameter as an array of strings and remaining parameters as\nexpressions. This function can also return manipulated strings based on parameters. Let's see the usage of this\ntagged template behavior of an IT professional skill set in an organization,",
      "```javascript\nvar user1 = \"John\";\nvar skill1 = \"JavaScript\";\nvar experience1 = 15;\n\nvar user2 = \"Kane\";\nvar skill2 = \"JavaScript\";\nvar experience2 = 5;\n\nfunction myInfoTag(strings, userExp, experienceExp, skillExp) {\n  var str0 = strings[0]; // \"Mr/Ms. \"\n  var str1 = strings[1]; // \" is a/an \"\n  var str2 = strings[2]; // \"in\"\n\n  var expertiseStr;\n  if (experienceExp > 10) {\n    expertiseStr = \"expert developer\";\n  } else if (skillExp > 5 && skillExp <= 10) {\n    expertiseStr = \"senior developer\";\n  } else {\n    expertiseStr = \"junior developer\";\n  }\n\n  return `${str0}${userExp}${str1}${expertiseStr}${str2}${skillExp}`;\n}\n\nvar output1 = myInfoTag`Mr/Ms. ${user1} is a/an ${experience1} in ${skill1}`;\nvar output2 = myInfoTag`Mr/Ms. ${user2} is a/an ${experience2} in ${skill2}`;\n\nconsole.log(output1); // Mr/Ms. John is a/an expert developer in JavaScript\nconsole.log(output2); // Mr/Ms. Kane is a/an junior developer in JavaScript\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-313",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are raw strings",
    "answer": [
      "ES6 provides a raw strings feature using the `String.raw()` method which is used to get the raw string form of\ntemplate strings. This feature allows you to access the raw strings as they were entered, without processing escape\nsequences. For example, the usage would be as below,",
      "```javascript\nvar calculationString = String.raw`The sum of numbers is \\n${\n  1 + 2 + 3 + 4\n}!`;\nconsole.log(calculationString); // The sum of numbers is 10\n\n```",
      "If you don't use raw strings, the newline character sequence will be processed by displaying the output in multiple\nlines",
      "```javascript\nvar calculationString = `The sum of numbers is \\n${1 + 2 + 3 + 4}!`;\nconsole.log(calculationString);\n// The sum of numbers is\n// 10\n\n```",
      "Also, the raw property is available on the first argument to the tag function",
      "```javascript\nfunction tag(strings) {\n  console.log(strings.raw[0]);\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-314",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is destructuring assignment",
    "answer": [
      "The destructuring assignment is a JavaScript expression that makes it possible to unpack values from arrays or\nproperties from objects into distinct variables.\nLet's get the month values from an array using destructuring assignment",
      "```javascript\nvar [one, two, three] = [\"JAN\", \"FEB\", \"MARCH\"];\n\nconsole.log(one); // \"JAN\"\nconsole.log(two); // \"FEB\"\nconsole.log(three); // \"MARCH\"\n\n```",
      "and you can get user properties of an object using destructuring assignment,",
      "```javascript\nvar { name, age } = { name: \"John\", age: 32 };\n\nconsole.log(name); // John\nconsole.log(age); // 32\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-315",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are default values in destructuring assignment",
    "answer": [
      "A variable can be assigned a default value when the value unpacked from the array or object is undefined during\ndestructuring assignment. It helps to avoid setting default values separately for each assignment. Let's take an\nexample for both arrays and object use cases,",
      "**Arrays destructuring:**",
      "```javascript\nvar x, y, z;\n\n[x = 2, y = 4, z = 6] = [10];\nconsole.log(x); // 10\nconsole.log(y); // 4\nconsole.log(z); // 6\n\n```",
      "**Objects destructuring:**",
      "```javascript\nvar { x = 2, y = 4, z = 6 } = { x: 10 };\n\nconsole.log(x); // 10\nconsole.log(y); // 4\nconsole.log(z); // 6\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-316",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "How do you swap variables in destructuring assignment",
    "answer": [
      "If you don't use destructuring assignment, swapping two values requires a temporary variable. Whereas using a\ndestructuring feature, two variable values can be swapped in one destructuring expression. Let's swap two number\nvariables in array destructuring assignment,",
      "```javascript\nvar x = 10,\n  y = 20;\n\n[x, y] = [y, x];\nconsole.log(x); // 20\nconsole.log(y); // 10\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-317",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are enhanced object literals",
    "answer": [
      "Object literals make it easy to quickly create objects with properties inside the curly braces. For example, it\nprovides shorter syntax for common object property definition as below.",
      "```javascript\n//ES6\nvar x = 10,\n  y = 20;\nobj = { x, y };\nconsole.log(obj); // {x: 10, y:20}\n//ES5\nvar x = 10,\n  y = 20;\nobj = { x: x, y: y };\nconsole.log(obj); // {x: 10, y:20}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-318",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are dynamic imports",
    "answer": [
      "The dynamic imports using `import()` function syntax allows us to load modules on demand by using promises or the\nasync/await syntax. Currently this feature is\nin [stage4 proposal](https://github.com/tc39/proposal-dynamic-import). The main advantage of dynamic imports is\nreduction of our bundle's sizes, the size/payload response of our requests and overall improvements in the user\nexperience.\nThe syntax of dynamic imports would be as below,",
      "```javascript\nimport(\"./Module\").then((Module) => Module.method());\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-319",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are the use cases for dynamic imports",
    "answer": [
      "Below are some of the use cases of using dynamic imports over static imports,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-320",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are typed arrays",
    "answer": [
      "Typed arrays are array-like objects from ECMAScript 6 API for handling binary data. JavaScript provides 8 Typed\narray types,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-321",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are the advantages of module loaders",
    "answer": [
      "The module loaders provides the below features,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-322",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is collation",
    "answer": [
      "Collation is used for sorting a set of strings and searching within a set of strings. It is parameterized by locale\nand aware of Unicode. Let's take comparison and sorting features,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-323",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is for...of statement",
    "answer": [
      "The for...of statement creates a loop iterating over iterable objects or elements such as built-in String, Array,\nArray-like objects (like arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. The basic usage\nof for...of statement on arrays would be as below,",
      "```javascript\nlet arrayIterable = [10, 20, 30, 40, 50];\n\nfor (let value of arrayIterable) {\n  value++;\n  console.log(value); // 11 21 31 41 51\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-324",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is the output of below spread operator array",
    "answer": [
      "```javascript\n[...\"John Resig\"];\n\n```",
      "The output of the array is ['J', 'o', 'h', 'n', '', 'R', 'e', 's', 'i', 'g']\n**Explanation:** The string is an iterable type and the spread operator within an array maps every character of an\niterable to one element. Hence, each character of a string becomes an element within an Array."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-325",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "Is PostMessage secure",
    "answer": [
      "Yes, postMessages can be considered very secure as long as the programmer/developer is careful about checking the\norigin and source of an arriving message. But if you try to send/receive a message without verifying its source\nwill create cross-site scripting attacks."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-326",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What are the problems with postmessage target origin as wildcard",
    "answer": [
      "The second argument of postMessage method specifies which origin is allowed to receive the message. If you use the\nwildcard “\\*” as an argument then any origin is allowed to receive the message. In this case, there is no way for\nthe sender window to know if the target window is at the target origin when sending the message. If the target\nwindow has been navigated to another origin, the other origin would receive the data. Hence, this may lead to XSS\nvulnerabilities.",
      "```javascript\ntargetWindow.postMessage(message, \"*\");\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-327",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "How do you avoid receiving postMessages from attackers",
    "answer": [
      "Since the listener listens for any message, an attacker can trick the application by sending a message from the\nattacker’s origin, which gives an impression that the receiver received the message from the actual sender’s\nwindow. You can avoid this issue by validating the origin of the message on the receiver's end using the\n“message.origin” attribute. For examples, let's check the sender's\norigin [http://www.some-sender.com](http://www.some-sender.com) on receiver\nside [www.some-receiver.com](www.some-receiver.com),",
      "```javascript\n//Listener on http://www.some-receiver.com/\nwindow.addEventListener(\"message\", function(message){\n    if(/^http://www\\.some-sender\\.com$/.test(message.origin)){\n         console.log('You received the data from valid sender', message.data);\n   }\n});\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-328",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "Can I avoid using postMessages completely",
    "answer": [
      "You cannot avoid using postMessages completely(or 100%). Even though your application doesn’t use postMessage\nconsidering the risks, a lot of third party scripts use postMessage to communicate with the third party service. So\nyour application might be using postMessage without your knowledge."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-329",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "Is postMessages synchronous",
    "answer": [
      "The postMessages are synchronous in IE8 browser but they are asynchronous in IE9 and all other modern browsers (\ni.e, IE9+, Firefox, Chrome, Safari).Due to this asynchronous behaviour, we use a callback mechanism when the\npostMessage is returned."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-330",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What paradigm is Javascript",
    "answer": [
      "JavaScript is a multi-paradigm language, supporting imperative/procedural programming, Object-Oriented Programming\nand functional programming. JavaScript supports Object-Oriented Programming with prototypical inheritance."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-331",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is the difference between internal and external javascript",
    "answer": [
      "**Internal JavaScript:** It is the source code within the script tag.\n**External JavaScript:** The source code is stored in an external file(stored with .js extension) and referred with\nin the tag."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-332",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "Is JavaScript faster than server side script",
    "answer": [
      "Yes, JavaScript is faster than server side script. Because JavaScript is a client-side script it does not require\nany web server’s help for its computation or calculation. So JavaScript is always faster than any server-side\nscript like ASP, PHP, etc."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-333",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "How do you get the status of a checkbox",
    "answer": [
      "You can apply the `checked` property on the selected checkbox in the DOM. If the value is `true` means the checkbox\nis checked otherwise it is unchecked. For example, the below HTML checkbox element can be access using javascript\nas below,",
      "```html\n<input type=\"checkbox\" id=\"checkboxname\" value=\"Agree\" /> Agree the\nconditions<br />\n\n```",
      "```javascript\nconsole.log(document.getElementById(‘checkboxname’).checked); // true or false\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-334",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is the purpose of double tilde operator",
    "answer": [
      "The double tilde operator(~~) is known as double NOT bitwise operator. This operator is going to be a quicker\nsubstitute for Math.floor()."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-335",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "How do you convert character to ASCII code",
    "answer": [
      "You can use the `String.prototype.charCodeAt()` method to convert string characters to ASCII numbers. For example,\nlet's find ASCII code for the first letter of 'ABC' string,",
      "```javascript\n\"ABC\".charCodeAt(0); // returns 65\n\n```",
      "Whereas `String.fromCharCode()` method converts numbers to equal ASCII characters.",
      "```javascript\nString.fromCharCode(65, 66, 67); // returns 'ABC'\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-336",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is ArrayBuffer",
    "answer": [
      "An ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can create it as\nbelow,",
      "```javascript\nlet buffer = new ArrayBuffer(16); // create a buffer of length 16\nalert(buffer.byteLength); // 16\n\n```",
      "To manipulate an ArrayBuffer, we need to use a “view” object.",
      "```javascript\n//Create a DataView referring to the buffer\nlet view = new DataView(buffer);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-337",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is the output of below string expression",
    "answer": [
      "```javascript\nconsole.log(\"Welcome to JS world\"[0]);\n\n```",
      "The output of the above expression is \"W\".\n**Explanation:** The bracket notation with specific index on a string returns the character at a specific location.\nHence, it returns the character \"W\" of the string. Since this is not supported in IE7 and below versions, you may\nneed to use the .charAt() method to get the desired result."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-338",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is the purpose of Error object",
    "answer": [
      "The Error constructor creates an error object and the instances of error objects are thrown when runtime errors\noccur. The Error object can also be used as a base object for user-defined exceptions. The syntax of error object\nwould be as below,",
      "```javascript\nnew Error([message[, fileName[, lineNumber]]])\n\n```",
      "You can throw user defined exceptions or errors using Error object in try...catch block as below,",
      "```javascript\ntry {\n  if (withdraw > balance)\n    throw new Error(\"Oops! You don't have enough balance\");\n} catch (e) {\n  console.log(e.name + \": \" + e.message);\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415542-339",
    "date": "2023-04-12T12:26:55.542Z",
    "question": "What is the purpose of EvalError object",
    "answer": [
      "The EvalError object indicates an error regarding the global `eval()` function. Even though this exception is not\nthrown by JavaScript anymore, the EvalError object remains for compatibility. The syntax of this expression would\nbe as below,",
      "```javascript\nnew EvalError([message[, fileName[, lineNumber]]])\n\n```",
      "You can throw EvalError with in try...catch block as below,",
      "```javascript\ntry {\n  throw new EvalError('Eval function error', 'someFile.js', 100);\n} catch (e) {\n  console.log(e.message, e.name, e.fileName);              // \"Eval function error\", \"EvalError\", \"someFile.js\"\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-340",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What are the list of cases error thrown from non-strict mode to strict mode",
    "answer": [
      "When you apply 'use strict'; syntax, some of the below cases will throw a SyntaxError before executing the script"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-341",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "Do all objects have prototypes",
    "answer": [
      "No. All objects have prototypes except for the base object which is created by the user, or an object that is\ncreated using the new keyword."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-342",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is the difference between a parameter and an argument",
    "answer": [
      "Parameter is the variable name of a function definition whereas an argument represents the value given to a\nfunction when it is invoked. Let's explain this with a simple function",
      "```javascript\nfunction myFunction(parameter1, parameter2, parameter3) {\n  console.log(arguments[0]); // \"argument1\"\n  console.log(arguments[1]); // \"argument2\"\n  console.log(arguments[2]); // \"argument3\"\n}\nmyFunction(\"argument1\", \"argument2\", \"argument3\");\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-343",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is the purpose of some method in arrays",
    "answer": [
      "The some() method is used to test whether at least one element in the array passes the test implemented by the\nprovided function. The method returns a boolean value. Let's take an example to test for any odd elements,",
      "```javascript\nvar array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nvar odd = (element) => element % 2 !== 0;\n\nconsole.log(array.some(odd)); // true (the odd element exists)\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-344",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you combine two or more arrays",
    "answer": [
      "The concat() method is used to join two or more arrays by returning a new array containing all the elements. The\nsyntax would be as below,",
      "```javascript\narray1.concat(array2, array3, ..., arrayX)\n\n```",
      "Let's take an example of array's concatenation with veggies and fruits arrays,",
      "```javascript\nvar veggies = [\"Tomato\", \"Carrot\", \"Cabbage\"];\nvar fruits = [\"Apple\", \"Orange\", \"Pears\"];\nvar veggiesAndFruits = veggies.concat(fruits);\nconsole.log(veggiesAndFruits); // Tomato, Carrot, Cabbage, Apple, Orange, Pears\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-345",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is the difference between Shallow and Deep copy",
    "answer": [
      "There are two ways to copy an object,",
      "**Shallow Copy:**\nShallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the\noriginal object. If any of the fields of the object are references to other objects, just the reference addresses\nare copied i.e., only the memory address is copied.",
      "**Example**",
      "```javascript\nvar empDetails = {\n  name: \"John\",\n  age: 25,\n  expertise: \"Software Developer\",\n};\n\n```",
      "to create a duplicate",
      "```javascript\nvar empDetailsShallowCopy = empDetails; //Shallow copying!\n\n```",
      "if we change some property value in the duplicate one like this:",
      "```javascript\nempDetailsShallowCopy.name = \"Johnson\";\n\n```",
      "The above statement will also change the name of `empDetails`, since we have a shallow copy. That means we're\nlosing the original data as well.",
      "**Deep copy:**\nA deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep\ncopy occurs when an object is copied along with the objects to which it refers.",
      "**Example**",
      "```javascript\nvar empDetails = {\n  name: \"John\",\n  age: 25,\n  expertise: \"Software Developer\",\n};\n\n```",
      "Create a deep copy by using the properties from the original object into new variable",
      "```javascript\nvar empDetailsDeepCopy = {\n  name: empDetails.name,\n  age: empDetails.age,\n  expertise: empDetails.expertise,\n};\n\n```",
      "Now if you change `empDetailsDeepCopy.name`, it will only affect `empDetailsDeepCopy` & not `empDetails`"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-346",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you create specific number of copies of a string",
    "answer": [
      "The `repeat()` method is used to construct and return a new string which contains the specified number of copies of\nthe string on which it was called, concatenated together. Remember that this method has been added to the\nECMAScript 2015 specification.\nLet's take an example of Hello string to repeat it 4 times,",
      "```javascript\n\"Hello\".repeat(4); // 'HelloHelloHelloHello'\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-347",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you return all matching strings against a regular expression",
    "answer": [
      "The `matchAll()` method can be used to return an iterator of all results matching a string against a regular\nexpression. For example, the below example returns an array of matching string results against a regular\nexpression,",
      "```javascript\nlet regexp = /Hello(\\d?))/g;\nlet greeting = \"Hello1Hello2Hello3\";\n\nlet greetingList = [...greeting.matchAll(regexp)];\n\nconsole.log(greetingList[0]); //Hello1\nconsole.log(greetingList[1]); //Hello2\nconsole.log(greetingList[2]); //Hello3\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-348",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you trim a string at the beginning or ending",
    "answer": [
      "The `trim` method of string prototype is used to trim on both sides of a string. But if you want to trim especially\nat the beginning or ending of the string then you can use `trimStart/trimLeft` and `trimEnd/trimRight` methods.\nLet's see an example of these methods on a greeting message,",
      "```javascript\nvar greeting = \"   Hello, Goodmorning!   \";\n\nconsole.log(greeting); // \"   Hello, Goodmorning!   \"\nconsole.log(greeting.trimStart()); // \"Hello, Goodmorning!   \"\nconsole.log(greeting.trimLeft()); // \"Hello, Goodmorning!   \"\n\nconsole.log(greeting.trimEnd()); // \"   Hello, Goodmorning!\"\nconsole.log(greeting.trimRight()); // \"   Hello, Goodmorning!\"\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-349",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is the output of below console statement with unary operator",
    "answer": [
      "Let's take console statement with unary operator as given below,",
      "```javascript\nconsole.log(+\"Hello\");\n\n```",
      "The output of the above console log statement returns NaN. Because the element is prefixed by the unary operator\nand the JavaScript interpreter will try to convert that element into a number type. Since the conversion fails, the\nvalue of the statement results in NaN value."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-350",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "Does javascript uses mixins",
    "answer": [
      "Mixin is a generic object-oriented programming term - is a class containing methods that can be used by other\nclasses without a need to inherit from it. In JavaScript we can only inherit from a single object. ie. There can be\nonly one `[[prototype]]` for an object.",
      "But sometimes we require to extend more than one, to overcome this we can use Mixin which helps to copy methods to\nthe prototype of another class.",
      "Say for instance, we've two classes `User` and `CleanRoom`. Suppose we need to add `CleanRoom` functionality\nto `User`, so that user can clean the room at demand. Here's where concept called mixins comes into picture.",
      "```javascript\n// mixin\nlet cleanRoomMixin = {\n  cleanRoom() {\n    alert(`Hello ${this.name}, your room is clean now`);\n  },\n  sayBye() {\n    alert(`Bye ${this.name}`);\n  },\n};\n\n// usage:\nclass User {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\n// copy the methods\nObject.assign(User.prototype, cleanRoomMixin);\n\n// now User can clean the room\nnew User(\"Dude\").cleanRoom(); // Hello Dude, your room is clean now!\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-351",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is a thunk function",
    "answer": [
      "A thunk is just a function which delays the evaluation of the value. It doesn’t take any arguments but gives the\nvalue whenever you invoke the thunk. i.e, It is used not to execute now but it will be sometime in the future.\nLet's take a synchronous example,",
      "```javascript\nconst add = (x, y) => x + y;\n\nconst thunk = () => add(2, 3);\n\nthunk(); // 5\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-352",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What are asynchronous thunks",
    "answer": [
      "The asynchronous thunks are useful to make network requests. Let's see an example of network requests,",
      "```javascript\nfunction fetchData(fn) {\n  fetch(\"https://jsonplaceholder.typicode.com/todos/1\")\n    .then((response) => response.json())\n    .then((json) => fn(json));\n}\n\nconst asyncThunk = function () {\n  return fetchData(function getData(data) {\n    console.log(data);\n  });\n};\n\nasyncThunk();\n\n```",
      "The `getData` function won't be called immediately but it will be invoked only when the data is available from API\nendpoint. The setTimeout function is also used to make our code asynchronous. The best real time example is redux\nstate management library which uses the asynchronous thunks to delay the actions to dispatch."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-353",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is the output of below function calls",
    "answer": [
      "**Code snippet:**",
      "```javascript\nconst circle = {\n  radius: 20,\n  diameter() {\n    return this.radius * 2;\n  },\n  perimeter: () => 2 * Math.PI * this.radius,\n};\n\n```",
      "```javascript\nconsole.log(circle.diameter());\nconsole.log(circle.perimeter());\n\n```",
      "**Output:**",
      "The output is 40 and NaN. Remember that diameter is a regular function, whereas the value of perimeter is an arrow\nfunction. The `this` keyword of a regular function(i.e, diameter) refers to the surrounding scope which is a class(\ni.e, Shape object). Whereas this keyword of perimeter function refers to the surrounding scope which is a window\nobject. Since there is no radius property on window objects it returns an undefined value and the multiple of\nnumber value returns NaN value."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-354",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How to remove all line breaks from a string",
    "answer": [
      "The easiest approach is using regular expressions to detect and replace newlines in the string. In this case, we\nuse replace function along with string to replace with, which in our case is an empty string.",
      "```javascript\nfunction remove_linebreaks( var message ) {\n    return message.replace( /[\\r\\n]+/gm, \"\" );\n}\n\n```",
      "In the above expression, g and m are for global and multiline flags."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-355",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is the difference between reflow and repaint",
    "answer": [
      "A _repaint_ occurs when changes are made which affect the visibility of an element, but not its layout. Examples of\nthis include outline, visibility, or background color. A _reflow_ involves changes that affect the layout of a\nportion of the page (or the whole page). Resizing the browser window, changing the font, content changing (such as\nuser typing text), using JavaScript methods involving computed styles, adding or removing elements from the DOM,\nand changing an element's classes are a few of the things that can trigger reflow. Reflow of an element causes the\nsubsequent reflow of all child and ancestor elements as well as any elements following it in the DOM."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-356",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What happens with negating an array",
    "answer": [
      "Negating an array with `!` character will coerce the array into a boolean. Since Arrays are considered to be truthy\nSo negating it will return `false`.",
      "```javascript\nconsole.log(![]); // false\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-357",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What happens if we add two arrays",
    "answer": [
      "If you add two arrays together, it will convert them both to strings and concatenate them. For example, the result\nof adding arrays would be as below,",
      "```javascript\nconsole.log([\"a\"] + [\"b\"]); // \"ab\"\nconsole.log([] + []); // \"\"\nconsole.log(![] + []); // \"false\", because ![] returns false.\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-358",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is the output of prepend additive operator on falsy values",
    "answer": [
      "If you prepend the additive(+) operator on falsy values(null, undefined, NaN, false, \"\"), the falsy value converts\nto a number value zero. Let's display them on browser console as below,",
      "```javascript\nconsole.log(+null); // 0\nconsole.log(+undefined); // NaN\nconsole.log(+false); // 0\nconsole.log(+NaN); // NaN\nconsole.log(+\"\"); // 0\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-359",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you create self string using special characters",
    "answer": [
      "The self string can be formed with the combination of `[]()!+` characters. You need to remember the below\nconventions to achieve this pattern."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-360",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you remove falsy values from an array",
    "answer": [
      "You can apply the filter method on the array by passing Boolean as a parameter. This way it removes all falsy\nvalues(0, undefined, null, false and \"\") from the array.",
      "```javascript\nconst myArray = [false, null, 1, 5, undefined];\nmyArray.filter(Boolean); // [1, 5] // is same as myArray.filter(x => x);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-361",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you get unique values of an array",
    "answer": [
      "You can get unique values of an array with the combination of `Set` and rest expression/spread(...) syntax.",
      "```javascript\nconsole.log([...new Set([1, 2, 4, 4, 3])]); // [1, 2, 4, 3]\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-362",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is destructuring aliases",
    "answer": [
      "Sometimes you would like to have a destructured variable with a different name than the property name. In that\ncase, you'll use a `: newName` to specify a name for the variable. This process is called destructuring aliases.",
      "```javascript\nconst obj = { x: 1 };\n// Grabs obj.x as as { otherName }\nconst { x: otherName } = obj;\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-363",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you map the array values without using map method",
    "answer": [
      "You can map the array values without using the `map` method by just using the `from` method of Array. Let's map\ncity names from Countries array,",
      "```javascript\nconst countries = [\n  { name: \"India\", capital: \"Delhi\" },\n  { name: \"US\", capital: \"Washington\" },\n  { name: \"Russia\", capital: \"Moscow\" },\n  { name: \"Singapore\", capital: \"Singapore\" },\n  { name: \"China\", capital: \"Beijing\" },\n  { name: \"France\", capital: \"Paris\" },\n];\n\nconst cityNames = Array.from(countries, ({ capital }) => capital);\nconsole.log(cityNames); // ['Delhi, 'Washington', 'Moscow', 'Singapore', 'Beijing', 'Paris']\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-364",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you empty an array",
    "answer": [
      "You can empty an array quickly by setting the array length to zero.",
      "```javascript\nlet cities = [\"Singapore\", \"Delhi\", \"London\"];\ncities.length = 0; // cities becomes []\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-365",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you rounding numbers to certain decimals",
    "answer": [
      "You can round numbers to a certain number of decimals using `toFixed` method from native javascript.",
      "```javascript\nlet pie = 3.141592653;\npie = pie.toFixed(3); // 3.142\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-366",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is the easiest way to convert an array to an object",
    "answer": [
      "You can convert an array to an object with the same data using spread(...) operator.",
      "```javascript\nvar fruits = [\"banana\", \"apple\", \"orange\", \"watermelon\"];\nvar fruitsObject = { ...fruits };\nconsole.log(fruitsObject); // {0: \"banana\", 1: \"apple\", 2: \"orange\", 3: \"watermelon\"}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-367",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you create an array with some data",
    "answer": [
      "You can create an array with some data or an array with the same values using `fill` method.",
      "```javascript\nvar newArray = new Array(5).fill(\"0\");\nconsole.log(newArray); // [\"0\", \"0\", \"0\", \"0\", \"0\"]\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-368",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What are the placeholders from console object",
    "answer": [
      "Below are the list of placeholders available from console object,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-369",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "Is it possible to add CSS to console messages",
    "answer": [
      "Yes, you can apply CSS styles to console messages similar to html text on the web page.",
      "```javascript\nconsole.log(\n  \"%c The text has blue color, with large font and red background\",\n  \"color: blue; font-size: x-large; background: red\"\n);\n\n```",
      "The text will be displayed as below,\n![Screenshot](images/console-css.png)",
      "**Note:** All CSS styles can be applied to console messages."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-370",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is the purpose of dir method of console object",
    "answer": [
      "The `console.dir()` is used to display an interactive list of the properties of the specified JavaScript object as\nJSON.",
      "```javascript\nconst user = { name: \"John\", id: 1, city: \"Delhi\" };\nconsole.dir(user);\n\n```",
      "The user object displayed in JSON representation\n![Screenshot](images/console-dir.png)"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-371",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "Is it possible to debug HTML elements in console",
    "answer": [
      "Yes, it is possible to get and debug HTML elements in the console just like inspecting elements.",
      "```javascript\nconst element = document.getElementsByTagName(\"body\")[0];\nconsole.log(element);\n\n```",
      "It prints the HTML element in the console,",
      "![Screenshot](images/console-html.png)"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-372",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you display data in a tabular format using console object",
    "answer": [
      "The `console.table()` is used to display data in the console in a tabular format to visualize complex arrays or\nobjects.",
      "```js\nconst users = [\n  { name: \"John\", id: 1, city: \"Delhi\" },\n  { name: \"Max\", id: 2, city: \"London\" },\n  { name: \"Rod\", id: 3, city: \"Paris\" },\n];\nconsole.table(users);\n\n```",
      "The data visualized in a table format,",
      "![Screenshot](images/console-table.png)\n**Not:** Remember that `console.table()` is not supported in IE."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-373",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you verify that an argument is a Number or not",
    "answer": [
      "The combination of IsNaN and isFinite methods are used to confirm whether an argument is a number or not.",
      "```javascript\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-374",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you create copy to clipboard button",
    "answer": [
      "You need to select the content(using .select() method) of the input element and execute the copy command with\nexecCommand (i.e, execCommand('copy')). You can also execute other system commands like cut and paste.",
      "```javascript\ndocument.querySelector(\"#copy-button\").onclick = function () {\n  // Select the content\n  document.querySelector(\"#copy-input\").select();\n  // Copy to the clipboard\n  document.execCommand(\"copy\");\n};\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-375",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is the shortcut to get timestamp",
    "answer": [
      "You can use `new Date().getTime()` to get the current timestamp. There is an alternative shortcut to get the value.",
      "```javascript\nconsole.log(+new Date());\nconsole.log(Date.now());\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-376",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you flattening multi dimensional arrays",
    "answer": [
      "Flattening bi-dimensional arrays is trivial with Spread operator.",
      "```javascript\nconst biDimensionalArr = [11, [22, 33], [44, 55], [66, 77], 88, 99];\nconst flattenArr = [].concat(...biDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]\n\n```",
      "But you can make it work with multi-dimensional arrays by recursive calls,",
      "```javascript\nfunction flattenMultiArray(arr) {\n  const flattened = [].concat(...arr);\n  return flattened.some((item) => Array.isArray(item))\n    ? flattenMultiArray(flattened)\n    : flattened;\n}\nconst multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];\nconst flatArr = flattenMultiArray(multiDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]\n\n```",
      "Also you can use the `flat` method of Array.",
      "```javascript\nconst arr = [1, [2,3], 4, 5, [6,7]];\nconst fllattenArr = arr.flat(); // [1, 2, 3, 4, 5, 6, 7]\n\n// And for multiDemensional arrays\nconst multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];\nconst oneStepFlat = multiDimensionalArr.flat(1); // [11, 22, 33, 44, [55, 66, [77, [88]], 99]]\nconst towStep = multiDimensionalArr.flat(2); // [11, 22, 33, 44, 55, 66, [77, [88]], 99]\nconst fullyFlatArray = multiDimensionalArr.flat(Infinity); // [11, 22, 33, 44, 55, 66, 77, 88, 99]\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-377",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is the easiest multi condition checking",
    "answer": [
      "You can use `indexOf` to compare input with multiple values instead of checking each value as one condition.",
      "```javascript\n// Verbose approach\nif (\n  input === \"first\" ||\n  input === 1 ||\n  input === \"second\" ||\n  input === 2\n) {\n  someFunction();\n}\n// Shortcut\nif ([\"first\", 1, \"second\", 2].indexOf(input) !== -1) {\n  someFunction();\n}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-378",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you capture browser back button",
    "answer": [
      "The `window.onbeforeunload` method is used to capture browser back button events. This is helpful to warn users\nabout losing the current data.",
      "```javascript\nwindow.onbeforeunload = function () {\n  alert(\"You work will be lost\");\n};\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-379",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How do you disable right click in the web page",
    "answer": [
      "The right click on the page can be disabled by returning false from the `oncontextmenu` attribute on the body\nelement.",
      "```html\n<body oncontextmenu=\"return false;\"></body>\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-380",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What are wrapper objects",
    "answer": [
      "Primitive Values like string,number and boolean don't have properties and methods but they are temporarily\nconverted or coerced to an object(Wrapper object) when you try to perform actions on them. For example, if you\napply toUpperCase() method on a primitive string value, it does not throw an error but returns uppercase of the\nstring.",
      "```javascript\nlet name = \"john\";\n\nconsole.log(name.toUpperCase()); // Behind the scenes treated as console.log(new String(name).toUpperCase());\n\n```",
      "i.e, Every primitive except null and undefined have Wrapper Objects and the list of wrapper objects are\nString,Number,Boolean,Symbol and BigInt."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-381",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What is AJAX",
    "answer": [
      "AJAX stands for Asynchronous JavaScript and XML and it is a group of related technologies(HTML, CSS, JavaScript,\nXMLHttpRequest API etc) used to display data asynchronously. i.e. We can send data to the server and get data from\nthe server without reloading the web page."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-382",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "What are the different ways to deal with Asynchronous Code",
    "answer": [
      "Below are the list of different ways to deal with Asynchronous code."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415543-383",
    "date": "2023-04-12T12:26:55.543Z",
    "question": "How to cancel a fetch request",
    "answer": [
      "Until a few days back, One shortcoming of native promises is no direct way to cancel a fetch request. But the\nnew `AbortController` from js specification allows you to use a signal to abort one or multiple fetch calls.\nThe basic flow of cancelling a fetch request would be as below,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-384",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is web speech API",
    "answer": [
      "Web speech API is used to enable modern browsers recognize and synthesize speech(i.e, voice data into web apps).\nThis API has been introduced by W3C Community in the year 2012. It has two main parts,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-385",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is minimum timeout throttling",
    "answer": [
      "Both browser and NodeJS javascript environments throttles with a minimum delay that is greater than 0ms. That means\neven though setting a delay of 0ms will not happen instantaneously.\n**Browsers:** They have a minimum delay of 4ms. This throttle occurs when successive calls are triggered due to\ncallback nesting(certain depth) or after a certain number of successive intervals.\nNote: The older browsers have a minimum delay of 10ms.\n**Nodejs:** They have a minimum delay of 1ms. This throttle happens when the delay is larger than 2147483647 or\nless than 1.\nThe best example to explain this timeout throttling behavior is the order of below code snippet.",
      "```javascript\nfunction runMeFirst() {\n  console.log(\"My script is initialized\");\n}\nsetTimeout(runMeFirst, 0);\nconsole.log(\"Script loaded\");\n\n```",
      "and the output would be in",
      "```cmd\nScript loaded\nMy script is initialized\n\n```",
      "If you don't use `setTimeout`, the order of logs will be sequential.",
      "```javascript\nfunction runMeFirst() {\n  console.log(\"My script is initialized\");\n}\nrunMeFirst();\nconsole.log(\"Script loaded\");\n\n```",
      "and the output is,",
      "```cmd\nMy script is initialized\nScript loaded\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-386",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How do you implement zero timeout in modern browsers",
    "answer": [
      "You can't use setTimeout(fn, 0) to execute the code immediately due to minimum delay of greater than 0ms. But you\ncan use window.postMessage() to achieve this behavior."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-387",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What are tasks in event loop",
    "answer": [
      "A task is any javascript code/program which is scheduled to be run by the standard mechanisms such as initially\nstarting to run a program, run an event callback, or an interval or timeout being fired. All these tasks are\nscheduled on a task queue.\nBelow are the list of use cases to add tasks to the task queue,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-388",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is microtask",
    "answer": [
      "Microtask is the javascript code which needs to be executed immediately after the currently executing\ntask/microtask is completed. They are kind of blocking in nature. i.e, The main thread will be blocked until the\nmicrotask queue is empty.\nThe main sources of microtasks are Promise.resolve, Promise.reject, MutationObservers, IntersectionObservers etc",
      "**Note:** All of these microtasks are processed in the same turn of the event loop.\n**[⬆ Back to Top](#table-of-contents)**"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-389",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What are different event loops",
    "answer": [
      "In JavaScript, there are multiple event loops that can be used depending on the context of your application. The\nmost common event loops are:"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-390",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is the purpose of queueMicrotask",
    "answer": [],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-391",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How do you use javascript libraries in typescript file",
    "answer": [
      "It is known that not all JavaScript libraries or frameworks have TypeScript declaration files. But if you still\nwant to use libraries or frameworks in our TypeScript files without getting compilation errors, the only solution\nis `declare` keyword along with a variable declaration. For example, let's imagine you have a library\ncalled `customLibrary` that doesn’t have a TypeScript declaration and have a namespace called `customLibrary` in\nthe global namespace. You can use this library in typescript code as below,",
      "```javascript\ndeclare var customLibrary;\n\n```",
      "In the runtime, typescript will provide the type to the `customLibrary` variable as `any` type. The another\nalternative without using declare keyword is below",
      "```javascript\nvar customLibrary: any;\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-392",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What are the differences between promises and observables",
    "answer": [
      "Some of the major difference in a tabular form",
      "| Promises                                                           | Observables                                                                              |\n          | ------------------------------------------------------------------ | ---------------------------------------------------------------------------------------- |\n| Emits only a single value at a time                                | Emits multiple values over a period of time(stream of values ranging from 0 to multiple) |\n| Eager in nature; they are going to be called immediately           | Lazy in nature; they require subscription to be invoked                                  |\n| Promise is always asynchronous even though it resolved immediately | Observable can be either synchronous or asynchronous                                     |\n| Doesn't provide any operators                                      | Provides operators such as map, forEach, filter, reduce, retry, and retryWhen etc        |\n| Cannot be canceled                                                 | Canceled by using unsubscribe() method                                                   |"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-393",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is heap",
    "answer": [
      "Heap(Or memory heap) is the memory location where objects are stored when we define variables. i.e, This is the\nplace where all the memory allocations and de-allocation take place. Both heap and call-stack are two containers of\nJS runtime.\nWhenever runtime comes across variables and function declarations in the code it stores them in the Heap.",
      "![Screenshot](images/heap.png)"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-394",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is an event table",
    "answer": [
      "Event Table is a data structure that stores and keeps track of all the events which will be executed asynchronously\nlike after some time interval or after the resolution of some API requests. i.e Whenever you call a setTimeout\nfunction or invoke async operation, it is added to the Event Table.\nIt doesn't not execute functions on it’s own. The main purpose of the event table is to keep track of events and\nsend them to the Event Queue as shown in the below diagram.",
      "![Screenshot](images/event-table.png)"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-395",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is a microTask queue",
    "answer": [
      "Microtask Queue is the new queue where all the tasks initiated by promise objects get processed before the callback\nqueue.\nThe microtasks queue are processed before the next rendering and painting jobs. But if these microtasks are running\nfor a long time then it leads to visual degradation."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-396",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is the difference between shim and polyfill",
    "answer": [
      "A shim is a library that brings a new API to an older environment, using only the means of that environment. It\nisn't necessarily restricted to a web application. For example, es5-shim.js is used to emulate ES5 features on\nolder browsers (mainly pre IE9).\nWhereas polyfill is a piece of code (or plugin) that provides the technology that you, the developer, expect the\nbrowser to provide natively.\nIn a simple sentence, A polyfill is a shim for a browser API."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-397",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How do you detect primitive or non primitive value type",
    "answer": [
      "In JavaScript, primitive types include boolean, string, number, BigInt, null, Symbol and undefined. Whereas\nnon-primitive types include the Objects. But you can easily identify them with the below function,",
      "```javascript\nvar myPrimitive = 30;\nvar myNonPrimitive = {};\nfunction isPrimitive(val) {\n  return Object(val) !== val;\n}\n\nisPrimitive(myPrimitive);\nisPrimitive(myNonPrimitive);\n\n```",
      "If the value is a primitive data type, the Object constructor creates a new wrapper object for the value. But If\nthe value is a non-primitive data type (an object), the Object constructor will give the same object."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-398",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is babel",
    "answer": [
      "Babel is a JavaScript transpiler to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript\nin current and older browsers or environments. Some of the main features are listed below,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-399",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "Is Node.js completely single threaded",
    "answer": [
      "Node is a single thread, but some of the functions included in the Node.js standard library(e.g, fs module\nfunctions) are not single threaded. i.e, Their logic runs outside of the Node.js single thread to improve the speed\nand performance of a program."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-400",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What are the common use cases of observables",
    "answer": [
      "Some of the most common use cases of observables are web sockets with push notifications, user input changes,\nrepeating intervals, etc"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-401",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is RxJS",
    "answer": [
      "RxJS (Reactive Extensions for JavaScript) is a library for implementing reactive programming using observables that\nmakes it easier to compose asynchronous or callback-based code. It also provides utility functions for creating and\nworking with observables."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-402",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is the difference between Function constructor and function declaration",
    "answer": [
      "The functions which are created with `Function constructor` do not create closures to their creation contexts but\nthey are always created in the global scope. i.e, the function can access its own local variables and global scope\nvariables only. Whereas function declarations can access outer function variables(closures) too.",
      "Let's see this difference with an example,",
      "**Function Constructor:**",
      "```javascript\nvar a = 100;\nfunction createFunction() {\n  var a = 200;\n  return new Function(\"return a;\");\n}\nconsole.log(createFunction()()); // 100\n\n```",
      "**Function declaration:**",
      "```javascript\nvar a = 100;\nfunction createFunction() {\n  var a = 200;\n  return function func() {\n    return a;\n  };\n}\nconsole.log(createFunction()()); // 200\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-403",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is a Short circuit condition",
    "answer": [
      "Short circuit conditions are meant for condensed way of writing simple if statements. Let's demonstrate the\nscenario using an example. If you would like to login to a portal with an authentication condition, the expression\nwould be as below,",
      "```javascript\nif (authenticate) {\n  loginToPorta();\n}\n\n```",
      "Since the javascript logical operators evaluated from left to right, the above expression can be simplified\nusing && logical operator",
      "```javascript\nauthenticate && loginToPorta();\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-404",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is the easiest way to resize an array",
    "answer": [
      "The length property of an array is useful to resize or empty an array quickly. Let's apply length property on\nnumber array to resize the number of elements from 5 to 2,",
      "```javascript\nvar array = [1, 2, 3, 4, 5];\nconsole.log(array.length); // 5\n\narray.length = 2;\nconsole.log(array.length); // 2\nconsole.log(array); // [1,2]\n\n```",
      "and the array can be emptied too",
      "```javascript\nvar array = [1, 2, 3, 4, 5];\narray.length = 0;\nconsole.log(array.length); // 0\nconsole.log(array); // []\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-405",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is an observable",
    "answer": [
      "An Observable is basically a function that can return a stream of values either synchronously or asynchronously to\nan observer over time. The consumer can get the value by calling `subscribe()` method.\nLet's look at a simple example of an Observable",
      "```javascript\nimport { Observable } from \"rxjs\";\n\nconst observable = new Observable((observer) => {\n  setTimeout(() => {\n    observer.next(\"Message from a Observable!\");\n  }, 3000);\n});\n\nobservable.subscribe((value) => console.log(value));\n\n```",
      "![Screenshot](images/observables.png)",
      "**Note:** Observables are not part of the JavaScript language yet but they are being proposed to be added to the\nlanguage"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-406",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is the difference between function and class declarations",
    "answer": [
      "The main difference between function declarations and class declarations is `hoisting`. The function declarations\nare hoisted but not class declarations.",
      "**Classes:**",
      "```javascript\nconst user = new User(); // ReferenceError\n\nclass User {}\n\n```",
      "**Constructor Function:**",
      "```javascript\nconst user = new User(); // No error\n\nfunction User() {}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-407",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is an async function",
    "answer": [
      "An async function is a function declared with the `async` keyword which enables asynchronous, promise-based\nbehavior to be written in a cleaner style by avoiding promise chains. These functions can contain zero or\nmore `await` expressions.",
      "Let's take a below async function example,",
      "```javascript\nasync function logger() {\n  let data = await fetch(\"http://someapi.com/users\"); // pause until fetch returns\n  console.log(data);\n}\nlogger();\n\n```",
      "It is basically syntax sugar over ES2015 promises and generators."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-408",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How do you prevent promises swallowing errors",
    "answer": [
      "While using asynchronous code, JavaScript’s ES6 promises can make your life a lot easier without having callback\npyramids and error handling on every second line. But Promises have some pitfalls and the biggest one is swallowing\nerrors by default.",
      "Let's say you expect to print an error to the console for all the below cases,",
      "```javascript\nPromise.resolve(\"promised value\").then(function () {\n  throw new Error(\"error\");\n});\n\nPromise.reject(\"error value\").catch(function () {\n  throw new Error(\"error\");\n});\n\nnew Promise(function (resolve, reject) {\n  throw new Error(\"error\");\n});\n\n```",
      "But there are many modern JavaScript environments that won't print any errors. You can fix this problem in\ndifferent ways,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-409",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is deno",
    "answer": [
      "Deno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 JavaScript engine and the\nRust programming language."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-410",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How do you make an object iterable in javascript",
    "answer": [
      "By default, plain objects are not iterable. But you can make the object iterable by defining a `Symbol.iterator`\nproperty on it.",
      "Let's demonstrate this with an example,",
      "```javascript\nconst collection = {\n  one: 1,\n  two: 2,\n  three: 3,\n  [Symbol.iterator]() {\n    const values = Object.keys(this);\n    let i = 0;\n    return {\n      next: () => {\n        return {\n          value: this[values[i++]],\n          done: i > values.length,\n        };\n      },\n    };\n  },\n};\n\nconst iterator = collection[Symbol.iterator]();\n\nconsole.log(iterator.next()); // → {value: 1, done: false}\nconsole.log(iterator.next()); // → {value: 2, done: false}\nconsole.log(iterator.next()); // → {value: 3, done: false}\nconsole.log(iterator.next()); // → {value: undefined, done: true}\n\n```",
      "The above process can be simplified using a generator function,",
      "```javascript\nconst collection = {\n  one: 1,\n  two: 2,\n  three: 3,\n  [Symbol.iterator]: function* () {\n    for (let key in this) {\n      yield this[key];\n    }\n  },\n};\nconst iterator = collection[Symbol.iterator]();\nconsole.log(iterator.next()); // {value: 1, done: false}\nconsole.log(iterator.next()); // {value: 2, done: false}\nconsole.log(iterator.next()); // {value: 3, done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-411",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is a Proper Tail Call",
    "answer": [
      "First, we should know about tail call before talking about \"Proper Tail Call\". A tail call is a subroutine or\nfunction call performed as the final action of a calling function. Whereas **Proper tail call(PTC)** is a technique\nwhere the program or code will not create additional stack frames for a recursion when the function call is a tail\ncall.",
      "For example, the below classic or head recursion of factorial function relies on stack for each step. Each step\nneed to be processed upto `n * factorial(n - 1)`",
      "```javascript\nfunction factorial(n) {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\nconsole.log(factorial(5)); //120\n\n```",
      "But if you use Tail recursion functions, they keep passing all the necessary data it needs down the recursion\nwithout relying on the stack.",
      "```javascript\nfunction factorial(n, acc = 1) {\n  if (n === 0) {\n    return acc;\n  }\n  return factorial(n - 1, n * acc);\n}\nconsole.log(factorial(5)); //120\n\n```",
      "The above pattern returns the same output as the first one. But the accumulator keeps track of total as an argument\nwithout using stack memory on recursive calls."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-412",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How do you check an object is a promise or not",
    "answer": [
      "If you don't know if a value is a promise or not, wrapping the value as `Promise.resolve(value)` which returns a\npromise",
      "```javascript\nfunction isPromise(object) {\n  if (Promise && Promise.resolve) {\n    return Promise.resolve(object) == object;\n  } else {\n    throw \"Promise not supported in your environment\";\n  }\n}\n\nvar i = 1;\nvar promise = new Promise(function (resolve, reject) {\n  resolve();\n});\n\nconsole.log(isPromise(i)); // false\nconsole.log(isPromise(promise)); // true\n\n```",
      "Another way is to check for `.then()` handler type",
      "```javascript\nfunction isPromise(value) {\n  return Boolean(value && typeof value.then === \"function\");\n}\nvar i = 1;\nvar promise = new Promise(function (resolve, reject) {\n  resolve();\n});\n\nconsole.log(isPromise(i)); // false\nconsole.log(isPromise(promise)); // true\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-413",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How to detect if a function is called as constructor",
    "answer": [
      "You can use `new.target` pseudo-property to detect whether a function was called as a constructor(using the new\noperator) or as a regular function call."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-414",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What are the differences between arguments object and rest parameter",
    "answer": [
      "There are three main differences between arguments object and rest parameters"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-415",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What are the differences between spread operator and rest parameter",
    "answer": [
      "Rest parameter collects all remaining elements into an array. Whereas Spread operator allows iterables( arrays /\nobjects / strings ) to be expanded into single arguments/elements. i.e, Rest parameter is opposite to the spread\noperator."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-416",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What are the different kinds of generators",
    "answer": [
      "There are five kinds of generators,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-417",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What are the built-in iterables",
    "answer": [
      "Below are the list of built-in iterables in javascript,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-418",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What are the differences between for...of and for...in statements",
    "answer": [
      "Both for...in and for...of statements iterate over js data structures. The only difference is over what they\niterate:"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-419",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How do you define instance and non-instance properties",
    "answer": [
      "The Instance properties must be defined inside of class methods. For example, name and age properties defined\ninside constructor as below,",
      "```javascript\nclass Person {\n  constructor(name, age) {\n    this.name = name;\n    this.age = age;\n  }\n}\n\n```",
      "But Static(class) and prototype data properties must be defined outside of the ClassBody declaration. Let's assign\nthe age value for Person class as below,",
      "```javascript\nPerson.staticAge = 30;\nPerson.prototype.prototypeAge = 40;\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-420",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is the difference between isNaN and Number.isNaN?",
    "answer": [],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-421",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How to invoke an IIFE without any extra brackets?",
    "answer": [
      "Immediately Invoked Function Expressions(IIFE) requires a pair of parenthesis to wrap the function which contains\nset of statements.",
      "```js\n(function (dt) {\n  console.log(dt.toLocaleTimeString());\n})(new Date());\n\n```",
      "Since both IIFE and void operator discard the result of an expression, you can avoid the extra brackets\nusing `void operator` for IIFE as below,",
      "```js\nvoid function (dt) {\n  console.log(dt.toLocaleTimeString());\n}(new Date());\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-422",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "Is that possible to use expressions in switch cases?",
    "answer": [
      "You might have seen expressions used in switch condition but it is also possible to use for switch cases by\nassigning true value for the switch condition. Let's see the weather condition based on temparature as an example,",
      "```js\nconst weather = (function getWeather(temp) {\n  switch (true) {\n    case temp < 0:\n      return \"freezing\";\n    case temp < 10:\n      return \"cold\";\n    case temp < 24:\n      return \"cool\";\n    default:\n      return \"unknown\";\n  }\n})(10);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-423",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is the easiest way to ignore promise errors?",
    "answer": [
      "The easiest and safest way to ignore promise errors is void that error. This approach is ESLint friendly too.",
      "```js\nawait promise.catch((e) => void e);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-424",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How do style the console output using CSS?",
    "answer": [
      "You can add CSS styling to the console output using the CSS format content specifier %c. The console string message\ncan be appended after the specifier and CSS style in another argument. Let's print the red the color text using\nconsole.log and CSS specifier as below,",
      "```js\nconsole.log(\"%cThis is a red text\", \"color:red\");\n\n```",
      "It is also possible to add more styles for the content. For example, the font-size can be modified for the above\ntext",
      "```js\nconsole.log(\n  \"%cThis is a red text with bigger font\",\n  \"color:red; font-size:20px\"\n);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-425",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is nullish coalescing operator (??)?",
    "answer": [
      "It is a logical operator that returns its right-hand side operand when its left-hand side operand is null or\nundefined, and otherwise returns its left-hand side operand. This can be contrasted with the logical OR (||)\noperator, which returns the right-hand side operand if the left operand is any falsy value, not only null or\nundefined.",
      "```js\nconsole.log(null ?? true); // true\nconsole.log(false ?? true); // false\nconsole.log(undefined ?? true); // true\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-426",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How do you group and nest console output?",
    "answer": [
      "The `console.group()` can be used to group related log messages to be able to easily read the logs and use\nconsole.groupEnd()to close the group. Along with this, you can also nest groups which allows to output message in\nhierarchical manner.",
      "For example, if you’re logging a user’s details:",
      "```js\nconsole.group(\"User Details\");\nconsole.log(\"name: Sudheer Jonna\");\nconsole.log(\"job: Software Developer\");\n\n// Nested Group\nconsole.group(\"Address\");\nconsole.log(\"Street: Commonwealth\");\nconsole.log(\"City: Los Angeles\");\nconsole.log(\"State: California\");\n\n// Close nested group\nconsole.groupEnd();\n\n// Close outer group\nconsole.groupEnd()\n\n```",
      "You can also use `console.groupCollapsed()` instead of `console.group()` if you want the groups to be collapsed by\ndefault."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-427",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is the difference between dense and sparse arrays?",
    "answer": [
      "An array contains items at each index starting from first(0) to last(array.length - 1) is called as Dense array.\nWhereas if at least one item is missing at any index, the array is called as sparse.",
      "Let's see the below two kind of arrays,",
      "```js\nconst avengers = [\"Ironman\", \"Hulk\", \"CaptainAmerica\"];\nconsole.log(avengers[0]); // 'Ironman'\nconsole.log(avengers[1]); // 'Hulk'\nconsole.log(avengers[2]); // 'CaptainAmerica'\nconsole.log(avengers.length); // 3\n\nconst justiceLeague = [\"Superman\", \"Aquaman\", , \"Batman\"];\nconsole.log(justiceLeague[0]); // 'Superman'\nconsole.log(justiceLeague[1]); // 'Aquaman'\nconsole.log(justiceLeague[2]); // undefined\nconsole.log(justiceLeague[3]); // 'Batman'\nconsole.log(justiceLeague.length); // 4\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-428",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What are the different ways to create sparse arrays?",
    "answer": [
      "There are 4 different ways to create sparse arrays in JavaScript"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-429",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is the difference between setTimeout, setImmediate and process.nextTick?",
    "answer": [],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-430",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How do you reverse an array without modifying original array?",
    "answer": [
      "The `reverse()` method reverses the order of the elements in an array but it mutates the original array. Let's take\na simple example to demonistrate this case,",
      "```javascript\nconst originalArray = [1, 2, 3, 4, 5];\nconst newArray = originalArray.reverse();\n\nconsole.log(newArray); // [ 5, 4, 3, 2, 1]\nconsole.log(originalArray); // [ 5, 4, 3, 2, 1]\n\n```",
      "There are few solutions that won't mutate the original array. Let's take a look."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-431",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "How do you create custom HTML element?",
    "answer": [
      "The creation of custom HTML elements involves two main steps,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415544-432",
    "date": "2023-04-12T12:26:55.544Z",
    "question": "What is global execution context?",
    "answer": [
      "The global execution context is the default or first execution context that is created by the JavaScript engine\nbefore any code is executed(i.e, when the file first loads in the browser). All the global code that is not inside\na function or object will be executed inside this global execution context. Since JS engine is single threaded\nthere will be only one global environment and there will be only one global execution context.",
      "For example, the below code other than code inside any function or object is executed inside the global execution\ncontext.",
      "```javascript\nvar x = 10;\n\nfunction A() {\n  console.log(\"Start function A\");\n\n  function B() {\n    console.log(\"In function B\");\n  }\n\n  B();\n}\n\nA();\n\nconsole.log(\"GlobalContext\");\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-433",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What is function execution context?",
    "answer": [
      "Whenever a function is invoked, the JavaScript engine creates a different type of Execution Context known as a\nFunction Execution Context (FEC) within the Global Execution Context (GEC) to evaluate and execute the code within\nthat function."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-434",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What is debouncing?",
    "answer": [
      "Debouncing is a programming pattern that allows delaying execution of some piece of code until a specified time to\navoid unnecessary _CPU cycles, API calls and improve performance_. The debounce function make sure that your code\nis only triggered once per user input. The common usecases are Search box suggestions, text-field auto-saves, and\neliminating double-button clicks.",
      "Let's say you want to show suggestions for a search query, but only after a visitor has finished typing it. So here\nyou write a debounce function where the user keeps writing the characters with in 500ms then previous timer cleared\nout using `clearTimeout` and reschedule API call/DB query for a new time—300 ms in the future.",
      "```js\nfunction debounce(func, timeout = 500) {\n  let timer;\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      func.apply(this, args);\n    }, timeout);\n  };\n}\nfunction fetchResults() {\n  console.log(\"Fetching input suggestions\");\n}\nconst processChange = debounce(() => fetchResults());\n\n```",
      "The _debounce()_ function can be used on input, button and window events",
      "**Input:**",
      "```html\n<input type=\"text\" onkeyup=\"processChange()\" />\n\n```",
      "**Button:**",
      "```html\n<button onclick=\"processChange()\">Click me</button>\n\n```",
      "**Windows event:**",
      "```html\nwindow.addEventListener(\"scroll\", processChange);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-435",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What is throttling?",
    "answer": [
      "Throttling is a technique used to limit the execution of an event handler function, even when this event triggers\ncontinuously due to user actions. The common use cases are browser resizing, window scrolling etc.",
      "The below example creates a throttle function to reduce the number of events for each pixel change and trigger\nscroll event for each 100ms except for the first event.",
      "```js\nconst throttle = (func, limit) => {\n  let inThrottle;\n  return (...args) => {\n    if (!inThrottle) {\n      func.apply(this, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n};\nwindow.addEventListener(\"scroll\", () => {\n  throttle(handleScrollAnimation, 100);\n});\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-436",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What is optional chaining?",
    "answer": [
      "According to MDN official docs, the optional chaining operator (?.) permits reading the value of a property located\ndeep within a chain of connected objects without having to expressly validate that each reference in the chain is\nvalid.",
      "The ?. operator is like the . chaining operator, except that instead of causing an error if a reference is\nnullish (null or undefined), the expression short-circuits with a return value of undefined. When used with\nfunction calls, it returns undefined if the given function does not exist.",
      "```js\n const adventurer = {\n   name: 'Alice',\n   cat: {\n     name: 'Dinah'\n   }\n };\n\n const dogName = adventurer.dog?.name;\n console.log(dogName);\n // expected output: undefined\n\n console.log(adventurer.someNonExistentMethod?.());\n // expected output: undefined\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-437",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What is an environment record?",
    "answer": [
      "According to ECMAScript specification 262 (9.1):",
      "[Environment Record](https://262.ecma-international.org/12.0/#sec-environment-records) is a specification type\n     used to define the association of Identifiers to specific variables and functions, based upon the lexical nesting\n     structure of ECMAScript code.",
      "Usually an Environment Record is associated with some specific syntactic structure of ECMAScript code such as a\nFunctionDeclaration, a BlockStatement, or a Catch clause of a TryStatement.",
      "Each time such code is evaluated, a new Environment Record is created to record the identifier bindings that are\ncreated by that code."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-438",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "How to verify if a variable is an array?",
    "answer": [
      "It is possible to check if a variable is an array instance using 3 different ways,"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-439",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What is pass by value and pass by reference?",
    "answer": [
      "Pass-by-value creates a new space in memory and makes a copy of a value. Primitives such as string, number, boolean\netc will actually create a new copy. Hence, updating one value doesn't impact the other value. i.e, The values are\nindependent of each other.",
      "```javascript\nlet a = 5;\nlet b = a;\n\nb++;\nconsole.log(a, b); //5, 6\n\n```",
      "In the above code snippet, the value of `a` is assigned to `b` and the variable `b` has been incremented. Since\nthere is a new space created for variable `b`, any update on this variable doesn't impact the variable `a`.",
      "Pass by reference doesn't create a new space in memory but the new variable adopts a memory address of an initial\nvariable. Non-primitives such as objects, arrays and functions gets the reference of the initiable variable. i.e,\nupdating one value will impact the other variable.",
      "```javascript\nlet user1 = {\n   name: 'John',\n   age: 27\n};\nlet user2 = user1;\nuser2.age = 30;\n\nconsole.log(user1.age, user2.age); // 30, 30\n\n```",
      "In the above code snippet, updating the `age` property of one object will impact the other property due to the same\nreference."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-440",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What are the differences between primitives and non-primitives?",
    "answer": [
      "JavaScript language has both primitives and non-primitives but there are few differences between them as below,",
      "| Primitives | Non-primitives |\n          |---- | ---------\n| These types are predefined | Created by developer |\n| These are immutable | Mutable |\n| Compare by value | Compare by reference |\n| Stored in Stack | Stored in heap |\n| Contain certain value | Can contain NULL too |"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-441",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "How do you create your own bind method using either call or apply method?",
    "answer": [
      "The custom bind function needs to be created on Function prototype inorder to use it as other builtin functions.\nThis custom function should return a function similar to original bind method and the implementation of inner\nfunction needs to use apply method call.",
      "The function which is going to bind using custom `myOwnBind` method act as the attached\nfunction(`boundTargetFunction`) and argument as the object for `apply` method call.",
      "```js\n Function.prototype.myOwnBind = function(whoIsCallingMe) {\n   if (typeof this !== \"function\") {\n     throw new Error(this + \"cannot be bound as it's not callable\");\n   }\n   const boundTargetFunction = this;\n   return function() {\n     boundTargetFunction.apply(whoIsCallingMe, arguments);\n   }\n }\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-442",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What are the differences between pure and impure functions?",
    "answer": [
      "Some of the major differences between pure and impure function are as below,",
      "Pure function"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-443",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What is referential transparency?",
    "answer": [
      "An expression in javascript can be replaced by its value without affecting the behaviour of the program is called\nreferential transparency. Pure functions are referentially transparent.",
      "```javascript\nconst add = (x, y) => x + y;\nconst multiplyBy2 = (x) => x * 2;\n\n//Now add (2, 3) can be replaced by 5.\n\nmultiplyBy2(add(2, 3)); \n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-444",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What are the possible side-effects in javascript?",
    "answer": [
      "A side effect is the modification of state through the invocation of a function or expression. These side effects makes\nour function impure by default. Below are some side effects which makes function impure,",
      "Making an HTTP request. Asynchronous functions such as fetch and promise are impure.",
      "DOM manipulations",
      "Mutating the input data",
      "Printing to a screen or console: For example, console.log() and alert()",
      "Fetching the current time",
      "Math.random() calls: Modifies the internal state of Math object"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-445",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What are compose and pipe functions?",
    "answer": [
      "The \"compose\" and \"pipe\" are two techniques commonly used in functional programming to simplify complex operations\nand make code more readable. They are not native in JavaScript and higher order functions. the `compose()` applies\nright to left any number of functions to the output of the previous function."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-446",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What is module pattern?",
    "answer": [
      "Module pattern is a designed pattern used to wrap a set of variables and functions together in a single scope\nreturned as an object. JavaScript doesn't have access specifiers similar to other languages(Java, Pythong etc) to\nprovide private scope. It uses IFFI (Immediately invoked function expression) to allow for private scopes. i.e, a\nclosure that protect variables and methods.",
      "The module pattern look like below,",
      "```javascript\n (function() {\n // Private variables or functions goes here.\n\n\n return {\n     // Return public variables or functions here.\n }\n\n\n })();\n\n```",
      "Let's see an example of module pattern for an employee with private and public access,",
      "```javascript\nconst createEmployee = (function () {\n   // Private\n   const name = \"John\";\n   const department = \"Sales\";\n   const getEmployeeName = () => name;\n   const getDepartmentName = () => department;\n\n\n   // Public\n   return {\n     name,\n     department,\n     getName: () => getEmployeeName(),\n     getDepartment: () => getDepartmentName(),\n   };\n })();\n\n\n console.log(createEmployee.name);\n console.log(createEmployee.department);\n console.log(createEmployee.getName());\n console.log(createEmployee.getDepartment());\n\n```",
      "**Note:** It mimic the concepts of classes with private variables and methods."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-447",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "What is Function Composition?",
    "answer": [
      "It is an approach where the result of one function is passed on to the next function, which is passed to another\nuntil the final function is executed for the final result.",
      "```javascript\n //example\n const double = x => x * 2\n const square = x => x * x\n\n var output1 = double(2);\n var output2 = square(output1);\n console.log(output2);\n\n var output_final = square(double(2));\n console.log(output_final);\n\n```"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-448",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "How to use await outside of async function prior to ES2022?",
    "answer": [
      "Prior to ES2022, if you attempted to use an await outside of an async function resulted in a SyntaxError.",
      "```javascript\nawait Promise.resolve(console.log('Hello await')); // SyntaxError: await is only valid in async function\n\n```",
      "But you can fix this issue with an alternative IIFE (Immediately Invoked Function Expression) to get access to the\nfeature.",
      "```javascript\n (async function() {\n   await Promise.resolve(console.log('Hello await')); // Hello await\n }());\n\n```",
      "In ES2022, you can write top-level await without writing any hacks."
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  },
  {
    "id": "1681302415545-449",
    "date": "2023-04-12T12:26:55.545Z",
    "question": "Coding Exercise",
    "answer": [
      "```javascript\nvar car = new Vehicle(\"Honda\", \"white\", \"2010\", \"UK\");\nconsole.log(car);\n\nfunction Vehicle(model, color, year, country) {\n  this.model = model;\n  this.color = color;\n  this.year = year;\n  this.country = country;\n}\n\n```",
      "1: Undefined",
      "2: ReferenceError",
      "3: null",
      "4: {model: \"Honda\", color: \"white\", year: \"2010\", country: \"UK\"}",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "The function declarations are hoisted similar to any variables. So the placement for `Vehicle` function declaration\ndoesn't make any difference.",
      "</p>\n</details>",
      "2. What is the output of below code",
      "```javascript\nfunction foo() {\n  let x = (y = 0);\n  x++;\n  y++;\n  return x;\n}\n\nconsole.log(foo(), typeof x, typeof y);\n\n```",
      "1: 1, undefined and undefined",
      "2: ReferenceError: X is not defined",
      "3: 1, undefined and number",
      "4: 1, number and number",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "Of course the return value of `foo()` is 1 due to the increment operator. But the statement `let x = y = 0` declares a\nlocal variable x. Whereas y declared as a global variable accidentally. This statement is equivalent to,",
      "```javascript\nlet x;\nwindow.y = 0;\nx = window.y;\n\n```",
      "Since the block scoped variable x is undefined outside of the function, the type will be undefined too. Whereas the\nglobal variable `y` is available outside the function, the value is 0 and type is number.",
      "</p>\n</details>",
      "3. What is the output of below code",
      "```javascript\nfunction main() {\n  console.log(\"A\");\n  setTimeout(function print() {\n    console.log(\"B\");\n  }, 0);\n  console.log(\"C\");\n}\n\nmain();\n\n```",
      "1: A, B and C",
      "2: B, A and C",
      "3: A and C",
      "4: A, C and B",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "The statements order is based on the event loop mechanism. The order of statements follows the below order,",
      "At first, the main function is pushed to the stack.",
      "Then the browser pushes the first statement of the main function( i.e, A's console.log) to the stack, executing and\npopping out immediately.",
      "But `setTimeout` statement moved to Browser API to apply the delay for callback.",
      "In the meantime, C's console.log added to stack, executed and popped out.",
      "The callback of `setTimeout` moved from Browser API to message queue.",
      "The `main` function popped out from stack because there are no statements to execute",
      "The callback moved from message queue to the stack since the stack is empty.",
      "The console.log for B is added to the stack and display on the console.",
      "</p>\n</details>",
      "4. What is the output of below equality check",
      "```javascript\nconsole.log(0.1 + 0.2 === 0.3);\n\n```",
      "1: false",
      "2: true",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "This is due to the float point math problem. Since the floating point numbers are encoded in binary format, the addition\noperations on them lead to rounding errors. Hence, the comparison of floating points doesn't give expected results.\nYou can find more details about the explanation here [0.30000000000000004.com/](https://0.30000000000000004.com/)",
      "</p>\n</details>",
      "5. What is the output of below code",
      "```javascript\nvar y = 1;\nif (function f() {\n}) {\n  y += typeof f;\n}\nconsole.log(y);\n\n```",
      "1: 1function",
      "2: 1object",
      "3: ReferenceError",
      "4: 1undefined",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "The main points in the above code snippets are,",
      "You can see function expression instead function declaration inside if statement. So it always returns true.",
      "Since it is not declared(or assigned) anywhere, f is undefined and typeof f is undefined too.",
      "In other words, it is same as",
      "```javascript\nvar y = 1;\nif (\"foo\") {\n  y += typeof f;\n}\nconsole.log(y);\n\n```",
      "**Note:** It returns 1object for MS Edge browser",
      "</p>\n</details>",
      "6. What is the output of below code",
      "```javascript\nfunction foo() {\n  return;\n  {\n    message: \"Hello World\";\n  }\n}\n\nconsole.log(foo());\n\n```",
      "1: Hello World",
      "2: Object {message: \"Hello World\"}",
      "3: Undefined",
      "4: SyntaxError",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "This is a semicolon issue. Normally semicolons are optional in JavaScript. So if there are any statements(in this case,\nreturn) missing semicolon, it is automatically inserted immediately. Hence, the function returned as undefined.",
      "Whereas if the opening curly brace is along with the return keyword then the function is going to be returned as\nexpected.",
      "```javascript\nfunction foo() {\n  return {\n    message: \"Hello World\",\n  };\n}\n\nconsole.log(foo()); // {message: \"Hello World\"}\n\n```",
      "</p>\n</details>",
      "7. What is the output of below code",
      "```javascript\nvar myChars = [\"a\", \"b\", \"c\", \"d\"];\ndelete myChars[0];\nconsole.log(myChars);\nconsole.log(myChars[0]);\nconsole.log(myChars.length);\n\n```",
      "1: [empty, 'b', 'c', 'd'], empty, 3",
      "2: [null, 'b', 'c', 'd'], empty, 3",
      "3: [empty, 'b', 'c', 'd'], undefined, 4",
      "4: [null, 'b', 'c', 'd'], undefined, 4",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "The `delete` operator will delete the object property but it will not reindex the array or change its length. So the\nnumber or elements or length of the array won't be changed.\nIf you try to print myChars then you can observe that it doesn't set an undefined value, rather the property is removed\nfrom the array. The newer versions of Chrome use `empty` instead of `undefined` to make the difference a bit clearer.",
      "</p>\n</details>",
      "8. What is the output of below code in latest Chrome",
      "```javascript\nvar array1 = new Array(3);\nconsole.log(array1);\n\nvar array2 = [];\narray2[2] = 100;\nconsole.log(array2);\n\nvar array3 = [, , ,];\nconsole.log(array3);\n\n```",
      "1: [undefined × 3], [undefined × 2, 100], [undefined × 3]",
      "2: [empty × 3], [empty × 2, 100], [empty × 3]",
      "3: [null × 3], [null × 2, 100], [null × 3]",
      "4: [], [100], []",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "The latest chrome versions display `sparse array`(they are filled with holes) using this empty x n notation. Whereas the\nolder versions have undefined x n notation.\n**Note:** The latest version of FF displays `n empty slots` notation.",
      "</p>\n</details>",
      "9. What is the output of below code",
      "```javascript\nconst obj = {\n  prop1: function() {\n    return 0;\n  },\n  prop2() {\n    return 1;\n  },\n  [\"prop\" + 3]() {\n    return 2;\n  },\n};\n\nconsole.log(obj.prop1());\nconsole.log(obj.prop2());\nconsole.log(obj.prop3());\n\n```",
      "1: 0, 1, 2",
      "2: 0, { return 1 }, 2",
      "3: 0, { return 1 }, { return 2 }",
      "4: 0, 1, undefined",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "ES6 provides method definitions and property shorthands for objects. So both prop2 and prop3 are treated as regular\nfunction values.",
      "</p>\n</details>",
      "10. What is the output of below code",
      "```javascript\nconsole.log(1 < 2 < 3);\nconsole.log(3 > 2 > 1);\n\n```",
      "1: true, true",
      "2: true, false",
      "3: SyntaxError, SyntaxError,",
      "4: false, false",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "The important point is that if the statement contains the same operators(e.g, < or >) then it can be evaluated from left\nto right.\nThe first statement follows the below order,",
      "console.log(1 < 2 < 3);",
      "console.log(true < 3);",
      "console.log(1 < 3); // True converted as `1` during comparison",
      "True",
      "Whereas the second statement follows the below order,",
      "console.log(3 > 2 > 1);",
      "console.log(true > 1);",
      "console.log(1 > 1); // False converted as `0` during comparison",
      "False",
      "</p>\n</details>",
      "11. What is the output of below code in non-strict mode",
      "```javascript\nfunction printNumbers(first, second, first) {\n  console.log(first, second, first);\n}\n\nprintNumbers(1, 2, 3);\n\n```",
      "1: 1, 2, 3",
      "2: 3, 2, 3",
      "3: SyntaxError: Duplicate parameter name not allowed in this context",
      "4: 1, 2, 1",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "In non-strict mode, the regular JavaScript functions allow duplicate named parameters. The above code snippet has\nduplicate parameters on 1st and 3rd parameters.\nThe value of the first parameter is mapped to the third argument which is passed to the function. Hence, the 3rd\nargument overrides the first parameter.",
      "**Note:** In strict mode, duplicate parameters will throw a Syntax Error.",
      "</p>\n</details>",
      "12. What is the output of below code",
      "```javascript\nconst printNumbersArrow = (first, second, first) => {\n  console.log(first, second, first);\n};\nprintNumbersArrow(1, 2, 3);\n\n```",
      "1: 1, 2, 3",
      "2: 3, 2, 3",
      "3: SyntaxError: Duplicate parameter name not allowed in this context",
      "4: 1, 2, 1",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "Unlike regular functions, the arrow functions doesn't not allow duplicate parameters in either strict or non-strict\nmode. So you can see `SyntaxError` in the console.",
      "</p>\n</details>",
      "13. What is the output of below code",
      "```javascript\nconst arrowFunc = () => arguments.length;\nconsole.log(arrowFunc(1, 2, 3));\n\n```",
      "1: ReferenceError: arguments is not defined",
      "2: 3",
      "3: undefined",
      "4: null",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "Arrow functions do not have an `arguments, super, this, or new.target` bindings. So any reference to `arguments`variable\ntries to resolve to a binding in a lexically enclosing environment. In this case, the arguments variable is not defined\noutside of the arrow function. Hence, you will receive a reference error.",
      "Where as the normal function provides the number of arguments passed to the function",
      "```javascript\nconst func = function() {\n  return arguments.length;\n};\nconsole.log(func(1, 2, 3));\n\n```",
      "But If you still want to use an arrow function then rest operator on arguments provides the expected arguments",
      "```javascript\nconst arrowFunc = (...args) => args.length;\nconsole.log(arrowFunc(1, 2, 3));\n\n```",
      "</p>\n</details>",
      "14. What is the output of below code",
      "```javascript\nconsole.log(String.prototype.trimLeft.name === \"trimLeft\");\nconsole.log(String.prototype.trimLeft.name === \"trimStart\");\n\n```",
      "1: True, False",
      "2: False, True",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "In order to be consistent with functions like `String.prototype.padStart`, the standard method name for trimming the\nwhitespaces is considered as `trimStart`. Due to web web compatibility reasons, the old method name 'trimLeft' still\nacts as an alias for 'trimStart'. Hence, the prototype for 'trimLeft' is always 'trimStart'",
      "</p>\n</details>",
      "15. What is the output of below code",
      "```javascript\nconsole.log(Math.max());\n\n```",
      "1: undefined",
      "2: Infinity",
      "3: 0",
      "4: -Infinity",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "-Infinity is the initial comparant because almost every other value is bigger. So when no arguments are provided,\n-Infinity is going to be returned.\n**Note:** Zero number of arguments is a valid case.",
      "</p>\n</details>",
      "16. What is the output of below code",
      "```javascript\nconsole.log(10 == [10]);\nconsole.log(10 == [[[[[[[10]]]]]]]);\n\n```",
      "1: True, True",
      "2: True, False",
      "3: False, False",
      "4: False, True",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "As per the comparison algorithm in the ECMAScript specification(ECMA-262), the above expression converted into JS as\nbelow",
      "```javascript\n10 === Number([10].valueOf().toString()); // 10\n\n```",
      "So it doesn't matter about number brackets([]) around the number, it is always converted to a number in the expression.",
      "</p>\n</details>",
      "17. What is the output of below code",
      "```javascript\nconsole.log(10 + \"10\");\nconsole.log(10 - \"10\");\n\n```",
      "1: 20, 0",
      "2: 1010, 0",
      "3: 1010, 10-10",
      "4: NaN, NaN",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "The concatenation operator(+) is applicable for both number and string types. So if any operand is string type then both\noperands concatenated as strings. Whereas subtract(-) operator tries to convert the operands as number type.",
      "</p>\n</details>",
      "18. What is the output of below code",
      "```javascript\nconsole.log([0] == false);\nif ([0]) {\n  console.log(\"I'm True\");\n} else {\n  console.log(\"I'm False\");\n}\n\n```",
      "1: True, I'm True",
      "2: True, I'm False",
      "3: False, I'm True",
      "4: False, I'm False",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "In comparison operators, the expression `[0]` converted to Number([0].valueOf().toString()) which is resolved to false.\nWhereas `[0]` just becomes a truthy value without any conversion because there is no comparison operator.",
      "</p>\n</details>",
      "19. What is the output of below code",
      "```javascript\nconsole.log([1, 2] + [3, 4]);\n\n```",
      "1: [1,2,3,4]",
      "2: [1,2][3,4]",
      "3: SyntaxError",
      "4: 1,23,4",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "The + operator is not meant or defined for arrays. So it converts arrays into strings and concatenates them.",
      "</p>\n</details>",
      "20. What is the output of below code",
      "```javascript\nconst numbers = new Set([1, 1, 2, 3, 4]);\nconsole.log(numbers);\n\nconst browser = new Set(\"Firefox\");\nconsole.log(browser);\n\n```",
      "1: {1, 2, 3, 4}, {\"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\"}",
      "2: {1, 2, 3, 4}, {\"F\", \"i\", \"r\", \"e\", \"o\", \"x\"}",
      "3: [1, 2, 3, 4], [\"F\", \"i\", \"r\", \"e\", \"o\", \"x\"]",
      "4: {1, 1, 2, 3, 4}, {\"F\", \"i\", \"r\", \"e\", \"f\", \"o\", \"x\"}",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "Since `Set` object is a collection of unique values, it won't allow duplicate values in the collection. At the same\ntime, it is case sensitive data structure.",
      "</p>\n</details>",
      "21. What is the output of below code",
      "```javascript\nconsole.log(NaN === NaN);\n\n```",
      "1: True",
      "2: False",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "JavaScript follows IEEE 754 spec standards. As per this spec, NaNs are never equal for floating-point numbers.",
      "</p>\n</details>",
      "22. What is the output of below code",
      "```javascript\nlet numbers = [1, 2, 3, 4, NaN];\nconsole.log(numbers.indexOf(NaN));\n\n```",
      "1: 4",
      "2: NaN",
      "3: SyntaxError",
      "4: -1",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "The `indexOf` uses strict equality operator(===) internally and `NaN === NaN` evaluates to false. Since indexOf won't be\nable to find NaN inside an array, it returns -1 always.\nBut you can use `Array.prototype.findIndex` method to find out the index of NaN in an array or You can\nuse `Array.prototype.includes` to check if NaN is present in an array or not.",
      "```javascript\nlet numbers = [1, 2, 3, 4, NaN];\nconsole.log(numbers.findIndex(Number.isNaN)); // 4\n\nconsole.log(numbers.includes(NaN)); // true\n\n```",
      "</p>\n</details>",
      "23. What is the output of below code",
      "```javascript\nlet [a, ...b,] = [1, 2, 3, 4, 5];\nconsole.log(a, b);\n\n```",
      "1: 1, [2, 3, 4, 5]",
      "2: 1, {2, 3, 4, 5}",
      "3: SyntaxError",
      "4: 1, [2, 3, 4]",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "When using rest parameters, trailing commas are not allowed and will throw a SyntaxError.\nIf you remove the trailing comma then it displays 1st answer",
      "```javascript\nlet [a, ...b] = [1, 2, 3, 4, 5];\nconsole.log(a, b); // 1, [2, 3, 4, 5]\n\n```",
      "</p>\n</details>",
      "25. What is the output of below code",
      "```javascript\nasync function func() {\n  return 10;\n}\n\nconsole.log(func());\n\n```",
      "1: Promise {\\<fulfilled\\>: 10}",
      "2: 10",
      "3: SyntaxError",
      "4: Promise {\\<rejected\\>: 10}",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "Async functions always return a promise. But even if the return value of an async function is not explicitly a promise,\nit will be implicitly wrapped in a promise. The above async function is equivalent to below expression,",
      "```javascript\nfunction func() {\n  return Promise.resolve(10);\n}\n\n```",
      "</p>\n</details>",
      "26. What is the output of below code",
      "```javascript\nasync function func() {\n  await 10;\n}\n\nconsole.log(func());\n\n```",
      "1: Promise {\\<fulfilled\\>: 10}",
      "2: 10",
      "3: SyntaxError",
      "4: Promise {\\<resolved\\>: undefined}",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "The await expression returns value 10 with promise resolution and the code after each await expression can be treated as\nexisting in a `.then` callback. In this case, there is no return expression at the end of the function. Hence, the\ndefault return value of `undefined` is returned as the resolution of the promise. The above async function is equivalent\nto below expression,",
      "```javascript\nfunction func() {\n  return Promise.resolve(10).then(() => undefined);\n}\n\n```",
      "</p>\n</details>",
      "27. What is the output of below code",
      "```javascript\nfunction delay() {\n  return new Promise(resolve => setTimeout(resolve, 2000));\n}\n\nasync function delayedLog(item) {\n  await delay();\n  console.log(item);\n}\n\nasync function processArray(array) {\n  array.forEach(item => {\n    await delayedLog(item);\n  })\n}\n\nprocessArray([1, 2, 3, 4]);\n\n```",
      "1: SyntaxError",
      "2: 1, 2, 3, 4",
      "3: 4, 4, 4, 4",
      "4: 4, 3, 2, 1",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "Even though “processArray” is an async function, the anonymous function that we use for `forEach` is synchronous. If you\nuse await inside a synchronous function then it throws a syntax error.",
      "</p>",
      "</details>",
      "28. What is the output of below code",
      "```javascript\nfunction delay() {\n  return new Promise((resolve) => setTimeout(resolve, 2000));\n}\n\nasync function delayedLog(item) {\n  await delay();\n  console.log(item);\n}\n\nasync function process(array) {\n  array.forEach(async (item) => {\n    await delayedLog(item);\n  });\n  console.log(\"Process completed!\");\n}\n\nprocess([1, 2, 3, 5]);\n\n```",
      "1: 1 2 3 5 and Process completed!",
      "2: 5 5 5 5 and Process completed!",
      "3: Process completed! and 5 5 5 5",
      "4: Process completed! and 1 2 3 5",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "The forEach method will not wait until all items are finished but it just runs the tasks and goes next. Hence, the last\nstatement is displayed first followed by a sequence of promise resolutions.",
      "But you control the array sequence using for..of loop,",
      "```javascript\nasync function processArray(array) {\n  for (const item of array) {\n    await delayedLog(item);\n  }\n  console.log(\"Process completed!\");\n}\n\n```",
      "</p>\n</details>",
      "29. What is the output of below code",
      "```javascript\nvar set = new Set();\nset.add(\"+0\").add(\"-0\").add(NaN).add(undefined).add(NaN);\nconsole.log(set);\n\n```",
      "1: Set(4) {\"+0\", \"-0\", NaN, undefined}",
      "2: Set(3) {\"+0\", NaN, undefined}",
      "3: Set(5) {\"+0\", \"-0\", NaN, undefined, NaN}",
      "4: Set(4) {\"+0\", NaN, undefined, NaN}",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "Set has few exceptions from equality check,",
      "All NaN values are equal",
      "Both +0 and -0 considered as different values",
      "</p>\n</details>",
      "30. What is the output of below code",
      "```javascript\nconst sym1 = Symbol(\"one\");\nconst sym2 = Symbol(\"one\");\n\nconst sym3 = Symbol.for(\"two\");\nconst sym4 = Symbol.for(\"two\");\n\nconsole.log(sym1 === sym2, sym3 === sym4);\n\n```",
      "1: true, true",
      "2: true, false",
      "3: false, true",
      "4: false, false",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "Symbol follows below conventions,",
      "Every symbol value returned from Symbol() is unique irrespective of the optional string.",
      "`Symbol.for()` function creates a symbol in a global symbol registry list. But it doesn't necessarily create a new\nsymbol on every call, it checks first if a symbol with the given key is already present in the registry and returns\nthe symbol if it is found. Otherwise a new symbol created in the registry.",
      "**Note:** The symbol description is just useful for debugging purposes.",
      "</p>",
      "</details>",
      "31. What is the output of below code",
      "```javascript\nconst sym1 = new Symbol(\"one\");\nconsole.log(sym1);\n\n```",
      "1: SyntaxError",
      "2: one",
      "3: Symbol('one')",
      "4: Symbol",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "`Symbol` is a just a standard function and not an object constructor(unlike other primitives new Boolean, new String and\nnew Number). So if you try to call it with the new operator will result in a TypeError",
      "</p>",
      "</details>",
      "32. What is the output of below code",
      "```javascript\nlet myNumber = 100;\nlet myString = \"100\";\n\nif (!typeof myNumber === \"string\") {\n  console.log(\"It is not a string!\");\n} else {\n  console.log(\"It is a string!\");\n}\n\nif (!typeof myString === \"number\") {\n  console.log(\"It is not a number!\");\n} else {\n  console.log(\"It is a number!\");\n}\n\n```",
      "1: SyntaxError",
      "2: It is not a string!, It is not a number!",
      "3: It is not a string!, It is a number!",
      "4: It is a string!, It is a number!",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "The return value of `typeof myNumber` or `typeof myString` is always a truthy value (either \"number\" or \"string\"). The !\noperator operates on either `typeof myNumber` or `typeof myString`, converting them to boolean values. Since the value\nof both `!typeof myNumber` and `!typeof myString` is false, the if condition fails, and control goes to else block.",
      "To make the ! operator operate on the equality expression, one needs to add parentheses:",
      "```\nif (!(typeof myNumber === \"string\"))\n\n```",
      "Or simply use the inequality operator:",
      "```\nif (typeof myNumber !== \"string\")\n\n```",
      "</p>",
      "</details>",
      "33. What is the output of below code",
      "```javascript\nconsole.log(\n  JSON.stringify({\n    myArray: [\"one\", undefined, function() {\n    }, Symbol(\"\")]\n  })\n);\nconsole.log(\n  JSON.stringify({ [Symbol.for(\"one\")]: \"one\" }, [Symbol.for(\"one\")])\n);\n\n```",
      "1: {\"myArray\":['one', undefined, {}, Symbol]}, {}",
      "2: {\"myArray\":['one', null,null,null]}, {}",
      "3: {\"myArray\":['one', null,null,null]}, \"{ [Symbol.for('one')]: 'one' }, [Symbol.for('one')]\"",
      "4: {\"myArray\":['one', undefined, function(){}, Symbol('')]}, {}",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "The symbols has below constraints,",
      "The undefined, Functions, and Symbols are not valid JSON values. So those values are either omitted (in an object) or\nchanged to null (in an array). Hence, it returns null values for the value array.",
      "All Symbol-keyed properties will be completely ignored. Hence it returns an empty object({}).",
      "</p>",
      "</details>",
      "34. What is the output of below code",
      "```javascript\nclass A {\n  constructor() {\n    console.log(new.target.name);\n  }\n}\n\nclass B extends A {\n  constructor() {\n    super();\n  }\n}\n\nnew A();\nnew B();\n\n```",
      "1: A, A",
      "2: A, B",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "Using constructors, `new.target` refers to the constructor (points to the class definition of class which is\ninitialized) that was directly invoked by new. This also applies to the case if the constructor is in a parent class and\nwas delegated from a child constructor.",
      "</p>",
      "</details>",
      "35. What is the output of below code",
      "```javascript\nconst [x, ...y, z] = [1, 2, 3, 4];\nconsole.log(x, y, z);\n\n```",
      "1: 1, [2, 3], 4",
      "2: 1, [2, 3, 4], undefined",
      "3: 1, [2], 3",
      "4: SyntaxError",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "It throws a syntax error because the rest element should not have a trailing comma. You should always consider using a\nrest operator as the last element.",
      "</p>",
      "</details>",
      "36. What is the output of below code",
      "```javascript\nconst { a: x = 10, b: y = 20 } = { a: 30 };\n\nconsole.log(x);\nconsole.log(y);\n\n```",
      "1: 30, 20",
      "2: 10, 20",
      "3: 10, undefined",
      "4: 30, undefined",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "The object property follows below rules,",
      "The object properties can be retrieved and assigned to a variable with a different name",
      "The property assigned a default value when the retrieved value is `undefined`",
      "</p>",
      "</details>",
      "37. What is the output of below code",
      "```javascript\nfunction area({ length = 10, width = 20 }) {\n  console.log(length * width);\n}\n\narea();\n\n```",
      "1: 200",
      "2: Error",
      "3: undefined",
      "4: 0",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "If you leave out the right-hand side assignment for the destructuring object, the function will look for at least one\nargument to be supplied when invoked. Otherwise you will receive an\nerror `Error: Cannot read property 'length' of undefined` as mentioned above.",
      "You can avoid the error with either of the below changes,",
      "**Pass at least an empty object:**",
      "```javascript\nfunction area({ length = 10, width = 20 }) {\n  console.log(length * width);\n}\n\narea({});\n\n```",
      "**Assign default empty object:**",
      "```javascript\nfunction area({ length = 10, width = 20 } = {}) {\n  console.log(length * width);\n}\n\narea();\n\n```",
      "</p>",
      "</details>",
      "38. What is the output of below code",
      "```javascript\nconst props = [\n  { id: 1, name: \"John\" },\n  { id: 2, name: \"Jack\" },\n  { id: 3, name: \"Tom\" },\n];\n\nconst [, , { name }] = props;\nconsole.log(name);\n\n```",
      "1: Tom",
      "2: Error",
      "3: undefined",
      "4: John",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "It is possible to combine Array and Object destructuring. In this case, the third element in the array props accessed\nfirst followed by name property in the object.",
      "</p>",
      "</details>",
      "39. What is the output of below code",
      "```javascript\nfunction checkType(num = 1) {\n  console.log(typeof num);\n}\n\ncheckType();\ncheckType(undefined);\ncheckType(\"\");\ncheckType(null);\n\n```",
      "1: number, undefined, string, object",
      "2: undefined, undefined, string, object",
      "3: number, number, string, object",
      "4: number, number, number, number",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "If the function argument is set implicitly(not passing argument) or explicitly to undefined, the value of the argument\nis the default parameter. Whereas for other falsy values('' or null), the value of the argument is passed as a\nparameter.",
      "Hence, the result of function calls categorized as below,",
      "The first two function calls logs number type since the type of default value is number",
      "The type of '' and null values are string and object type respectively.",
      "</p>",
      "</details>",
      "40. What is the output of below code",
      "```javascript\nfunction add(item, items = []) {\n  items.push(item);\n  return items;\n}\n\nconsole.log(add(\"Orange\"));\nconsole.log(add(\"Apple\"));\n\n```",
      "1: ['Orange'], ['Orange', 'Apple']",
      "2: ['Orange'], ['Apple']",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "Since the default argument is evaluated at call time, a new object is created each time the function is called. So in\nthis case, the new array is created and an element pushed to the default empty array.",
      "</p>",
      "</details>",
      "41. What is the output of below code",
      "```javascript\nfunction greet(greeting, name, message = greeting + \" \" + name) {\n  console.log([greeting, name, message]);\n}\n\ngreet(\"Hello\", \"John\");\ngreet(\"Hello\", \"John\", \"Good morning!\");\n\n```",
      "1: SyntaxError",
      "2: ['Hello', 'John', 'Hello John'], ['Hello', 'John', 'Good morning!']",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "Since parameters defined earlier are available to later default parameters, this code snippet doesn't throw any error.",
      "</p>",
      "</details>",
      "42. What is the output of below code",
      "```javascript\nfunction outer(f = inner()) {\n  function inner() {\n    return \"Inner\";\n  }\n}\n\nouter();\n\n```",
      "1: ReferenceError",
      "2: Inner",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "The functions and variables declared in the function body cannot be referred from default value parameter initializers.\nIf you still try to access, it throws a run-time ReferenceError(i.e, `inner` is not defined).",
      "</p>",
      "</details>",
      "43. What is the output of below code",
      "```javascript\nfunction myFun(x, y, ...manyMoreArgs) {\n  console.log(manyMoreArgs);\n}\n\nmyFun(1, 2, 3, 4, 5);\nmyFun(1, 2);\n\n```",
      "1: [3, 4, 5], undefined",
      "2: SyntaxError",
      "3: [3, 4, 5], []",
      "4: [3, 4, 5], [undefined]",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "The rest parameter is used to hold the remaining parameters of a function and it becomes an empty array if the argument\nis not provided.",
      "</p>",
      "</details>",
      "44. What is the output of below code",
      "```javascript\nconst obj = { key: \"value\" };\nconst array = [...obj];\nconsole.log(array);\n\n```",
      "1: ['key', 'value']",
      "2: TypeError",
      "3: []",
      "4: ['key']",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "Spread syntax can be applied only to iterable objects. By default, Objects are not iterable, but they become iterable\nwhen used in an Array, or with iterating functions such as `map(), reduce(), and assign()`. If you still try to do it,\nit still throws `TypeError: obj is not iterable`.",
      "</p>",
      "</details>",
      "45. What is the output of below code",
      "```javascript\nfunction* myGenFunc() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nvar myGenObj = new myGenFunc();\nconsole.log(myGenObj.next().value);\n\n```",
      "1: 1",
      "2: undefined",
      "3: SyntaxError",
      "4: TypeError",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "Generators are not constructible type. But if you still proceed to do, there will be an error saying \"TypeError:\nmyGenFunc is not a constructor\"",
      "</p>",
      "</details>",
      "46. What is the output of below code",
      "```javascript\nfunction* yieldAndReturn() {\n  yield 1;\n  return 2;\n  yield 3;\n}\n\nvar myGenObj = yieldAndReturn();\nconsole.log(myGenObj.next());\nconsole.log(myGenObj.next());\nconsole.log(myGenObj.next());\n\n```",
      "1: { value: 1, done: false }, { value: 2, done: true }, { value: undefined, done: true }",
      "2: { value: 1, done: false }, { value: 2, done: false }, { value: undefined, done: true }",
      "3: { value: 1, done: false }, { value: 2, done: true }, { value: 3, done: true }",
      "4: { value: 1, done: false }, { value: 2, done: false }, { value: 3, done: true }",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "A return statement in a generator function will make the generator finish. If a value is returned, it will be set as the\nvalue property of the object and done property to true. When a generator is finished, subsequent next() calls return an\nobject of this form: `{value: undefined, done: true}`.",
      "</p>",
      "</details>",
      "47. What is the output of below code",
      "```javascript\nconst myGenerator = (function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\nfor (const value of myGenerator) {\n  console.log(value);\n  break;\n}\n\nfor (const value of myGenerator) {\n  console.log(value);\n}\n\n```",
      "1: 1,2,3 and 1,2,3",
      "2: 1,2,3 and 4,5,6",
      "3: 1 and 1",
      "4: 1",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "The generator should not be re-used once the iterator is closed. i.e, Upon exiting a loop(on completion or using break &\nreturn), the generator is closed and trying to iterate over it again does not yield any more results. Hence, the second\nloop doesn't print any value.",
      "</p>",
      "</details>",
      "48. What is the output of below code",
      "```javascript\nconst num = 0o3\n8;\nconsole.log(num);\n\n```",
      "1: SyntaxError",
      "2: 38",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "If you use an invalid number(outside of 0-7 range) in the octal literal, JavaScript will throw a SyntaxError. In ES5, it\ntreats the octal literal as a decimal number.",
      "</p>",
      "</details>",
      "49. What is the output of below code",
      "```javascript\nconst squareObj = new Square(10);\nconsole.log(squareObj.area);\n\nclass Square {\n  constructor(length) {\n    this.length = length;\n  }\n\n  get area() {\n    return this.length * this.length;\n  }\n\n  set area(value) {\n    this.area = value;\n  }\n}\n\n```",
      "1: 100",
      "2: ReferenceError",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "Unlike function declarations, class declarations are not hoisted. i.e, First You need to declare your class and then\naccess it, otherwise it will throw a ReferenceError \"Uncaught ReferenceError: Square is not defined\".",
      "**Note:** Class expressions also applies to the same hoisting restrictions of class declarations.",
      "</p>",
      "</details>",
      "50. What is the output of below code",
      "```javascript\nfunction Person() {\n}\n\nPerson.prototype.walk = function() {\n  return this;\n};\n\nPerson.run = function() {\n  return this;\n};\n\nlet user = new Person();\nlet walk = user.walk;\nconsole.log(walk());\n\nlet run = Person.run;\nconsole.log(run());\n\n```",
      "1: undefined, undefined",
      "2: Person, Person",
      "3: SyntaxError",
      "4: Window, Window",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "When a regular or prototype method is called without a value for **this**, the methods return an initial this value if\nthe value is not undefined. Otherwise global window object will be returned. In our case, the initial `this` value is\nundefined so both methods return window objects.",
      "</p>",
      "</details>",
      "51. What is the output of below code",
      "```javascript\nclass Vehicle {\n  constructor(name) {\n    this.name = name;\n  }\n\n  start() {\n    console.log(`${this.name} vehicle started`);\n  }\n}\n\nclass Car extends Vehicle {\n  start() {\n    console.log(`${this.name} car started`);\n    super.start();\n  }\n}\n\nconst car = new Car(\"BMW\");\nconsole.log(car.start());\n\n```",
      "1: SyntaxError",
      "2: BMW vehicle started, BMW car started",
      "3: BMW car started, BMW vehicle started",
      "4: BMW car started, BMW car started",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "The super keyword is used to call methods of a superclass. Unlike other languages the super invocation doesn't need to\nbe a first statement. i.e, The statements will be executed in the same order of code.",
      "</p>",
      "</details>",
      "52. What is the output of below code",
      "```javascript\nconst USER = { age: 30 };\nUSER.age = 25;\nconsole.log(USER.age);\n\n```",
      "1: 30",
      "2: 25",
      "3: Uncaught TypeError",
      "4: SyntaxError",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "Even though we used constant variables, the content of it is an object and the object's contents (e.g properties) can be\naltered. Hence, the change is going to be valid in this case.",
      "</p>",
      "</details>",
      "53. What is the output of below code",
      "```javascript\nconsole.log(\"🙂\" === \"🙂\");\n\n```",
      "1: false",
      "2: true",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "Emojis are unicodes and the unicode for smile symbol is \"U+1F642\". The unicode comparision of same emojies is equivalent\nto string comparison. Hence, the output is always true.",
      "</p>",
      "</details>",
      "54. What is the output of below code?",
      "```javascript\nconsole.log(typeof typeof typeof true);\n\n```",
      "1: string",
      "2: boolean",
      "3: NaN",
      "4: number",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "The typeof operator on any primitive returns a string value. So even if you apply the chain of typeof operators on the\nreturn value, it is always string.",
      "</p>",
      "</details>",
      "55. What is the output of below code?",
      "```javascript\nlet zero = new Number(0);\n\nif (zero) {\n  console.log(\"If\");\n} else {\n  console.log(\"Else\");\n}\n\n```",
      "1: If",
      "2: Else",
      "3: NaN",
      "4: SyntaxError",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "The type of operator on new Number always returns object. i.e, typeof new Number(0) --> object.",
      "Objects are always truthy in if block",
      "Hence the above code block always goes to if section.",
      "</p>",
      "</details>",
      "55. What is the output of below code in non strict mode?",
      "```javascript\nlet msg = \"Good morning!!\";\n\nmsg.name = \"John\";\n\nconsole.log(msg.name);\n\n```",
      "1: \"\"",
      "2: Error",
      "3: John",
      "4: Undefined",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "It returns undefined for non-strict mode and returns Error for strict mode. In non-strict mode, the wrapper object is\ngoing to be created and get the mentioned property. But the object get disappeared after accessing the property in next\nline.",
      "</p>",
      "</details>",
      "56. What is the output of below code?",
      "```javascript\nlet count = 10;\n\n(function innerFunc() {\n  if (count === 10) {\n    let count = 11;\n    console.log(count);\n  }\n  console.log(count);\n})();\n\n```",
      "1: 11, 10",
      "2: 11, 11",
      "3: 10, 11",
      "4: 10, 10",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "11 and 10 is logged to the console.",
      "The innerFunc is a closure which captures the count variable from the outerscope. i.e, 10. But the conditional has\nanother local variable `count` which overwrites the ourter `count` variable. So the first console.log displays value 11.\nWhereas the second console.log logs 10 by capturing the count variable from outerscope.",
      "</p>",
      "</details>",
      "57. What is the output of below code ?",
      "1: console.log(true && 'hi');",
      "2: console.log(true && 'hi' && 1);",
      "3: console.log(true && '' && 0);",
      "<details><summary><b>Answer</b></summary>",
      "1: hi",
      "2: 1",
      "3: ''",
      "Reason : The operator returns the value of the first falsy operand encountered when evaluating from left to right, or\nthe value of the last operand if they are all truthy.",
      "**Note:** Below these values are consider as falsy value",
      "1: 0",
      "2: ''",
      "3: null",
      "4: undefined",
      "5: NAN",
      "</p>\n</details>",
      "58. What is the output of below code ?",
      "```javascript\nlet arr = [1, 2, 3];\nlet str = \"1,2,3\";\n\nconsole.log(arr == str);\n\n```",
      "1: false",
      "2: Error",
      "3: true",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "Arrays have their own implementation of `toString` method that returns a comma-separated list of elements. So the above\ncode snippet returns true. In order to avoid conversion of array type, we should use === for comparison.",
      "</p>",
      "</details>",
      "59. What is the output of below code?",
      "```javascript\ngetMessage();\n\nvar getMessage = () => {\n  console.log(\"Good morning\");\n};\n\n```",
      "1: Good morning",
      "2: getMessage is not a function",
      "3: getMessage is not defined",
      "4: Undefined",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "Hoisting will move variables and functions to be the top of scope. Even though getMessage is an arrow function the above\nfunction will considered as a varible due to it's variable declaration or assignment. So the variables will have\nundefined value in memory phase and throws an error '`getMessage` is not a function' at the code execution phase.",
      "</p>",
      "</details>",
      "60. What is the output of below code?",
      "```javascript\nlet quickPromise = Promise.resolve();\n\nquickPromise.then(() => console.log(\"promise finished\"));\n\nconsole.log(\"program finished\"); \n\n```",
      "1: program finished",
      "2: Cannot predict the order",
      "3: program finished, promise finished",
      "4: promise finished, program finished",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "Even though a promise is resolved immediately, it won't be executed immediately because its **.then/catch/finally**\nhandlers or callbacks(aka task) are pushed into the queue. Whenever the JavaScript engine becomes free from the current\nprogram, it pulls a task from the queue and executes it. This is the reason why last statement is printed first before\nthe log of promise handler.",
      "**Note:** We call the above queue as \"MicroTask Queue\"",
      "</p>",
      "</details>",
      "61. What is the output of below code?",
      "```javascript\nconsole.log('First line')\n  ['a', 'b', 'c'].forEach((element) => console.log(element))\nconsole.log('Third line')\n\n```",
      "1: `First line`, then print `a, b, c` in a new line, and finally print `Third line` as next line",
      "2: `First line`, then print `a, b, c` in a first line, and print `Third line` as next line",
      "3:  Missing semi-colon error",
      "4:  Cannot read properties of undefined",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "When JavaScript encounters a line break without a semicolon, the JavaScript parser will automatically add a semicolon\nbased on a set of rules called `Automatic Semicolon Insertion` which determines whether line break as end of statement\nor not to insert semicolon. But it does not assume a semicolon before square brackets [...]. So the first two lines\nconsidered as a single statement as below.",
      "```javascript\nconsole.log('First line')['a', 'b', 'c'].forEach((element) => console.log(element))\n\n```",
      "Hence, there will be **cannot read properties of undefined** error while applying the array square bracket on log\nfunction.",
      "</p>",
      "</details>",
      "62. Write a function that returns a random HEX color",
      "<details><summary><b>Solution 1 (Iterative generation)</b></summary>\n<p>",
      "```javascript\nconst HEX_ALPHABET = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\nconst HEX_PREFIX = \"#\";\nconst HEX_LENGTH = 6;\n\nfunction generateRandomHex() {\n  let randomHex = \"\";\n\n  for (let i = 0; i < HEX_LENGTH; i++) {\n    const randomIndex = Math.floor(Math.random() * HEX_ALPHABET.length);\n    randomHex += HEX_ALPHABET[randomIndex];\n  }\n\n  return HEX_PREFIX + randomHex;\n}\n\n\n```",
      "</p>",
      "</details>",
      "<details><summary><b>Solution 2 (One-liner)</b></summary>\n<p>",
      "```javascript \nconst HEX_PREFIX = \"#\";\nconst HEX_RADIX = 16;\nconst HEX_LENGTH = 6;\n\nfunction generateRandomHex() {\n  return HEX_PREFIX + Math.floor(Math.random() * 0xffffff).toString(HEX_RADIX).padStart(HEX_LENGTH, \"0\");\n} \n\n```",
      "</p>",
      "</details>",
      "63. What is the output of below code?",
      "```javascript\nvar of = ['of'];\nfor (var of of of) {\n  console.log(of);\n}\n\n```",
      "1:  of",
      "2:  SyntaxError: Unexpected token of",
      "3:  SyntaxError: Identifier 'of' has already been declared",
      "4:  ReferenceError: of is not defined",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "In JavaScript, `of` is not considered as a reserved keyword. So the variable declaration with `of` is accepted and\nprints the array value `of` using for..of loop.",
      "But if you use reserved keyword such as `in` then there will be a syntax error\nsaying `SyntaxError: Unexpected token in`,",
      "```javascript\nvar in\n= ['in'];\nfor (var in in in\n)\n{\n  console.log( in [ in\n])\n  ;\n}\n\n```",
      "</p>",
      "</details>",
      "64. What is the output of below code?",
      "```javascript\nconst numbers = [11, 25, 31, 23, 33, 18, 200];\nnumbers.sort();\nconsole.log(numbers);\n\n```",
      "1:  [11, 18, 23, 25, 31, 33, 200]",
      "2:  [11, 18, 200, 23, 25, 31, 33]",
      "3:  [11, 25, 31, 23, 33, 18, 200]",
      "4:  Cannot sort numbers",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "By default, the sort method sorts elements alphabetically. This is because elemented converted to strings and strings\ncompared in UTF-16 code units order. Hence, you will see the above numbers not sorted as expected. In order to sort\nnumerically just supply a comparator function which handles numeric sorts.",
      "```javascript\nconst numbers = [11, 25, 31, 23, 33, 18, 200];\nnumbers.sort((a, b) => a - b);\nconsole.log(numbers);\n\n```",
      "**Note:** Sort() method changes the original array.\n</p>",
      "</details>",
      "65. What is the output order of below code?",
      "```javascript\nsetTimeout(() => {\n  console.log('1')\n}, 0);\nPromise.resolve('hello').then(() => console.log('2'));\nconsole.log('3');\n\n```",
      "1:  1, 2, 3",
      "2:  1, 3, 2",
      "3:  3, 1, 2",
      "4:  3, 2, 1",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "When the JavaScript engine parses the above code, the first two statements are asynchronous which will be executed later\nand third statement is synchronous statement which will be moved to callstack, executed and prints the number 3 in the\nconsole. Next, Promise is native in ES6 and it will be moved to Job queue which has high priority than callback queue in\nthe execution order. At last, since setTimeout is part of WebAPI the callback function moved to callback queue and\nexecuted. Hence, you will see number 2 printed first followed by 1.\n</details>",
      "66. What is the output of below code?",
      "```javascript\nconsole.log(name);\nconsole.log(message());\nvar name = 'John';\n(function message() {\n   console.log('Hello John: Welcome');\n});\n\n```",
      "1:  John, Hello John: Welcome",
      "2:  undefined, Hello John, Welcome",
      "3:  Reference error: name is not defined, Reference error: message is not defined",
      "4:  undefined, Reference error: message is not defined",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "IIFE(Immediately Invoked Function Expression) is just like any other function expression which won't be hoisted. Hence,\nthere will be a reference error for message call.\nThe behavior would be the same with below function expression of message1,",
      "```javascript\nconsole.log(name);\nconsole.log(message());\nvar name = 'John';\nvar message = function() {\n  console.log('Hello John: Welcome');\n}\n)\n;\n\n```",
      "</p>\n</details>",
      "67. What is the output of below code?",
      "```javascript\nmessage()\n\nfunction message() {\n  console.log(\"Hello\");\n}\n\nfunction message() {\n  console.log(\"Bye\");\n}\n\n```",
      "1:  Reference error: message is not defined",
      "2:  Hello",
      "3:  Bye",
      "4:  Compile time error",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "As part of hoisting, initially JavaScript Engine or compiler will store first function in heap memory but later rewrite\nor replaces with redefined function content.\n</p>\n</details>",
      "68. What is the output of below code?",
      "```javascript\nvar currentCity = \"NewYork\";\n\nvar changeCurrentCity = function() {\n  console.log('Current City:', currentCity);\n  var currentCity = \"Singapore\";\n  console.log('Current City:', currentCity);\n}\n\nchangeCurrentCity();\n\n```",
      "1:  NewYork, Singapore",
      "2:  NewYork, NewYork",
      "3:  undefined, Singapore",
      "4:  Singapore, Singapore",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "Due to hositing feature, the variables declared with `var` will have `undefined` value in the creation phase so the\nouter variable `currentCity` will get same `undefined` value. But after few lines of code JavaScript engine found a new\nfunction call(`changeCurrentCity()`) to update the current city with `var` re-declaration. Since each function call will\ncreate a new execution context, the same variable will have `undefined` value before the declaration and new\nvalue(`Singapore`) after the declarion. Hence, the value `undefined` print first followed by new value `Singapore` in\nthe execution phase.\n</p>\n</details>",
      "69. What is the output of below code in an order?",
      "```javascript\nfunction second() {\n  var message;\n  console.log(message);\n}\n\nfunction first() {\n  var message = \"first\";\n  second();\n  console.log(message);\n}\n\nvar message = \"default\";\nfirst();\nconsole.log(message);\n\n```",
      "1:  undefined, first, default",
      "2:  default, default, default",
      "3:  first, first, default",
      "4:  undefined, undefined, undefined",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "Each context(global or functional) has it's own variable environment and the callstack of variables in a LIFO order. So\nyou can see the message variable value from second, first functions in an order followed by global context message\nvariable value at the end.\n</p>\n</details>",
      "70. What is the output of below code?",
      "```javascript\nvar expressionOne = function functionOne() {\n  console.log(\"functionOne\");\n}\nfunctionOne();\n\n```",
      "1:  functionOne is not defined",
      "2:  functionOne",
      "3:  console.log(\"functionOne\")",
      "4:  undefined",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "The function call `functionOne` is not going to be part of scope chain and it has it's own execution context with the\nenclosed variable environment. i.e, It won't be accessed from global context. Hence, there will be an error while\ninvoking the function as `functionOne is not defined`.\n</p>\n</details>",
      "71. What is the output of below code?",
      "```javascript\nconst user = {\n  name: 'John',\n  eat() {\n    console.log(this);\n    var eatFruit = function() {\n      console.log(this);\n    }\n    eatFruit()\n  }\n}\nuser.eat();\n\n```",
      "1:  {name: \"John\", eat: f}, {name: \"John\", eat: f}",
      "2:  Window {...}, Window {...}",
      "3:  {name: \"John\", eat: f}, undefined",
      "4:  {name: \"John\", eat: f}, Window {...}",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 4",
      "`this` keyword is dynamic scoped but not lexically scoped . In other words, it doesn't matter where `this` has been\nwritten but how it has been invoked really matter. In the above code snippet, the `user` object invokes `eat` function\nso `this` keyword refers to `user` object but `eatFruit` has been invoked by `eat` function and `this` will have\ndefault `Window` object.",
      "The above pit fall fixed by three ways,",
      "In ES6, the arrow function will make `this` keyword as lexically scoped. Since the surrounding object of `this`object\nis `user` object, the `eatFruit` function will contain `user` object for `this` object.",
      "```javascript\nconst user = {\n  name: 'John',\n  eat() {\n    console.log(this);\n    var eatFruit = () => {\n      console.log(this);\n    }\n    eatFruit()\n  }\n}\nuser.eat();\n\n```",
      "The next two solutions have been used before ES6 introduced.",
      "It is possible create a reference of `this` into a separate variable and use that new variable inplace of `this`\nkeyword inside `eatFruit` function. This is a common practice in jQuery and AngularJS before ES6 introduced.",
      "```javascript\nconst user = {\n  name: 'John',\n  eat() {\n    console.log(this);\n    var self = this;\n    var eatFruit = () => {\n      console.log(self);\n    }\n    eatFruit()\n  }\n}\nuser.eat();\n\n```",
      "The `eatFruit` function can bind explicitly with `this` keyword where it refers `Window` object.",
      "```javascript\nconst user = {\n  name: 'John',\n  eat() {\n    console.log(this);\n    var eatFruit = function() {\n      console.log(this);\n    }\n    return eatFruit.bind(this)\n  }\n}\nuser.eat()();\n\n```",
      "</p>\n</details>",
      "72. What is the output of below code?",
      "```javascript\nlet message = 'Hello World!';\nmessage[0] = 'J';\nconsole.log(message)\n\nlet name = 'John';\nname = name + ' Smith';\nconsole.log(name);\n\n```",
      "1:  Jello World!, John Smith",
      "2:  Jello World!, John",
      "3:  Hello World!, John Smith",
      "4:  Hello World!, John",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "In JavaScript, primitives are immutable i.e. there is no way to change a primitive value once it gets created. So when\nyou try to update the string's first character, there is no change in the string value and prints the same initial\nvalue `Hello World!`. Whereas in the later example, the concatenated value is re-assigned to the same variable which\nwill result into creation of new memory block with the reference pointing to `John Smith` value and the old memory block\nvalue(`John`) will be garbage collected.\n</p>\n</details>",
      "73. What is the output of below code?",
      "```javascript\nlet user1 = {\n  name: 'Jacob',\n  age: 28\n};\n\nlet user2 = {\n  name: 'Jacob',\n  age: 28\n};\n\nconsole.log(user1 === user2);\n\n```",
      "1:  True",
      "2:  False",
      "3:  Compile time error",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "In JavaScript, the variables such as objects, arrays and functions comes under pass by reference. When you try to\ncompare two objects with same content, it is going to compare memory address or reference of those variables. These\nvariables always create separate memory blocks hence the comparison is always going to return false value.\n</p>\n</details>",
      "74. What is the output of below code?",
      "```javascript\nfunction greeting() {\n  setTimeout(function() {\n    console.log(message);\n  }, 5000);\n  const message = \"Hello, Good morning\";\n}\n\ngreeting();\n\n```",
      "1:  Undefined",
      "2:  Reference error:",
      "3:  Hello, Good morning",
      "4:  null",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "The variable `message` is still treated as closure(since it has been used in inner function) eventhough it has been\ndeclared after setTimeout function. The function with in setTimeout function will be sent to WebAPI and the variable\ndeclaration executed with in 5 seconds with the assigned value. Hence, the text declared for the variable will be\ndisplayed.\n</p>\n</details>",
      "75. What is the output of below code?",
      "```javascript\nconst a = new Number(10);\nconst b = 10;\nconsole.log(a === b);\n\n```",
      "1:  False",
      "2:  True",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 1",
      "Eventhough both variables `a` and `b` refer a number value, the first declaration is based on constructor function and\nthe type of the variable is going to be `object` type. Whereas the second declaration is primitive assignment with a\nnumber and the type is `number` type. Hence, the equality operator `===` will output `false` value.\n</p>\n</details>",
      "76. What is the type of below function?",
      "```javascript\nfunction add(a, b) {\n  console.log(\"The input arguments are: \", a, b);\n  return a + b;\n}\n\n```",
      "1:  Pure function",
      "2:  Impure function",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 2",
      "Eventhough the above function returns the same result for the same arguments(input) that are passed in the function,\nthe `console.log()` statement causes a function to have side effects because it affects the state of an external code.\ni.e, the `console` object's state and depends on it to perform the job. Hence, the above function considered as impure\nfunction.\n</p>\n</details>",
      "77. What is the output of below code?",
      "```javascript\nconst promiseOne = new Promise((resolve, reject) => setTimeout(resolve, 4000));\nconst promiseTwo = new Promise((resolve, reject) => setTimeout(reject, 4000));\n\nPromise.all([promiseOne, promiseTwo]).then(data => console.log(data));\n\n```",
      "1:  [{status: \"fullfilled\", value: undefined}, {status: \"rejected\", reason: undefined}]",
      "2:  [{status: \"fullfilled\", value: undefined}, Uncaught(in promise)]",
      "3:  Uncaught (in promise)",
      "4:  [Uncaught(in promise), Uncaught(in promise)]",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "The above promises settled at the same time but one of them resolved and other one rejected. When you use `.all` method\non these promises, the result will be short circuted by throwing an error due to rejection in second promise. But If you\nuse `.allSettled` method then result of both the promises will be returned irrespective of resolved or rejected promise\nstatus without throwing any error.",
      "```javascript\nPromise.allSettled([promiseOne, promiseTwo]).then(data => console.log(data));\n\n```",
      "</p>\n</details>",
      "78. What is the output of below code?",
      "```javascript\ntry {\n  setTimeout(() => {\n    console.log('try block');\n    throw new Error(`An exception is thrown`)\n  }, 1000);\n} catch (err) {\n  console.log('Error: ', err);\n}\n\n```",
      "1:  try block, Error: An exception is thrown",
      "2:  Error: An exception is thrown",
      "3:  try block, Uncaught Error: Exception is thrown",
      "4:  Uncaught Error: Exception is thrown",
      "<details><summary><b>Answer</b></summary>\n<p>",
      "Answer: 3",
      "If you put `setTimeout` and `setInterval` methods inside the try clause and an exception is thrown, the catch clause\nwill not catch any of them. This is because the try...catch statement works synchronously, and the function in the above\ncode is executed asynchronously after a certain period of time. Hence, you will see runtime exception without catching\nthe error. To resolve this issue, you have to put the try...catch block inside the function as below,",
      "```javascript\nsetTimeout(() => {\n  try {\n    console.log('try block');\n    throw new Error(`An exception is thrown`)\n  } catch (err) {\n    console.log('Error: ', err);\n  }\n\n}, 1000);\n\n```",
      "You can use `.catch()` function in promises to avoid these issues with asynchronous code.\n</p>\n</details>"
    ],
    "question_type": "",
    "language": "react",
    "tags": []
  }
]